{"version":3,"sources":["test/css/css-parser_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAA4B;AAC5B,yBAAyB;AACzB,6BAA6B;AAE7B,yDAAyD;AACzD,qDAA+C;AAE/C,KAAK,CAAC,WAAW,EAAE;IAEjB,KAAK,CAAC,SAAS,EAAE;QACf,MAAM,YAAY,GAAG,EAAE,CAAC,YAAY,CAChC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,0BAA0B,CAAC,EAAE,MAAM,CAAC,CAAC;QAEjE,IAAI,MAAiB,CAAC;QAEtB,KAAK,CAAC;YACJ,MAAM,GAAG,IAAI,sBAAS,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC;YACtE,aAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,gCAAiB,CAAC,CAAC;YAC/C,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;YACrD,aAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE;YACtB,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC;YACtE,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,YAAY,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"css-parser_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {ParsedCssDocument} from '../../css/css-document';\nimport {CssParser} from '../../css/css-parser';\n\nsuite('CssParser', () => {\n\n  suite('parse()', () => {\n    const fileContents = fs.readFileSync(\n        path.resolve(__dirname, '../static/stylesheet.css'), 'utf8');\n\n    let parser: CssParser;\n\n    setup(() => {\n      parser = new CssParser();\n    });\n\n    test('parses css', () => {\n      const document = parser.parse(fileContents, '/static/stylesheet.css');\n      assert.instanceOf(document, ParsedCssDocument);\n      assert.equal(document.url, '/static/stylesheet.css');\n      assert(document.ast != null);\n    });\n\n    test('stringifies css', () => {\n      const document = parser.parse(fileContents, '/static/stylesheet.css');\n      assert.deepEqual(document.stringify(), fileContents);\n    });\n  });\n\n});\n"]}