{"version":3,"sources":["test/parser/document_test.ts"],"names":[],"mappings":"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","file":"document_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {assert} from 'chai';\nimport {SourceRange} from '../../model/model';\nimport {ParsedDocument, StringifyOptions} from '../../parser/document';\n\nclass TestDocument extends ParsedDocument<null, null> {\n  type: string;\n  visit(_visitors: null[]): void {\n    throw new Error('Method not implemented.');\n  }\n  forEachNode(_callback: (node: null) => void): void {\n    throw new Error('Method not implemented.');\n  }\n  protected _sourceRangeForNode(_node: null): SourceRange|undefined {\n    throw new Error('Method not implemented.');\n  }\n  stringify(_options: StringifyOptions): string {\n    throw new Error('Method not implemented.');\n  }\n\n  constructor(contents: string) {\n    super({\n      ast: null,\n      astNode: null,\n      baseUrl: 'test-document', contents,\n      isInline: false,\n      locationOffset: undefined,\n      url: 'test-document'\n    });\n  }\n}\n\nsuite('ParsedDocument', () => {\n\n  /**\n   * We have pretty great tests of offsetsToSourceRange just because it's used\n   * so much in ParsedHtmlDocument, which has tons of tests. So we can get good\n   * tests of sourceRangeToOffsets by ensuring that they're inverses of one\n   * another.\n   */\n  const testName =\n      'offsetsToSourceRange is the inverse of sourceRangeToOffsets for ' +\n      'in-bounds ranges';\n  test(testName, async() => {\n    const contents = [``, `asdf`, `a\\na`, `asdf\\n\\nasdf`, `\\nasdf\\n`];\n    for (const content of contents) {\n      const document = new TestDocument(content);\n      for (let start = 0; start < content.length; start++) {\n        for (let end = start; end < content.length; end++) {\n          const range = document.offsetsToSourceRange(start, end);\n          const offsets = document.sourceRangeToOffsets(range);\n          assert.deepEqual(offsets, [start, end]);\n        }\n      }\n    }\n  });\n\n  test('sourcePositionToOffsets clamps out of bounds values', async() => {\n    const document = new TestDocument(`abc\\ndef`);\n    assert.deepEqual(document.sourcePositionToOffset({line: 0, column: -1}), 0);\n    assert.deepEqual(\n        document.sourcePositionToOffset({line: 1, column: -10}), 0);\n    assert.deepEqual(document.sourcePositionToOffset({line: 5, column: 0}), 7);\n    assert.deepEqual(document.sourcePositionToOffset({line: 1, column: 12}), 7);\n  });\n\n  test('sourceRangeToOffsets works for simple cases', async() => {\n    let document = new TestDocument('ab');\n    assert.deepEqual(document.offsetToSourcePosition(0), {line: 0, column: 0});\n    assert.deepEqual(document.offsetToSourcePosition(1), {line: 0, column: 1});\n    assert.deepEqual(document.offsetToSourcePosition(2), {line: 0, column: 2});\n    document = new TestDocument('\\n\\n');\n    assert.deepEqual(document.offsetToSourcePosition(0), {line: 0, column: 0});\n    assert.deepEqual(document.offsetToSourcePosition(1), {line: 1, column: 0});\n    assert.deepEqual(document.offsetToSourcePosition(2), {line: 2, column: 0});\n    document = new TestDocument('a\\nb\\nc');\n    assert.deepEqual(document.offsetToSourcePosition(0), {line: 0, column: 0});\n    assert.deepEqual(document.offsetToSourcePosition(1), {line: 0, column: 1});\n    assert.deepEqual(document.offsetToSourcePosition(2), {line: 1, column: 0});\n    assert.deepEqual(document.offsetToSourcePosition(3), {line: 1, column: 1});\n    assert.deepEqual(document.offsetToSourcePosition(4), {line: 2, column: 0});\n    assert.deepEqual(document.offsetToSourcePosition(5), {line: 2, column: 1});\n  });\n\n  test('sourceRangeToOffsets fails gracefully', async() => {\n    let document = new TestDocument('ab');\n    assert.deepEqual(\n        document.offsetToSourcePosition(-1), {line: 0, column: -1});\n    assert.deepEqual(document.offsetToSourcePosition(3), {line: 0, column: 3});\n    assert.deepEqual(document.offsetToSourcePosition(4), {line: 0, column: 4});\n    document = new TestDocument('\\n\\n');\n    assert.deepEqual(\n        document.offsetToSourcePosition(-1), {line: 0, column: -1});\n    assert.deepEqual(document.offsetToSourcePosition(3), {line: 2, column: 1});\n    assert.deepEqual(document.offsetToSourcePosition(4), {line: 2, column: 2});\n  });\n});\n"]}