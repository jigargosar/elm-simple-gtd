{"version":3,"sources":["test/typescript/typescript-analyzer_test.ts"],"names":[],"mappings":"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","file":"typescript-analyzer_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as ts from 'typescript';\n\nimport {AnalysisContext} from '../../core/analysis-context';\nimport {TypeScriptAnalyzer} from '../../typescript/typescript-analyzer';\nimport {InMemoryOverlayUrlLoader} from '../../url-loader/overlay-loader';\nimport {PackageUrlResolver} from '../../url-loader/package-url-resolver';\n\nasync function getTypeScriptAnalyzer(files: {[url: string]: string}) {\n  const urlLoader = new InMemoryOverlayUrlLoader();\n  for (const url of Object.keys(files)) {\n    urlLoader.urlContentsMap.set(url, files[url]!);\n  }\n  const urlResolver = new PackageUrlResolver();\n  const analysisContext = new AnalysisContext({urlLoader, urlResolver});\n  // This puts documents into the scanned document cache\n  await Promise.all(Object.keys(files).map((url) => analysisContext.scan(url)));\n  return new TypeScriptAnalyzer(analysisContext);\n}\n\nsuite('TypeScriptParser', () => {\n  suite('parse()', () => {\n\n    test('parses classes', async() => {\n      const fileName = '/typescript/test.ts';\n      const typescriptAnalyzer = await getTypeScriptAnalyzer({\n        [fileName]: `\n          class A extends HTMLElement {\n            foo() { return 'bar'; }\n          }`\n      });\n      const program = typescriptAnalyzer.analyze(fileName);\n      const checker = program.getTypeChecker();\n\n      assert.deepEqual(program.getRootFileNames(), [fileName]);\n\n      // Get the HTMLElement type from the DOM module\n      let htmlElement: ts.Type;\n      const domSource = program.getSourceFile('/$lib/DOM.d.ts');\n      ts.forEachChild(domSource, (node) => {\n        if (node.kind === ts.SyntaxKind.InterfaceDeclaration) {\n          const innerface = node as ts.InterfaceDeclaration;\n          if (innerface.name.getText() === 'HTMLElement') {\n            htmlElement = checker.getTypeAtLocation(innerface);\n          }\n        }\n      });\n\n      // Get class A and assert that it extends HTMLElement\n      const sourceFile = program.getSourceFile(fileName);\n      ts.forEachChild(sourceFile, (node) => {\n        if (node.kind === ts.SyntaxKind.ClassDeclaration) {\n          const class_ = node as ts.ClassDeclaration;\n          if (class_.name && class_.name.getText() === 'A') {\n            const type = checker.getTypeAtLocation(class_) as ts.InterfaceType;\n            const baseTypes = checker.getBaseTypes(type);\n            assert.include(baseTypes, htmlElement);\n            const properties = checker.getPropertiesOfType(type);\n            const ownProperties = properties.filter(\n                (p) => p.getDeclarations().some((d) => d.parent === class_));\n            assert.equal(ownProperties.length, 1);\n            assert.equal(ownProperties[0].name, 'foo');\n          }\n        }\n      });\n    });\n  });\n\n});\n"]}