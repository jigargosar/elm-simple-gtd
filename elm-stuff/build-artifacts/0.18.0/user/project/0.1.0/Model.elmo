var _user$project$Model$getNotificationCmdFromTodoChange = F2(
	function (uid, _p0) {
		var _p1 = _p0;
		var _p2 = _p1._1;
		if (_user$project$Todo$hasReminderChanged(_p1)) {
			var maybeTime = _user$project$Todo$getMaybeReminderTime(_p2);
			var todoId = _user$project$Document$getId(_p2);
			return A3(_user$project$Firebase$scheduledReminderNotificationCmd, maybeTime, uid, todoId);
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Model$getProjectsAsIdDict = function (_p3) {
	return _user$project$Store$asIdDict(
		function (_) {
			return _.projectStore;
		}(_p3));
};
var _user$project$Model$getContextsAsIdDict = function (_p4) {
	return _user$project$Store$asIdDict(
		function (_) {
			return _.contextStore;
		}(_p4));
};
var _user$project$Model$getActiveContexts = function (_p5) {
	return A2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		_user$project$Context$null,
		A2(
			_user$project$Store$reject,
			_user$project$Document$isDeleted,
			function (_) {
				return _.contextStore;
			}(_p5)));
};
var _user$project$Model$getActiveProjects = function (_p6) {
	return A2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		_user$project$Project$null,
		A2(
			_user$project$Store$reject,
			_user$project$Document$isDeleted,
			function (_) {
				return _.projectStore;
			}(_p6)));
};
var _user$project$Model$getFocusInEntityId = function (model) {
	return model.focusedEntityInfo.id;
};
var _user$project$Model$setMaybeFocusedEntity = F2(
	function (maybeEntity, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{maybeFocusedEntity: maybeEntity});
	});
var _user$project$Model$setFocusInEntityWithId = F2(
	function (id, model) {
		var focusedEntityInfo = model.focusedEntityInfo;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				focusedEntityInfo: _elm_lang$core$Native_Utils.update(
					focusedEntityInfo,
					{id: id})
			});
	});
var _user$project$Model$setKeyboardState = F2(
	function (keyboardState, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{keyboardState: keyboardState});
	});
var _user$project$Model$updateKeyboardStateM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setKeyboardState,
			updater(model),
			model);
	});
var _user$project$Model$getKeyboardState = function (_) {
	return _.keyboardState;
};
var _user$project$Model$updateKeyboardState = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setKeyboardState,
			updater(
				_user$project$Model$getKeyboardState(model)),
			model);
	});
var _user$project$Model$updateNowM = F2(
	function (updater, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				now: updater(model)
			});
	});
var _user$project$Model$setNow = F2(
	function (now, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{now: now});
	});
var _user$project$Model$getNow = function (_) {
	return _.now;
};
var _user$project$Model$setContextStore = F2(
	function (contextStore, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{contextStore: contextStore});
	});
var _user$project$Model$setContextStoreIn = _elm_lang$core$Basics$flip(_user$project$Model$setContextStore);
var _user$project$Model$updateContextStoreM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setContextStore,
			updater(model),
			model);
	});
var _user$project$Model$getContextStore = function (_) {
	return _.contextStore;
};
var _user$project$Model$setProjectStore = F2(
	function (projectStore, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{projectStore: projectStore});
	});
var _user$project$Model$setProjectStoreIn = _elm_lang$core$Basics$flip(_user$project$Model$setProjectStore);
var _user$project$Model$updateProjectStoreM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setProjectStore,
			updater(model),
			model);
	});
var _user$project$Model$getProjectStore = function (_) {
	return _.projectStore;
};
var _user$project$Model$updateProjectStore = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setProjectStore,
			updater(
				_user$project$Model$getProjectStore(model)),
			model);
	});
var _user$project$Model$setTodoStore = F2(
	function (todoStore, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{todoStore: todoStore});
	});
var _user$project$Model$getTodoStore = function (_) {
	return _.todoStore;
};
var _user$project$Model$updateTodoStore = F2(
	function (updater, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				todoStore: updater(
					_user$project$Model$getTodoStore(model))
			});
	});
var _user$project$Model$setSelectedEntityIdSet = F2(
	function (selectedEntityIdSet, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{selectedEntityIdSet: selectedEntityIdSet});
	});
var _user$project$Model$updateSelectedEntityIdSetM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setSelectedEntityIdSet,
			updater(model),
			model);
	});
var _user$project$Model$getSelectedEntityIdSet = function (_) {
	return _.selectedEntityIdSet;
};
var _user$project$Model$updateSelectedEntityIdSet = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setSelectedEntityIdSet,
			updater(
				_user$project$Model$getSelectedEntityIdSet(model)),
			model);
	});
var _user$project$Model$toggleSetMember = F2(
	function (item, set) {
		return A2(_elm_lang$core$Set$member, item, set) ? A2(_elm_lang$core$Set$remove, item, set) : A2(_elm_lang$core$Set$insert, item, set);
	});
var _user$project$Model$setLayout = F2(
	function (layout, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{layout: layout});
	});
var _user$project$Model$updateLayoutM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setLayout,
			updater(model),
			model);
	});
var _user$project$Model$getLayout = function (_) {
	return _.layout;
};
var _user$project$Model$updateLayout = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setLayout,
			updater(
				_user$project$Model$getLayout(model)),
			model);
	});
var _user$project$Model$getProjectListForCurrentViewFromTodoList = F2(
	function (todoList, model) {
		var projectIdSet = _elm_lang$core$Set$fromList(
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], todoList, _user$project$Todo$getProjectId));
		var includeNull = A2(_elm_lang$core$Set$member, '', projectIdSet);
		var nullProjectAsList = (model.showDeleted || (!includeNull)) ? {ctor: '[]'} : {
			ctor: '::',
			_0: _user$project$Project$null,
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$core$List$append,
			nullProjectAsList,
			A2(_user$project$Store$findAllByIdSetIn, model.projectStore, projectIdSet));
	});
var _user$project$Model$getContextListForCurrentViewFromTodoList = F2(
	function (todoList, model) {
		var contextIdSet = _elm_lang$core$Set$fromList(
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], todoList, _user$project$Todo$getContextId));
		var includeNull = A2(_elm_lang$core$Set$member, '', contextIdSet);
		var nullContextAsList = (model.showDeleted || (!includeNull)) ? {ctor: '[]'} : {
			ctor: '::',
			_0: _user$project$Context$null,
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$core$List$append,
			nullContextAsList,
			A2(_user$project$Store$findAllByIdSetIn, model.contextStore, contextIdSet));
	});
var _user$project$Model$getContextsViewEntityList = F3(
	function (todoList, enableSubgroup, model) {
		var contextList = A2(_user$project$Model$getContextListForCurrentViewFromTodoList, todoList, model);
		var todoListByContextId = A2(_elm_community$dict_extra$Dict_Extra$groupBy, _user$project$Todo$getContextId, todoList);
		var todoEntitiesForContext = function (context) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_elm_lang$core$Dict$get,
						_user$project$Document$getId(context),
						todoListByContextId),
					{ctor: '[]'}),
				_user$project$Entity$TodoEntity);
		};
		var subGroupEntitiesForContext = function (context) {
			return function (todoList) {
				return A3(_user$project$Model$getProjectsViewEntityList, todoList, false, model);
			}(
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_elm_lang$core$Dict$get,
						_user$project$Document$getId(context),
						todoListByContextId),
					{ctor: '[]'}));
		};
		var entitiesForContext = enableSubgroup ? subGroupEntitiesForContext : todoEntitiesForContext;
		return A2(
			_elm_lang$core$List$concatMap,
			function (context) {
				return {
					ctor: '::',
					_0: _user$project$Entity$ContextEntity(context),
					_1: entitiesForContext(context)
				};
			},
			contextList);
	});
var _user$project$Model$getProjectsViewEntityList = F3(
	function (todoList, enableSubgroup, model) {
		var projectList = A2(_user$project$Model$getProjectListForCurrentViewFromTodoList, todoList, model);
		var todoListByProjectId = A2(_elm_community$dict_extra$Dict_Extra$groupBy, _user$project$Todo$getProjectId, todoList);
		var todoEntitiesForProject = function (project) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_elm_lang$core$Dict$get,
						_user$project$Document$getId(project),
						todoListByProjectId),
					{ctor: '[]'}),
				_user$project$Entity$TodoEntity);
		};
		var subGroupEntitiesForProject = function (project) {
			return function (todoList) {
				return A3(_user$project$Model$getContextsViewEntityList, todoList, false, model);
			}(
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_elm_lang$core$Dict$get,
						_user$project$Document$getId(project),
						todoListByProjectId),
					{ctor: '[]'}));
		};
		var entitiesForProject = enableSubgroup ? subGroupEntitiesForProject : todoEntitiesForProject;
		return A2(
			_elm_lang$core$List$concatMap,
			function (project) {
				return {
					ctor: '::',
					_0: _user$project$Entity$ProjectEntity(project),
					_1: entitiesForProject(project)
				};
			},
			projectList);
	});
var _user$project$Model$getEntityId = function (entity) {
	var _p7 = entity;
	switch (_p7.ctor) {
		case 'TodoEntity':
			return _user$project$Document$getId(_p7._0);
		case 'ProjectEntity':
			return _user$project$Document$getId(_p7._0);
		default:
			return _user$project$Document$getId(_p7._0);
	}
};
var _user$project$Model$toggleEntitySelection = function (entity) {
	return _user$project$Model$updateSelectedEntityIdSet(
		_user$project$Model$toggleSetMember(
			_user$project$Model$getEntityId(entity)));
};
var _user$project$Model$setFocusInEntityByIndex = F3(
	function (entityList, index, model) {
		var focusedEntityId = A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _elm_community$list_extra$List_Extra$getAt, entityList)(
					A2(_user$project$Ext_List$clampIndex, index, entityList)),
				_user$project$Model$getEntityId),
			'');
		var focusedEntityInfo = {id: focusedEntityId};
		return _elm_lang$core$Native_Utils.update(
			model,
			{focusedEntityInfo: focusedEntityInfo});
	});
var _user$project$Model$getMaybeFocusInEntityIndex = F2(
	function (entityList, model) {
		return A2(
			_elm_community$list_extra$List_Extra$findIndex,
			function (_p8) {
				return A2(
					_user$project$Ext_Function$equals,
					model.focusedEntityInfo.id,
					_user$project$Model$getEntityId(_p8));
			},
			entityList);
	});
var _user$project$Model$getFocusInEntityIndex = F2(
	function (entityList, model) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(_user$project$Model$getMaybeFocusInEntityIndex, entityList, model),
			0);
	});
var _user$project$Model$focusPrevEntity = F2(
	function (entityList, model) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'],
			_user$project$Model$setFocusInEntityByIndex(entityList),
			model)(
			A2(
				_user$project$Ext_Function$andThenSubtract,
				1,
				A2(_user$project$Model$getFocusInEntityIndex, entityList, model)));
	});
var _user$project$Model$focusNextEntity = F2(
	function (entityList, model) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'],
			_user$project$Model$setFocusInEntityByIndex(entityList),
			model)(
			A2(
				_user$project$Ext_Function$add,
				1,
				A2(_user$project$Model$getFocusInEntityIndex, entityList, model)));
	});
var _user$project$Model$getMainViewType = function (_) {
	return _.mainViewType;
};
var _user$project$Model$upsertEncodedDocOnFirebaseChange = F2(
	function (dbName, encodedEntity) {
		var _p9 = dbName;
		switch (_p9) {
			case 'todo-db':
				return function (_p10) {
					return A2(
						_user$project$Store$upsertInPouchDbOnFirebaseChange,
						encodedEntity,
						_user$project$Model$getTodoStore(_p10));
				};
			case 'project-db':
				return function (_p11) {
					return A2(
						_user$project$Store$upsertInPouchDbOnFirebaseChange,
						encodedEntity,
						_user$project$Model$getProjectStore(_p11));
				};
			case 'context-db':
				return function (_p12) {
					return A2(
						_user$project$Store$upsertInPouchDbOnFirebaseChange,
						encodedEntity,
						_user$project$Model$getContextStore(_p12));
				};
			default:
				return function (_p13) {
					return _elm_lang$core$Platform_Cmd$none;
				};
		}
	});
var _user$project$Model$setTodoStoreFromTuple = F2(
	function (tuple, model) {
		return A2(
			_elm_lang$core$Tuple$mapSecond,
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$setTodoStore, model),
			tuple);
	});
var _user$project$Model$findContextById = function (id) {
	return function (_p14) {
		return A2(
			_user$project$Store$findById,
			id,
			function (_) {
				return _.contextStore;
			}(_p14));
	};
};
var _user$project$Model$findProjectById = function (id) {
	return function (_p15) {
		return A2(
			_user$project$Store$findById,
			id,
			function (_) {
				return _.projectStore;
			}(_p15));
	};
};
var _user$project$Model$findTodoById = function (id) {
	return function (_p16) {
		return A2(
			_user$project$Store$findById,
			id,
			_user$project$Model$getTodoStore(_p16));
	};
};
var _user$project$Model$getCurrentTodoListSortByFunction = function (model) {
	var _p17 = _user$project$Model$getMainViewType(model);
	switch (_p17.ctor) {
		case 'BinView':
			return function (_p18) {
				return _elm_lang$core$Basics$negate(
					_user$project$Todo$getDeletedAt(_p18));
			};
		case 'DoneView':
			return function (_p19) {
				return _elm_lang$core$Basics$negate(
					_user$project$Todo$getModifiedAt(_p19));
			};
		default:
			return function (_p20) {
				return _elm_lang$core$Basics$negate(
					_user$project$Todo$getModifiedAt(_p20));
			};
	}
};
var _user$project$Model$getTodoListFilterForCurrentView = function (model) {
	var $default = _user$project$Todo$toAllPassPredicate(
		{
			ctor: '::',
			_0: function (_p21) {
				return !_user$project$Todo$isDone(_p21);
			},
			_1: {
				ctor: '::',
				_0: function (_p22) {
					return A2(
						_user$project$Ext_Function$equals,
						model.showDeleted,
						_user$project$Todo$isDeleted(_p22));
				},
				_1: {ctor: '[]'}
			}
		});
	var _p23 = _user$project$Model$getMainViewType(model);
	switch (_p23.ctor) {
		case 'BinView':
			return _user$project$Todo$binFilter;
		case 'DoneView':
			return _user$project$Todo$doneFilter;
		case 'EntityListView':
			var _p24 = _p23._0;
			switch (_p24.ctor) {
				case 'ContextsView':
					return $default;
				case 'ContextView':
					return _user$project$Todo$toAllPassPredicate(
						{
							ctor: '::',
							_0: function (_p25) {
								return A2(
									_user$project$Ext_Function$equals,
									_p24._0,
									_user$project$Todo$getContextId(_p25));
							},
							_1: {
								ctor: '::',
								_0: $default,
								_1: {ctor: '[]'}
							}
						});
				case 'ProjectsView':
					return $default;
				default:
					return _user$project$Todo$toAllPassPredicate(
						{
							ctor: '::',
							_0: function (_p26) {
								return A2(
									_user$project$Ext_Function$equals,
									_p24._0,
									_user$project$Todo$getProjectId(_p26));
							},
							_1: {
								ctor: '::',
								_0: $default,
								_1: {ctor: '[]'}
							}
						});
			}
		default:
			return _elm_lang$core$Basics$always(true);
	}
};
var _user$project$Model$getTodoListForCurrentView = function (model) {
	var sortFunction = _user$project$Model$getCurrentTodoListSortByFunction(model);
	var allTodos = function (_p27) {
		return _user$project$Store$asList(
			_user$project$Model$getTodoStore(_p27));
	}(model);
	var filter = _user$project$Model$getTodoListFilterForCurrentView(model);
	return A2(
		_elm_lang$core$List$take,
		50,
		A2(
			_elm_lang$core$List$sortBy,
			sortFunction,
			A2(_elm_lang$core$List$filter, filter, allTodos)));
};
var _user$project$Model$clearSelection = _user$project$Model$setSelectedEntityIdSet(_elm_lang$core$Set$empty);
var _user$project$Model$switchToView = F2(
	function (mainViewType, model) {
		return _user$project$Model$clearSelection(
			_elm_lang$core$Native_Utils.update(
				model,
				{mainViewType: mainViewType}));
	});
var _user$project$Model$setEditMode = F2(
	function (editMode, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{editMode: editMode});
	});
var _user$project$Model$updateEditModeM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setEditMode,
			updater(model),
			model);
	});
var _user$project$Model$getEditMode = function (_) {
	return _.editMode;
};
var _user$project$Model$deactivateEditingMode = _user$project$Model$setEditMode(_user$project$EditMode$none);
var _user$project$Model$createEntityEditForm = F2(
	function (entity, model) {
		var _p28 = entity;
		switch (_p28.ctor) {
			case 'ContextEntity':
				return _user$project$EditMode$editContextMode(_p28._0);
			case 'ProjectEntity':
				return _user$project$EditMode$editProjectMode(_p28._0);
			default:
				return _user$project$EditMode$EditTodo(
					_user$project$Todo_Form$create(_p28._0));
		}
	});
var _user$project$Model$createRemoteSyncForm = function (model) {
	return {uri: model.pouchDBRemoteSyncURI};
};
var _user$project$Model$getRemoteSyncForm = function (model) {
	var maybeForm = function () {
		var _p29 = model.editMode;
		if (_p29.ctor === 'EditSyncSettings') {
			return _elm_lang$core$Maybe$Just(_p29._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}();
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
		maybeForm,
		_user$project$Model$createRemoteSyncForm(model));
};
var _user$project$Model$getMaybeEditTodoProjectForm = function (model) {
	var _p30 = model.editMode;
	if (_p30.ctor === 'EditTodoProject') {
		return _elm_lang$core$Maybe$Just(_p30._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Model$getMaybeEditTodoContextForm = function (model) {
	var _p31 = model.editMode;
	if (_p31.ctor === 'EditTodoContext') {
		return _elm_lang$core$Maybe$Just(_p31._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Model$getMaybeEditTodoReminderForm = function (model) {
	var _p32 = model.editMode;
	if (_p32.ctor === 'EditTodoReminder') {
		return _elm_lang$core$Maybe$Just(_p32._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Model$updateEditModeNameChanged = F3(
	function (newName, entity, model) {
		var _p33 = model.editMode;
		switch (_p33.ctor) {
			case 'EditContext':
				return A2(
					_user$project$Model$setEditMode,
					A2(_user$project$EditMode$editContextSetName, newName, _p33._0),
					model);
			case 'EditProject':
				return A2(
					_user$project$Model$setEditMode,
					A2(_user$project$EditMode$editProjectSetName, newName, _p33._0),
					model);
			default:
				return model;
		}
	});
var _user$project$Model$startEditingEntity = F2(
	function (entity, model) {
		return A2(
			_user$project$Model$setEditMode,
			A2(_user$project$Model$createEntityEditForm, entity, model),
			model);
	});
var _user$project$Model$startEditingTodoProject = function (todo) {
	return _user$project$Model$setEditMode(
		_user$project$EditMode$EditTodoProject(todo));
};
var _user$project$Model$startEditingTodoContext = function (todo) {
	return _user$project$Model$setEditMode(
		_user$project$EditMode$EditTodoContext(todo));
};
var _user$project$Model$startEditingReminder = function (todo) {
	return _user$project$Model$updateEditModeM(
		function (_p34) {
			return _user$project$EditMode$EditTodoReminder(
				A2(
					_user$project$Todo_ReminderForm$create,
					todo,
					function (_) {
						return _.now;
					}(_p34)));
		});
};
var _user$project$Model$setReminderOverlayToSnoozeView = F2(
	function (details, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				reminderOverlay: _user$project$ReminderOverlay$snoozeView(details)
			});
	});
var _user$project$Model$removeReminderOverlay = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{reminderOverlay: _user$project$ReminderOverlay$none});
};
var _user$project$Model$setReminderOverlayToInitialView = F2(
	function (todo, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				reminderOverlay: _user$project$ReminderOverlay$initialView(todo)
			});
	});
var _user$project$Model$showReminderOverlayForTodoId = function (todoId) {
	return A2(
		_user$project$Ext_Function$applyMaybeWith,
		_user$project$Model$findTodoById(todoId),
		_user$project$Model$setReminderOverlayToInitialView);
};
var _user$project$Model$findTodoWithOverDueReminder = function (model) {
	return A2(
		_user$project$Store$findBy,
		_user$project$Todo$isReminderOverdue(model.now),
		model.todoStore);
};
var _user$project$Model$getActiveTodoListWithReminderTime = function (model) {
	return A2(
		_user$project$Store$filter,
		_user$project$Todo$isReminderOverdue(model.now),
		model.todoStore);
};
var _user$project$Model$getActiveTodoList = function (_p35) {
	return A2(
		_user$project$Store$reject,
		_user$project$Ext_Function$anyPass(
			{
				ctor: '::',
				_0: _user$project$Todo$isDeleted,
				_1: {
					ctor: '::',
					_0: _user$project$Todo$isDone,
					_1: {ctor: '[]'}
				}
			}),
		function (_) {
			return _.todoStore;
		}(_p35));
};
var _user$project$Model$getActiveTodoListGroupedBy = function (fn) {
	return function (_p36) {
		return A2(
			_elm_community$dict_extra$Dict_Extra$groupBy,
			fn,
			_user$project$Model$getActiveTodoList(_p36));
	};
};
var _user$project$Model$filterContexts = F2(
	function (pred, model) {
		return A2(
			_elm_lang$core$List$append,
			_user$project$Context$filterNull(pred),
			A2(_user$project$Store$filter, pred, model.contextStore));
	});
var _user$project$Model$filterProjects = F2(
	function (pred, model) {
		return A2(
			_elm_lang$core$List$append,
			_user$project$Project$filterNull(pred),
			A2(_user$project$Store$filter, pred, model.projectStore));
	});
var _user$project$Model$filterTodos = F2(
	function (pred, model) {
		return A2(_user$project$Store$filter, pred, model.todoStore);
	});
var _user$project$Model$createGrouping = F2(
	function (viewType, model) {
		var defRet = _user$project$Entity$Multi(
			{ctor: '[]'});
		var deletedFilter = model.showDeleted ? _user$project$Document$isDeleted : function (_p37) {
			return !_user$project$Document$isDeleted(_p37);
		};
		var filterTodosForContext = function (context) {
			return A2(
				_user$project$Model$filterTodos,
				_user$project$Ext_Predicate$all(
					{
						ctor: '::',
						_0: deletedFilter,
						_1: {
							ctor: '::',
							_0: _user$project$Todo$isNotDone,
							_1: {
								ctor: '::',
								_0: _user$project$Todo$contextFilter(context),
								_1: {ctor: '[]'}
							}
						}
					}),
				model);
		};
		var filterTodosForProject = function (project) {
			return A2(
				_user$project$Model$filterTodos,
				_user$project$Ext_Predicate$all(
					{
						ctor: '::',
						_0: deletedFilter,
						_1: {
							ctor: '::',
							_0: _user$project$Todo$isNotDone,
							_1: {
								ctor: '::',
								_0: _user$project$Todo$projectFilter(project),
								_1: {ctor: '[]'}
							}
						}
					}),
				model);
		};
		var _p38 = viewType;
		switch (_p38.ctor) {
			case 'ContextsView':
				return A2(
					_user$project$Entity$createGroupingForContexts,
					filterTodosForContext,
					A2(_user$project$Model$filterContexts, deletedFilter, model));
			case 'ProjectsView':
				return A2(
					_user$project$Entity$createGroupingForProjects,
					filterTodosForProject,
					A2(_user$project$Model$filterProjects, deletedFilter, model));
			case 'ContextView':
				return defRet;
			default:
				return defRet;
		}
	});
var _user$project$Model$createEntityListFromEntityListViewType = F2(
	function (viewType, model) {
		var todoList = _user$project$Model$getTodoListForCurrentView(model);
		var _p39 = viewType;
		switch (_p39.ctor) {
			case 'ContextsView':
				return _user$project$Entity$flattenGrouping(
					A2(_user$project$Model$createGrouping, viewType, model));
			case 'ProjectsView':
				return _user$project$Entity$flattenGrouping(
					A2(_user$project$Model$createGrouping, viewType, model));
			case 'ContextView':
				var addDefaultIfEmpty = function (list) {
					return _elm_lang$core$List$isEmpty(list) ? function (_p40) {
						return _elm_lang$core$List$singleton(
							_user$project$Entity$ContextEntity(_p40));
					}(
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
							A2(_user$project$Model$findContextById, _p39._0, model),
							_user$project$Context$null)) : list;
				};
				return addDefaultIfEmpty(
					A3(_user$project$Model$getContextsViewEntityList, todoList, true, model));
			default:
				var addDefaultIfEmpty = function (list) {
					return _elm_lang$core$List$isEmpty(list) ? function (_p41) {
						return _elm_lang$core$List$singleton(
							_user$project$Entity$ProjectEntity(_p41));
					}(
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
							A2(_user$project$Model$findProjectById, _p39._0, model),
							_user$project$Project$null)) : list;
				};
				return addDefaultIfEmpty(
					A3(_user$project$Model$getProjectsViewEntityList, todoList, true, model));
		}
	});
var _user$project$Model$getCurrentViewEntityList = function (model) {
	var _p42 = model.mainViewType;
	if (_p42.ctor === 'EntityListView') {
		return A2(_user$project$Model$createEntityListFromEntityListViewType, _p42._0, model);
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Model$updateEntityListCursorFromEntityIndexTuple = F2(
	function (model, indexTuple) {
		var setFocusInIndex = function (index) {
			return A2(
				_user$project$Model$setFocusInEntityByIndex,
				_user$project$Model$getCurrentViewEntityList(model),
				index);
		};
		return function () {
			var _p43 = indexTuple;
			if (((_p43.ctor === '_Tuple2') && (_p43._0.ctor === 'Just')) && (_p43._1.ctor === 'Nothing')) {
				return setFocusInIndex(_p43._0._0);
			} else {
				return _elm_lang$core$Basics$identity;
			}
		}()(model);
	});
var _user$project$Model$updateEntityListCursor = F2(
	function (oldModel, newModel) {
		return A2(
			_user$project$Model$updateEntityListCursorFromEntityIndexTuple,
			newModel,
			A2(
				_Fresheyeball$elm_tuple_extra$Tuple2$mapBoth,
				function (_p44) {
					return A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$getMaybeFocusInEntityIndex, oldModel)(
						_user$project$Model$getCurrentViewEntityList(_p44));
				},
				{ctor: '_Tuple2', _0: oldModel, _1: newModel}));
	});
var _user$project$Model$getCurrentNamedDocList = F2(
	function (store, model) {
		return A2(
			model.showDeleted ? _user$project$Store$filter : _user$project$Store$reject,
			_user$project$Document$isDeleted,
			store);
	});
var _user$project$Model$isLayoutAutoNarrow = function (_p45) {
	return A2(
		_elm_lang$core$Basics$uncurry,
		_user$project$Ext_Function$and,
		A2(
			_danielnarey$elm_toolkit$Toolkit_Helpers$apply2,
			{
				ctor: '_Tuple2',
				_0: function (_p46) {
					return !function (_) {
						return _.forceNarrow;
					}(_p46);
				},
				_1: function (_) {
					return _.narrow;
				}
			},
			_user$project$Model$getLayout(_p45)));
};
var _user$project$Model$getLayoutForceNarrow = function (_p47) {
	return function (_) {
		return _.forceNarrow;
	}(
		function (_) {
			return _.layout;
		}(_p47));
};
var _user$project$Model$setLayoutNarrow = function (narrow) {
	return _user$project$Model$updateLayout(
		function (layout) {
			return _elm_lang$core$Native_Utils.update(
				layout,
				{narrow: narrow});
		});
};
var _user$project$Model$toggleLayoutForceNarrow = _user$project$Model$updateLayout(
	function (layout) {
		return _elm_lang$core$Native_Utils.update(
			layout,
			{forceNarrow: !layout.forceNarrow});
	});
var _user$project$Model$inboxEntity = _user$project$Entity$ContextEntity(_user$project$Context$null);
var _user$project$Model$setIn = F3(
	function (big, lens, small) {
		return A2(lens.set, small, big);
	});
var _user$project$Model$updateMaybe = F3(
	function (lens, smallMaybeF, big) {
		var maybeSmallT = smallMaybeF(
			lens.get(big));
		var maybeBigT = A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
			maybeSmallT,
			A2(_user$project$Model$setIn, big, lens));
		return maybeBigT;
	});
var _user$project$Model$update = F3(
	function (lens, smallF, big) {
		return A3(
			_user$project$Model$setIn,
			big,
			lens,
			smallF(
				lens.get(big)));
	});
var _user$project$Model$updateAllNamedDocsDocs = F4(
	function (idSet, updateFn, store, model) {
		return A2(
			_Fresheyeball$elm_return$Return$map,
			_user$project$Model$updateEntityListCursor(model),
			A2(
				_danielnarey$elm_toolkit$Toolkit_Helpers$apply2,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$Tuple$second,
					_1: function (changes) {
						return _elm_lang$core$Platform_Cmd$none;
					}
				},
				A3(
					_user$project$Model$update,
					store,
					A3(_user$project$Store$updateAll, idSet, model.now, updateFn),
					model)));
	});
var _user$project$Model$focusInEntity = {
	get: function (_) {
		return _.focusInEntity;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{focusInEntity: s});
		})
};
var _user$project$Model$setFocusInEntity = function (entity) {
	return function (_p48) {
		return A2(
			_user$project$Model$focusInEntity.set,
			entity,
			A2(
				_user$project$Model$setFocusInEntityWithId,
				_user$project$Model$getEntityId(entity),
				_p48));
	};
};
var _user$project$Model$setFocusInEntityFromTodoId = F2(
	function (todoId, model) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				_danielnarey$elm_toolkit$Toolkit_Helpers$maybe2Tuple(
					{
						ctor: '_Tuple2',
						_0: A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
							A2(_user$project$Model$findTodoById, todoId, model),
							_user$project$Entity$TodoEntity),
						_1: _elm_lang$core$Maybe$Just(model)
					}),
				_elm_lang$core$Basics$uncurry(_user$project$Model$setFocusInEntity)),
			model);
	});
var _user$project$Model$user = {
	get: function (_) {
		return _.user;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{user: s});
		})
};
var _user$project$Model$getMaybeUserProfile = function (_p49) {
	return _user$project$Firebase$getMaybeUserProfile(
		_user$project$Model$user.get(_p49));
};
var _user$project$Model$getMaybeUserId = function (_p50) {
	return _user$project$Firebase$getMaybeUserId(
		_user$project$Model$user.get(_p50));
};
var _user$project$Model$setUser = _user$project$Model$user.set;
var _user$project$Model$editMode = {
	get: function (_) {
		return _.editMode;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{editMode: s});
		})
};
var _user$project$Model$activateNewTodoModeWithFocusInEntityAsReference = function (model) {
	return A2(
		_user$project$Model$editMode.set,
		_user$project$EditMode$NewTodo(
			A2(
				_user$project$Todo_NewForm$create,
				_user$project$Model$focusInEntity.get(model),
				'')),
		model);
};
var _user$project$Model$activateNewTodoModeWithInboxAsReference = _user$project$Model$editMode.set(
	_user$project$EditMode$NewTodo(
		A2(_user$project$Todo_NewForm$create, _user$project$Model$inboxEntity, '')));
var _user$project$Model$updateNewTodoText = F2(
	function (form, text) {
		return _user$project$Model$editMode.set(
			_user$project$EditMode$NewTodo(
				A2(_user$project$Todo_NewForm$setText, text, form)));
	});
var _user$project$Model$firebaseClient = {
	get: function (_) {
		return _.firebaseClient;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{firebaseClient: s});
		})
};
var _user$project$Model$setFCMToken = F2(
	function (fcmToken, model) {
		return A3(
			_user$project$Model$update,
			_user$project$Model$firebaseClient,
			_user$project$Firebase$updateToken(fcmToken),
			_elm_lang$core$Native_Utils.update(
				model,
				{fcmToken: fcmToken}));
	});
var _user$project$Model$updateFirebaseConnection = function (connected) {
	return A2(
		_user$project$Model$update,
		_user$project$Model$firebaseClient,
		_user$project$Firebase$updateConnection(connected));
};
var _user$project$Model$now = {
	get: function (_) {
		return _.now;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{now: s});
		})
};
var _user$project$Model$keyboardState = {
	get: function (_) {
		return _.keyboardState;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{keyboardState: s});
		})
};
var _user$project$Model$isShowDetailsKeyPressed = function (_p51) {
	return !_user$project$Ext_Keyboard$isAltDown(
		_user$project$Model$keyboardState.get(_p51));
};
var _user$project$Model$todoStoreT2 = {
	get: function (_) {
		return _.todoStore;
	},
	set: F2(
		function (_p52, b) {
			var _p53 = _p52;
			return {
				ctor: '_Tuple2',
				_0: _p53._0,
				_1: _elm_lang$core$Native_Utils.update(
					b,
					{todoStore: _p53._1})
			};
		})
};
var _user$project$Model$insertTodo = function (constructWithId) {
	return A2(
		_user$project$Model$update,
		_user$project$Model$todoStoreT2,
		_user$project$Store$insert(constructWithId));
};
var _user$project$Model$findAndUpdateAllTodos = F3(
	function (findFn, action, model) {
		var updateFn = A2(
			_user$project$Todo$update,
			{
				ctor: '::',
				_0: action,
				_1: {ctor: '[]'}
			},
			model.now);
		var todoChangesToCmd = function (_p54) {
			var _p55 = _p54;
			var _p56 = _user$project$Model$getMaybeUserId(_p55._1);
			if (_p56.ctor === 'Nothing') {
				return _elm_lang$core$Platform_Cmd$none;
			} else {
				return _elm_lang$core$Platform_Cmd$batch(
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
						_p55._0,
						_user$project$Model$getNotificationCmdFromTodoChange(_p56._0)));
			}
		};
		return A2(
			_Fresheyeball$elm_return$Return$map,
			_user$project$Model$updateEntityListCursor(model),
			A2(
				_danielnarey$elm_toolkit$Toolkit_Helpers$apply2,
				{ctor: '_Tuple2', _0: _elm_lang$core$Tuple$second, _1: todoChangesToCmd},
				A3(
					_user$project$Model$update,
					_user$project$Model$todoStoreT2,
					A3(_user$project$Store$findAndUpdateAll, findFn, model.now, updateFn),
					model)));
	});
var _user$project$Model$updateTodo = F2(
	function (action, todoId) {
		return A2(
			_user$project$Model$findAndUpdateAllTodos,
			_user$project$Document$hasId(todoId),
			action);
	});
var _user$project$Model$snoozeTodoWithOffset = F3(
	function (snoozeOffset, todoId, model) {
		var time = A2(_user$project$ReminderOverlay$addSnoozeOffset, model.now, snoozeOffset);
		return function (_p57) {
			return A2(
				_elm_lang$core$Tuple$mapFirst,
				_user$project$Model$removeReminderOverlay,
				A3(
					_user$project$Model$updateTodo,
					_user$project$Todo$SnoozeTill(time),
					todoId,
					_p57));
		}(model);
	});
var _user$project$Model$findAndSnoozeOverDueTodo = function (model) {
	var snooze = function (todoId) {
		return function (_p58) {
			var _p59 = _p58;
			var _p60 = _p59._0;
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				A2(_user$project$Model$findTodoById, todoId, _p60),
				function (todo) {
					return {
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: todo, _1: _p60},
						_1: _p59._1
					};
				});
		}(
			A3(
				_user$project$Model$updateTodo,
				_user$project$Todo$SnoozeTill(model.now + (_elm_lang$core$Time$minute * 15)),
				todoId,
				model));
	};
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?+>'],
		A2(
			_user$project$Store$findBy,
			_user$project$Todo$isReminderOverdue(model.now),
			model.todoStore),
		function (_p61) {
			return snooze(
				_user$project$Document$getId(_p61));
		});
};
var _user$project$Model$updateAllTodos = F3(
	function (action, idSet, model) {
		return A3(
			_user$project$Model$findAndUpdateAllTodos,
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'],
				function (_p62) {
					return _elm_lang$core$Set$member(
						_user$project$Document$getId(_p62));
				},
				idSet),
			action,
			model);
	});
var _user$project$Model$updateTodoAndMaybeAlsoSelected = F3(
	function (action, todoId, model) {
		var _p63 = _user$project$Model$getFocusInEntityIndex;
		var idSet = A2(_elm_lang$core$Set$member, todoId, model.selectedEntityIdSet) ? model.selectedEntityIdSet : _elm_lang$core$Set$singleton(todoId);
		return A3(_user$project$Model$updateAllTodos, action, idSet, model);
	});
var _user$project$Model$projectStoreT2 = {
	get: function (_) {
		return _.projectStore;
	},
	set: F2(
		function (_p64, b) {
			var _p65 = _p64;
			return {
				ctor: '_Tuple2',
				_0: _p65._0,
				_1: _elm_lang$core$Native_Utils.update(
					b,
					{projectStore: _p65._1})
			};
		})
};
var _user$project$Model$updateProject = F2(
	function (id, updateFn) {
		return A3(
			_user$project$Model$updateAllNamedDocsDocs,
			_elm_lang$core$Set$singleton(id),
			updateFn,
			_user$project$Model$projectStoreT2);
	});
var _user$project$Model$contextStoreT2 = {
	get: function (_) {
		return _.contextStore;
	},
	set: F2(
		function (_p66, b) {
			var _p67 = _p66;
			return {
				ctor: '_Tuple2',
				_0: _p67._0,
				_1: _elm_lang$core$Native_Utils.update(
					b,
					{contextStore: _p67._1})
			};
		})
};
var _user$project$Model$updateContext = F2(
	function (id, updateFn) {
		return A3(
			_user$project$Model$updateAllNamedDocsDocs,
			_elm_lang$core$Set$singleton(id),
			updateFn,
			_user$project$Model$contextStoreT2);
	});
var _user$project$Model$saveCurrentForm = function (model) {
	var _p68 = model.editMode;
	switch (_p68.ctor) {
		case 'EditContext':
			var _p69 = _p68._0;
			return A3(
				_user$project$Model$updateContext,
				_p69.id,
				_user$project$Context$setName(_p69.name),
				model);
		case 'EditProject':
			var _p70 = _p68._0;
			return A3(
				_user$project$Model$updateProject,
				_p70.id,
				_user$project$Project$setName(_p70.name),
				model);
		case 'EditTodo':
			var _p71 = _p68._0;
			return A3(
				_user$project$Model$updateTodo,
				_user$project$Todo$SetText(_p71.todoText),
				_p71.id,
				model);
		case 'EditTodoReminder':
			var _p72 = _p68._0;
			return A3(
				_user$project$Model$updateTodo,
				_user$project$Todo$SetTime(
					_user$project$Todo_ReminderForm$getMaybeTime(_p72)),
				_p72.id,
				model);
		case 'EditTodoContext':
			return _Fresheyeball$elm_return$Return$singleton(model);
		case 'EditTodoProject':
			return _Fresheyeball$elm_return$Return$singleton(model);
		case 'NewTodo':
			var _p75 = _p68._0;
			return A2(
				_elm_lang$core$Basics$uncurry,
				function (todoId) {
					return function (_p73) {
						return A2(
							_elm_lang$core$Tuple$mapFirst,
							_user$project$Model$setFocusInEntityFromTodoId(todoId),
							A3(
								_user$project$Model$updateTodo,
								function () {
									var _p74 = _p75.referenceEntity;
									switch (_p74.ctor) {
										case 'TodoEntity':
											return _user$project$Todo$CopyProjectAndContextId(_p74._0);
										case 'ContextEntity':
											return _user$project$Todo$SetContext(_p74._0);
										default:
											return _user$project$Todo$SetProject(_p74._0);
									}
								}(),
								todoId,
								_p73));
					};
				},
				A2(
					_elm_lang$core$Tuple$mapFirst,
					_user$project$Document$getId,
					A2(
						_user$project$Model$insertTodo,
						A2(
							_user$project$Todo$init,
							model.now,
							_user$project$Todo_NewForm$getText(_p75)),
						model)));
		case 'EditSyncSettings':
			return _Fresheyeball$elm_return$Return$singleton(
				_elm_lang$core$Native_Utils.update(
					model,
					{pouchDBRemoteSyncURI: _p68._0.uri}));
		default:
			return _Fresheyeball$elm_return$Return$singleton(model);
	}
};
var _user$project$Model$toggleDeleteEntity = F2(
	function (entity, model) {
		var entityId = _user$project$Model$getEntityId(entity);
		return function () {
			var _p76 = entity;
			switch (_p76.ctor) {
				case 'ContextEntity':
					return A2(_user$project$Model$updateContext, entityId, _user$project$Document$toggleDeleted);
				case 'ProjectEntity':
					return A2(_user$project$Model$updateProject, entityId, _user$project$Document$toggleDeleted);
				default:
					return A2(_user$project$Model$updateTodo, _user$project$Todo$ToggleDeleted, entityId);
			}
		}()(model);
	});
var _user$project$Model$todoStore = {
	get: function (_) {
		return _.todoStore;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{todoStore: s});
		})
};
var _user$project$Model$projectStore = {
	get: function (_) {
		return _.projectStore;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{projectStore: s});
		})
};
var _user$project$Model$contextStore = {
	get: function (_) {
		return _.contextStore;
	},
	set: F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{contextStore: s});
		})
};
var _user$project$Model$upsertEncodedDocOnPouchDBChange = F2(
	function (dbName, encodedEntity) {
		var _p77 = dbName;
		switch (_p77) {
			case 'todo-db':
				return A2(
					_user$project$Model$update,
					_user$project$Model$todoStore,
					_user$project$Store$upsertOnPouchDBChange(encodedEntity));
			case 'project-db':
				return A2(
					_user$project$Model$update,
					_user$project$Model$projectStore,
					_user$project$Store$upsertOnPouchDBChange(encodedEntity));
			case 'context-db':
				return A2(
					_user$project$Model$update,
					_user$project$Model$contextStore,
					_user$project$Store$upsertOnPouchDBChange(encodedEntity));
			default:
				return _elm_lang$core$Basics$identity;
		}
	});
var _user$project$Model$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return {now: a, todoStore: b, projectStore: c, contextStore: d, editMode: e, mainViewType: f, keyboardState: g, showDeleted: h, reminderOverlay: i, pouchDBRemoteSyncURI: j, user: k, fcmToken: l, developmentMode: m, focusedEntityInfo: n, selectedEntityIdSet: o, layout: p, maybeFocusedEntity: q, appVersion: r, deviceId: s, firebaseClient: t, focusInEntity: u};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Model$Layout = F2(
	function (a, b) {
		return {narrow: a, forceNarrow: b};
	});
var _user$project$Model$EntityFocus = function (a) {
	return {id: a};
};
var _user$project$Model$Flags = F8(
	function (a, b, c, d, e, f, g, h) {
		return {now: a, encodedTodoList: b, encodedProjectList: c, encodedContextList: d, pouchDBRemoteSyncURI: e, developmentMode: f, appVersion: g, deviceId: h};
	});
var _user$project$Model$TodoNotification = F3(
	function (a, b, c) {
		return {title: a, tag: b, data: c};
	});
var _user$project$Model$TodoNotificationData = function (a) {
	return {id: a};
};
var _user$project$Model$TodoNotificationEvent = F2(
	function (a, b) {
		return {action: a, data: b};
	});
var _user$project$Model$Lens = F2(
	function (a, b) {
		return {get: a, set: b};
	});
var _user$project$Model$LensT2 = F2(
	function (a, b) {
		return {get: a, set: b};
	});
var _user$project$Model$TodoContextViewModel = F4(
	function (a, b, c, d) {
		return {name: a, todoList: b, count: c, isEmpty: d};
	});
var _user$project$Model$groupByTodoContextViewModel = function (_p78) {
	return function (dict) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			{
				ctor: '::',
				_0: 'Inbox',
				_1: {ctor: '[]'}
			},
			function (_p79) {
				return function (_p80) {
					var _p81 = _p80;
					return function (_p82) {
						return A2(
							_danielnarey$elm_toolkit$Toolkit_Helpers$uncurry3,
							_user$project$Model$TodoContextViewModel(_p81._0),
							A2(
								_danielnarey$elm_toolkit$Toolkit_Helpers$apply3,
								{ctor: '_Tuple3', _0: _elm_lang$core$Basics$identity, _1: _elm_lang$core$List$length, _2: _elm_lang$core$List$isEmpty},
								_p82));
					}(_p81._1);
				}(
					A2(
						_danielnarey$elm_toolkit$Toolkit_Helpers$apply2,
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Basics$identity,
							_1: function (_p83) {
								return A2(
									_elm_lang$core$Maybe$withDefault,
									{ctor: '[]'},
									A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _elm_lang$core$Dict$get, dict)(_p83));
							}
						},
						_p79));
			});
	}(
		A2(
			_elm_community$dict_extra$Dict_Extra$groupBy,
			function (_p84) {
				return 'Inbox';
			},
			A2(
				_user$project$Todo$rejectAnyPass,
				{
					ctor: '::',
					_0: _user$project$Todo$isDeleted,
					_1: {
						ctor: '::',
						_0: _user$project$Todo$isDone,
						_1: {ctor: '[]'}
					}
				},
				_user$project$Store$asList(
					_user$project$Model$getTodoStore(_p78)))));
};
var _user$project$Model$SyncView = {ctor: 'SyncView'};
var _user$project$Model$BinView = {ctor: 'BinView'};
var _user$project$Model$DoneView = {ctor: 'DoneView'};
var _user$project$Model$EntityListView = function (a) {
	return {ctor: 'EntityListView', _0: a};
};
var _user$project$Model$init = function (flags) {
	var firebaseClient = _user$project$Firebase$initClient(flags.deviceId);
	var _p85 = flags;
	var now = _p85.now;
	var encodedTodoList = _p85.encodedTodoList;
	var encodedProjectList = _p85.encodedProjectList;
	var encodedContextList = _p85.encodedContextList;
	var pouchDBRemoteSyncURI = _p85.pouchDBRemoteSyncURI;
	var storeGenerator = A4(
		_mgold$elm_random_pcg$Random_Pcg$map3,
		F3(
			function (v0, v1, v2) {
				return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
			}),
		A2(_user$project$Todo_Store$generator, flags.deviceId, encodedTodoList),
		A2(_user$project$Project$storeGenerator, flags.deviceId, encodedProjectList),
		A2(_user$project$Context$storeGenerator, flags.deviceId, encodedContextList));
	var _p86 = A2(
		_mgold$elm_random_pcg$Random_Pcg$step,
		storeGenerator,
		_user$project$Ext_Random$seedFromTime(now));
	var todoStore = _p86._0._0;
	var projectStore = _p86._0._1;
	var contextStore = _p86._0._2;
	var seed = _p86._1;
	var model = {
		now: now,
		todoStore: todoStore,
		projectStore: projectStore,
		contextStore: contextStore,
		editMode: _user$project$EditMode$none,
		mainViewType: _user$project$Model$EntityListView(_user$project$Entity$defaultListView),
		keyboardState: _user$project$Ext_Keyboard$init,
		showDeleted: false,
		reminderOverlay: _user$project$ReminderOverlay$none,
		pouchDBRemoteSyncURI: pouchDBRemoteSyncURI,
		user: _user$project$Firebase$NotLoggedIn,
		fcmToken: _elm_lang$core$Maybe$Nothing,
		developmentMode: flags.developmentMode,
		focusedEntityInfo: {id: ''},
		selectedEntityIdSet: _elm_lang$core$Set$empty,
		layout: {narrow: false, forceNarrow: false},
		maybeFocusedEntity: _elm_lang$core$Maybe$Nothing,
		appVersion: flags.appVersion,
		deviceId: flags.deviceId,
		focusInEntity: _user$project$Model$inboxEntity,
		firebaseClient: firebaseClient
	};
	return model;
};
var _user$project$Model$switchToProjectView = function (_p87) {
	return _user$project$Model$switchToView(
		_user$project$Model$EntityListView(
			_user$project$Entity$ProjectView(
				_user$project$Document$getId(_p87))));
};
var _user$project$Model$createAndEditNewProject = function (model) {
	return function (_p88) {
		var _p89 = _p88;
		var _p90 = _p89._0;
		return A2(
			_user$project$Model$startEditingEntity,
			_user$project$Entity$ProjectEntity(_p90),
			A2(_user$project$Model$switchToProjectView, _p90, _p89._1));
	}(
		A2(
			_Fresheyeball$elm_tuple_extra$Tuple2$mapSecond,
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$setProjectStore, model),
			A2(
				_user$project$Store$insert,
				A2(_user$project$Project$init, '<New Project>', model.now),
				model.projectStore)));
};
var _user$project$Model$switchToContextView = function (_p91) {
	return _user$project$Model$switchToView(
		_user$project$Model$EntityListView(
			_user$project$Entity$ContextView(
				_user$project$Document$getId(_p91))));
};
var _user$project$Model$createAndEditNewContext = function (model) {
	return function (_p92) {
		var _p93 = _p92;
		var _p94 = _p93._0;
		return A2(
			_user$project$Model$startEditingEntity,
			_user$project$Entity$ContextEntity(_p94),
			A2(_user$project$Model$switchToContextView, _p94, _p93._1));
	}(
		A2(
			_Fresheyeball$elm_tuple_extra$Tuple2$mapSecond,
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$setContextStore, model),
			A2(
				_user$project$Store$insert,
				A2(_user$project$Context$init, '<New Context>', model.now),
				model.contextStore)));
};
var _user$project$Model$setEntityListViewType = function (_p95) {
	return _user$project$Model$switchToView(
		_user$project$Model$EntityListView(_p95));
};
