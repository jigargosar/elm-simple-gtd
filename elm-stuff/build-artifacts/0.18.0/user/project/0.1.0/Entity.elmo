var _user$project$Entity$createProjectTodoGroup = F2(
	function (getTodoList, project) {
		return {
			project: project,
			list: getTodoList(project)
		};
	});
var _user$project$Entity$createProjectSubGroups = F2(
	function (findProjectById, tcg) {
		var filterTodoForProject = function (project) {
			return A2(
				_elm_lang$core$List$filter,
				_user$project$Todo$projectFilter(project),
				tcg.list);
		};
		var projects = _user$project$Project$sort(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
					_elm_community$list_extra$List_Extra$unique(
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], tcg.list, _user$project$Todo$getProjectId)),
					findProjectById)));
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			projects,
			_user$project$Entity$createProjectTodoGroup(filterTodoForProject));
	});
var _user$project$Entity$createContextTodoGroup = F2(
	function (getTodoList, context) {
		return {
			context: context,
			list: getTodoList(context)
		};
	});
var _user$project$Entity$createContextSubGroups = F2(
	function (findContextById, tcg) {
		var filterTodoForContext = function (context) {
			return A2(
				_elm_lang$core$List$filter,
				_user$project$Todo$contextFilter(context),
				tcg.list);
		};
		var contexts = _user$project$Context$sort(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
					_elm_community$list_extra$List_Extra$unique(
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], tcg.list, _user$project$Todo$getContextId)),
					findContextById)));
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			contexts,
			_user$project$Entity$createContextTodoGroup(filterTodoForContext));
	});
var _user$project$Entity$routes = function (viewType) {
	var _p0 = viewType;
	switch (_p0.ctor) {
		case 'ContextsView':
			return {
				ctor: '::',
				_0: 'lists',
				_1: {
					ctor: '::',
					_0: 'contexts',
					_1: {ctor: '[]'}
				}
			};
		case 'ProjectsView':
			return {
				ctor: '::',
				_0: 'lists',
				_1: {
					ctor: '::',
					_0: 'projects',
					_1: {ctor: '[]'}
				}
			};
		case 'ProjectView':
			var _p1 = _p0._0;
			return _elm_lang$core$String$isEmpty(_p1) ? {
				ctor: '::',
				_0: 'project',
				_1: {
					ctor: '::',
					_0: 'NotAssigned',
					_1: {ctor: '[]'}
				}
			} : {
				ctor: '::',
				_0: 'project',
				_1: {
					ctor: '::',
					_0: _p1,
					_1: {ctor: '[]'}
				}
			};
		default:
			var _p2 = _p0._0;
			return _elm_lang$core$String$isEmpty(_p2) ? {
				ctor: '::',
				_0: 'Inbox',
				_1: {ctor: '[]'}
			} : {
				ctor: '::',
				_0: 'context',
				_1: {
					ctor: '::',
					_0: _p2,
					_1: {ctor: '[]'}
				}
			};
	}
};
var _user$project$Entity$TodoContextGroup = F2(
	function (a, b) {
		return {context: a, list: b};
	});
var _user$project$Entity$TodoProjectGroup = F2(
	function (a, b) {
		return {project: a, list: b};
	});
var _user$project$Entity$TodoEntity = function (a) {
	return {ctor: 'TodoEntity', _0: a};
};
var _user$project$Entity$ContextEntity = function (a) {
	return {ctor: 'ContextEntity', _0: a};
};
var _user$project$Entity$ProjectEntity = function (a) {
	return {ctor: 'ProjectEntity', _0: a};
};
var _user$project$Entity$ProjectView = function (a) {
	return {ctor: 'ProjectView', _0: a};
};
var _user$project$Entity$ProjectsView = {ctor: 'ProjectsView'};
var _user$project$Entity$ContextView = function (a) {
	return {ctor: 'ContextView', _0: a};
};
var _user$project$Entity$ContextsView = {ctor: 'ContextsView'};
var _user$project$Entity$defaultListView = _user$project$Entity$ContextsView;
var _user$project$Entity$ToggleSelected = {ctor: 'ToggleSelected'};
var _user$project$Entity$SetFocusedIn = {ctor: 'SetFocusedIn'};
var _user$project$Entity$SetBlurred = {ctor: 'SetBlurred'};
var _user$project$Entity$SetFocused = {ctor: 'SetFocused'};
var _user$project$Entity$NameChanged = function (a) {
	return {ctor: 'NameChanged', _0: a};
};
var _user$project$Entity$Save = {ctor: 'Save'};
var _user$project$Entity$ToggleDeleted = {ctor: 'ToggleDeleted'};
var _user$project$Entity$StartEditing = {ctor: 'StartEditing'};
var _user$project$Entity$ContextGroup = function (a) {
	return {ctor: 'ContextGroup', _0: a};
};
var _user$project$Entity$ProjectGroup = function (a) {
	return {ctor: 'ProjectGroup', _0: a};
};
var _user$project$Entity$MultiProject = function (a) {
	return {ctor: 'MultiProject', _0: a};
};
var _user$project$Entity$createGroupingForProjects = F2(
	function (getTodoList, projects) {
		return _user$project$Entity$MultiProject(
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				projects,
				_user$project$Entity$createProjectTodoGroup(getTodoList)));
	});
var _user$project$Entity$MultiContext = function (a) {
	return {ctor: 'MultiContext', _0: a};
};
var _user$project$Entity$createGroupingForContexts = F2(
	function (getTodoList, contexts) {
		return _user$project$Entity$MultiContext(
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				contexts,
				_user$project$Entity$createContextTodoGroup(getTodoList)));
	});
var _user$project$Entity$flattenGrouping = function (grouping) {
	var _p3 = grouping;
	switch (_p3.ctor) {
		case 'SingleContext':
			return {
				ctor: '::',
				_0: _user$project$Entity$ContextEntity(_p3._0.context),
				_1: _user$project$Entity$flattenGrouping(
					_user$project$Entity$MultiProject(_p3._1))
			};
		case 'SingleProject':
			return {
				ctor: '::',
				_0: _user$project$Entity$ProjectEntity(_p3._0.project),
				_1: _user$project$Entity$flattenGrouping(
					_user$project$Entity$MultiContext(_p3._1))
			};
		case 'MultiContext':
			return A2(
				_elm_lang$core$List$concatMap,
				function (g) {
					return {
						ctor: '::',
						_0: _user$project$Entity$ContextEntity(g.context),
						_1: A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], g.list, _user$project$Entity$TodoEntity)
					};
				},
				_p3._0);
		default:
			return A2(
				_elm_lang$core$List$concatMap,
				function (g) {
					return {
						ctor: '::',
						_0: _user$project$Entity$ProjectEntity(g.project),
						_1: A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], g.list, _user$project$Entity$TodoEntity)
					};
				},
				_p3._0);
	}
};
var _user$project$Entity$SingleProject = F2(
	function (a, b) {
		return {ctor: 'SingleProject', _0: a, _1: b};
	});
var _user$project$Entity$createGroupingForProject = F3(
	function (getTodoList, findProjectById, project) {
		return function (tcg) {
			return A2(
				_user$project$Entity$SingleProject,
				tcg,
				A2(_user$project$Entity$createContextSubGroups, findProjectById, tcg));
		}(
			A2(_user$project$Entity$createProjectTodoGroup, getTodoList, project));
	});
var _user$project$Entity$SingleContext = F2(
	function (a, b) {
		return {ctor: 'SingleContext', _0: a, _1: b};
	});
var _user$project$Entity$createGroupingForContext = F3(
	function (getTodoList, findContextById, context) {
		return function (tcg) {
			return A2(
				_user$project$Entity$SingleContext,
				tcg,
				A2(_user$project$Entity$createProjectSubGroups, findContextById, tcg));
		}(
			A2(_user$project$Entity$createContextTodoGroup, getTodoList, context));
	});
