var _jigargosar$elm_simple_gtd$Entity$getTodoGotoGroupView = F2(
	function (todo, prevView) {
		var projectView = _jigargosar$elm_simple_gtd$Entity_Types$ProjectView(
			_jigargosar$elm_simple_gtd$Todo$getProjectId(todo));
		var contextView = _jigargosar$elm_simple_gtd$Entity_Types$ContextView(
			_jigargosar$elm_simple_gtd$Todo$getContextId(todo));
		var _p0 = prevView;
		switch (_p0.ctor) {
			case 'ProjectsView':
				return contextView;
			case 'ProjectView':
				return contextView;
			case 'ContextsView':
				return projectView;
			case 'ContextView':
				return projectView;
			case 'BinView':
				return _jigargosar$elm_simple_gtd$Entity_Types$ContextsView;
			case 'DoneView':
				return _jigargosar$elm_simple_gtd$Entity_Types$ContextsView;
			default:
				return _jigargosar$elm_simple_gtd$Entity_Types$ContextsView;
		}
	});
var _jigargosar$elm_simple_gtd$Entity$toViewType = F2(
	function (maybePrevView, entity) {
		var _p1 = entity;
		if (_p1.ctor === 'GroupEntity') {
			var _p2 = _p1._0;
			if (_p2.ctor === 'ContextEntity') {
				return _jigargosar$elm_simple_gtd$Entity_Types$ContextView(
					_jigargosar$elm_simple_gtd$Document$getId(_p2._0));
			} else {
				return _jigargosar$elm_simple_gtd$Entity_Types$ProjectView(
					_jigargosar$elm_simple_gtd$Document$getId(_p2._0));
			}
		} else {
			var _p3 = _p1._0;
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					maybePrevView,
					_jigargosar$elm_simple_gtd$Entity$getTodoGotoGroupView(_p3)),
				_jigargosar$elm_simple_gtd$Entity_Types$ContextView(
					_jigargosar$elm_simple_gtd$Todo$getContextId(_p3)));
		}
	});
var _jigargosar$elm_simple_gtd$Entity$getPathFromViewType = function (viewType) {
	var _p4 = viewType;
	switch (_p4.ctor) {
		case 'ContextsView':
			return {
				ctor: '::',
				_0: 'lists',
				_1: {
					ctor: '::',
					_0: 'contexts',
					_1: {ctor: '[]'}
				}
			};
		case 'ProjectsView':
			return {
				ctor: '::',
				_0: 'lists',
				_1: {
					ctor: '::',
					_0: 'projects',
					_1: {ctor: '[]'}
				}
			};
		case 'ProjectView':
			var _p5 = _p4._0;
			return _elm_lang$core$String$isEmpty(_p5) ? {
				ctor: '::',
				_0: 'project',
				_1: {
					ctor: '::',
					_0: 'NotAssigned',
					_1: {ctor: '[]'}
				}
			} : {
				ctor: '::',
				_0: 'project',
				_1: {
					ctor: '::',
					_0: _p5,
					_1: {ctor: '[]'}
				}
			};
		case 'ContextView':
			var _p6 = _p4._0;
			return _elm_lang$core$String$isEmpty(_p6) ? {
				ctor: '::',
				_0: 'Inbox',
				_1: {ctor: '[]'}
			} : {
				ctor: '::',
				_0: 'context',
				_1: {
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				}
			};
		case 'BinView':
			return {
				ctor: '::',
				_0: 'bin',
				_1: {ctor: '[]'}
			};
		case 'DoneView':
			return {
				ctor: '::',
				_0: 'done',
				_1: {ctor: '[]'}
			};
		default:
			return {
				ctor: '::',
				_0: 'recent',
				_1: {ctor: '[]'}
			};
	}
};
var _jigargosar$elm_simple_gtd$Entity$routeUrlBuilderToMaybeListViewType = function (builder) {
	var _p7 = _rgrempel$elm_route_url$RouteUrl_Builder$path(builder);
	_v4_9:
	do {
		if (_p7.ctor === '::') {
			if (_p7._1.ctor === '[]') {
				switch (_p7._0) {
					case 'bin':
						return _elm_lang$core$Maybe$Just(_jigargosar$elm_simple_gtd$Entity_Types$BinView);
					case 'done':
						return _elm_lang$core$Maybe$Just(_jigargosar$elm_simple_gtd$Entity_Types$DoneView);
					case 'recent':
						return _elm_lang$core$Maybe$Just(_jigargosar$elm_simple_gtd$Entity_Types$RecentView);
					case 'Inbox':
						return _elm_lang$core$Maybe$Just(
							_jigargosar$elm_simple_gtd$Entity_Types$ContextView(''));
					default:
						break _v4_9;
				}
			} else {
				if (_p7._1._1.ctor === '[]') {
					switch (_p7._0) {
						case 'lists':
							switch (_p7._1._0) {
								case 'contexts':
									return _elm_lang$core$Maybe$Just(_jigargosar$elm_simple_gtd$Entity_Types$ContextsView);
								case 'projects':
									return _elm_lang$core$Maybe$Just(_jigargosar$elm_simple_gtd$Entity_Types$ProjectsView);
								default:
									break _v4_9;
							}
						case 'context':
							return _elm_lang$core$Maybe$Just(
								_jigargosar$elm_simple_gtd$Entity_Types$ContextView(_p7._1._0));
						case 'project':
							if (_p7._1._0 === 'NotAssigned') {
								return _elm_lang$core$Maybe$Just(
									_jigargosar$elm_simple_gtd$Entity_Types$ProjectView(''));
							} else {
								return _elm_lang$core$Maybe$Just(
									_jigargosar$elm_simple_gtd$Entity_Types$ProjectView(_p7._1._0));
							}
						default:
							break _v4_9;
					}
				} else {
					break _v4_9;
				}
			}
		} else {
			break _v4_9;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};
var _jigargosar$elm_simple_gtd$Entity$equalById = F2(
	function (e1, e2) {
		var eq = _jigargosar$elm_simple_gtd$Document$equalById;
		var _p8 = {ctor: '_Tuple2', _0: e1, _1: e2};
		_v5_2:
		do {
			if (_p8.ctor === '_Tuple2') {
				if (_p8._0.ctor === 'GroupEntity') {
					if (_p8._1.ctor === 'GroupEntity') {
						var _p9 = {ctor: '_Tuple2', _0: _p8._0._0, _1: _p8._1._0};
						_v6_2:
						do {
							if (_p9.ctor === '_Tuple2') {
								if (_p9._0.ctor === 'ProjectEntity') {
									if (_p9._1.ctor === 'ProjectEntity') {
										return A2(eq, _p9._0._0, _p9._1._0);
									} else {
										break _v6_2;
									}
								} else {
									if (_p9._1.ctor === 'ContextEntity') {
										return A2(eq, _p9._0._0, _p9._1._0);
									} else {
										break _v6_2;
									}
								}
							} else {
								break _v6_2;
							}
						} while(false);
						return false;
					} else {
						break _v5_2;
					}
				} else {
					if (_p8._1.ctor === 'TodoEntity') {
						return A2(eq, _p8._0._0, _p8._1._0);
					} else {
						break _v5_2;
					}
				}
			} else {
				break _v5_2;
			}
		} while(false);
		return false;
	});
var _jigargosar$elm_simple_gtd$Entity$findEntityByOffsetIn = F3(
	function (offsetIndex, entityList, fromEntity) {
		return A2(
			_elm_community$maybe_extra$Maybe_Extra$orElse,
			_elm_lang$core$List$head(entityList),
			A2(
				_jigargosar$elm_simple_gtd$X_List$atIndexIn,
				entityList,
				A2(
					_jigargosar$elm_simple_gtd$X_List$clampIndexIn,
					entityList,
					A2(
						_jigargosar$elm_simple_gtd$X_Function$add,
						offsetIndex,
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
							A2(
								_elm_community$list_extra$List_Extra$findIndex,
								_jigargosar$elm_simple_gtd$Entity$equalById(fromEntity),
								entityList),
							0)))));
	});
var _jigargosar$elm_simple_gtd$Entity$getId = function (entity) {
	var _p10 = entity;
	if (_p10.ctor === 'TodoEntity') {
		return _jigargosar$elm_simple_gtd$Document$getId(_p10._0);
	} else {
		var _p11 = _p10._0;
		if (_p11.ctor === 'ProjectEntity') {
			return _jigargosar$elm_simple_gtd$Document$getId(_p11._0);
		} else {
			return _jigargosar$elm_simple_gtd$Document$getId(_p11._0);
		}
	}
};
var _jigargosar$elm_simple_gtd$Entity$initContextGroup = _jigargosar$elm_simple_gtd$Entity_Types$ContextEntity;
var _jigargosar$elm_simple_gtd$Entity$initProjectGroup = _jigargosar$elm_simple_gtd$Entity_Types$ProjectEntity;
var _jigargosar$elm_simple_gtd$Entity$fromTodo = _jigargosar$elm_simple_gtd$Entity_Types$TodoEntity;
var _jigargosar$elm_simple_gtd$Entity$fromProject = function (_p12) {
	return _jigargosar$elm_simple_gtd$Entity_Types$GroupEntity(
		_jigargosar$elm_simple_gtd$Entity_Types$ProjectEntity(_p12));
};
var _jigargosar$elm_simple_gtd$Entity$fromContext = function (_p13) {
	return _jigargosar$elm_simple_gtd$Entity_Types$GroupEntity(
		_jigargosar$elm_simple_gtd$Entity_Types$ContextEntity(_p13));
};
var _jigargosar$elm_simple_gtd$Entity$inboxEntity = function (_p14) {
	return _jigargosar$elm_simple_gtd$Entity_Types$GroupEntity(
		_jigargosar$elm_simple_gtd$Entity_Types$ContextEntity(_p14));
}(_jigargosar$elm_simple_gtd$Context$null);
