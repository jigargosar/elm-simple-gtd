var _user$project$Menu$menuItem = function (vm) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(vm.onClick),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$tabindex(vm.tabIndexValue),
				_1: {
					ctor: '::',
					_0: _user$project$Ext_Keyboard$onKeyDown(vm.onKeyDown),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'auto-focus', vm.shouldAutoFocus),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: vm.view,
			_1: {ctor: '[]'}
		});
};
var _user$project$Menu$boolToTabIndexValue = function (bool) {
	return bool ? 0 : -1;
};
var _user$project$Menu$createItemViewModel = F3(
	function (menuVM, index, item) {
		var indexToFocusKey = function (index) {
			return A2(
				_elm_community$maybe_extra$Maybe_Extra$orElse,
				menuVM.maybeFocusKey,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					A2(_elm_community$list_extra$List_Extra$getAt, index, menuVM.items),
					menuVM.itemDomId));
		};
		var onSelect = menuVM.onSelect(item);
		var maybeFocusedIndex = function (key) {
			return A2(
				_elm_community$list_extra$List_Extra$findIndex,
				function (_p0) {
					return A2(
						_user$project$Ext_Function$equals,
						key,
						menuVM.itemDomId(_p0));
				},
				menuVM.items);
		};
		var clampIndex = _user$project$Ext_List$clampIndexIn(menuVM.items);
		var selectedIndex = clampIndex(
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(_elm_community$list_extra$List_Extra$findIndex, menuVM.isSelected, menuVM.items),
				0));
		var focusedIndex = clampIndex(
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['?+>'], menuVM.maybeFocusKey, maybeFocusedIndex),
				selectedIndex));
		var isFocused = _elm_lang$core$Native_Utils.eq(focusedIndex, index);
		var onKeyDown = function (_p1) {
			var _p2 = _p1;
			var onFocusIndexChange = function (_p3) {
				return menuVM.onFocusIndexChanged(
					indexToFocusKey(
						clampIndex(
							A2(_user$project$Ext_Function$add, focusedIndex, _p3))));
			};
			var _p4 = _p2.key;
			switch (_p4.ctor) {
				case 'ArrowUp':
					return onFocusIndexChange(-1);
				case 'ArrowDown':
					return onFocusIndexChange(1);
				case 'Enter':
					return onSelect;
				default:
					return onFocusIndexChange(0);
			}
		};
		return {
			isSelected: _elm_lang$core$Native_Utils.eq(selectedIndex, index),
			shouldAutoFocus: isFocused,
			tabIndexValue: _user$project$Menu$boolToTabIndexValue(isFocused),
			onClick: onSelect,
			view: menuVM.itemView(item),
			onKeyDown: onKeyDown
		};
	});
var _user$project$Menu$view = function (vm) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('modal-background'),
			_1: {
				ctor: '::',
				_0: _user$project$Ext_Keyboard$onKeyDownStopPropagation(
					function (_p5) {
						return _user$project$Model$commonMsg.noOp;
					}),
				_1: {
					ctor: '::',
					_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(_user$project$Model$DeactivateEditingMode),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id(vm.domId),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('menu'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-prevent-default-keys', 'Tab'),
							_1: {ctor: '[]'}
						}
					}
				},
				A2(
					_elm_lang$core$List$indexedMap,
					A2(
						_user$project$Ext_Function_Infix_ops['>>>'],
						_user$project$Menu$createItemViewModel(vm),
						_user$project$Menu$menuItem),
					vm.items)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Menu$ViewModel = F8(
	function (a, b, c, d, e, f, g, h) {
		return {items: a, onSelect: b, itemDomId: c, domId: d, itemView: e, isSelected: f, maybeFocusKey: g, onFocusIndexChanged: h};
	});
var _user$project$Menu$ItemViewModel = F6(
	function (a, b, c, d, e, f) {
		return {shouldAutoFocus: a, tabIndexValue: b, isSelected: c, onClick: d, onKeyDown: e, view: f};
	});
