var _rluiten$trie$TrieModel$expandCore = F3(
	function (key, trie, keyList) {
		var expandSub = F3(
			function ($char, trie, foldList) {
				return A3(
					_rluiten$trie$TrieModel$expandCore,
					A2(
						_elm_lang$core$Basics_ops['++'],
						key,
						{
							ctor: '::',
							_0: $char,
							_1: {ctor: '[]'}
						}),
					trie,
					foldList);
			});
		var addRefKey = function (refValues) {
			return (!_elm_lang$core$Dict$isEmpty(refValues)) ? {
				ctor: '::',
				_0: _elm_lang$core$String$concat(key),
				_1: keyList
			} : keyList;
		};
		var _p0 = trie;
		switch (_p0.ctor) {
			case 'EmptyTrie':
				return keyList;
			case 'ValNode':
				return addRefKey(_p0._0);
			case 'TrieNode':
				return A3(_elm_lang$core$Dict$foldr, expandSub, keyList, _p0._0);
			default:
				var dirtyList = addRefKey(_p0._0._0);
				return A3(_elm_lang$core$Dict$foldr, expandSub, dirtyList, _p0._0._1);
		}
	});
var _rluiten$trie$TrieModel$getValues = function (trie) {
	var _p1 = trie;
	switch (_p1.ctor) {
		case 'EmptyTrie':
			return _elm_lang$core$Maybe$Nothing;
		case 'ValNode':
			return _elm_lang$core$Maybe$Just(_p1._0);
		case 'TrieNode':
			return _elm_lang$core$Maybe$Nothing;
		default:
			return _elm_lang$core$Maybe$Just(_p1._0._0);
	}
};
var _rluiten$trie$TrieModel$getNodeCore = F2(
	function (key, trie) {
		var _p2 = key;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Maybe$Just(trie);
		} else {
			var getTrie = function (trieDict) {
				return A2(
					_elm_lang$core$Maybe$andThen,
					_rluiten$trie$TrieModel$getNodeCore(_p2._1),
					A2(_elm_lang$core$Dict$get, _p2._0, trieDict));
			};
			var _p3 = trie;
			switch (_p3.ctor) {
				case 'EmptyTrie':
					return _elm_lang$core$Maybe$Nothing;
				case 'ValNode':
					return _elm_lang$core$Maybe$Nothing;
				case 'TrieNode':
					return getTrie(_p3._0);
				default:
					return getTrie(_p3._0._1);
			}
		}
	});
var _rluiten$trie$TrieModel$getNodeByStr = F2(
	function (key, trie) {
		return _elm_lang$core$List$isEmpty(key) ? _elm_lang$core$Maybe$Nothing : A2(_rluiten$trie$TrieModel$getNodeCore, key, trie);
	});
var _rluiten$trie$TrieModel$hasByStr = F2(
	function (key, trie) {
		return function (_p4) {
			return !_elm_lang$core$Dict$isEmpty(_p4);
		}(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Dict$empty,
				A2(
					_elm_lang$core$Maybe$andThen,
					_rluiten$trie$TrieModel$getValues,
					A2(_rluiten$trie$TrieModel$getNodeByStr, key, trie))));
	});
var _rluiten$trie$TrieModel$getByStr = F2(
	function (key, trie) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			_rluiten$trie$TrieModel$getValues,
			A2(_rluiten$trie$TrieModel$getNodeByStr, key, trie));
	});
var _rluiten$trie$TrieModel$valueCountByStr = F2(
	function (key, trie) {
		return _elm_lang$core$Dict$size(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Dict$empty,
				A2(_rluiten$trie$TrieModel$getByStr, key, trie)));
	});
var _rluiten$trie$TrieModel$expandByStr = F2(
	function (key, trie) {
		var _p5 = A2(_rluiten$trie$TrieModel$getNodeByStr, key, trie);
		if (_p5.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return A3(
				_rluiten$trie$TrieModel$expandCore,
				key,
				_p5._0,
				{ctor: '[]'});
		}
	});
var _rluiten$trie$TrieModel$toListString = function (str) {
	return A2(
		_elm_lang$core$List$map,
		function (c) {
			return _elm_lang$core$String$fromChar(c);
		},
		_elm_lang$core$String$toList(str));
};
var _rluiten$trie$TrieModel$getNode = F2(
	function (key, trie) {
		return A2(
			_rluiten$trie$TrieModel$getNodeByStr,
			_rluiten$trie$TrieModel$toListString(key),
			trie);
	});
var _rluiten$trie$TrieModel$has = F2(
	function (key, trie) {
		return A2(
			_rluiten$trie$TrieModel$hasByStr,
			_rluiten$trie$TrieModel$toListString(key),
			trie);
	});
var _rluiten$trie$TrieModel$get = F2(
	function (key, trie) {
		return A2(
			_rluiten$trie$TrieModel$getByStr,
			_rluiten$trie$TrieModel$toListString(key),
			trie);
	});
var _rluiten$trie$TrieModel$valueCount = F2(
	function (key, trie) {
		return _elm_lang$core$Dict$size(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Dict$empty,
				A2(_rluiten$trie$TrieModel$get, key, trie)));
	});
var _rluiten$trie$TrieModel$expand = F2(
	function (key, trie) {
		return A2(
			_rluiten$trie$TrieModel$expandByStr,
			_rluiten$trie$TrieModel$toListString(key),
			trie);
	});
var _rluiten$trie$TrieModel$ValTrieNode = function (a) {
	return {ctor: 'ValTrieNode', _0: a};
};
var _rluiten$trie$TrieModel$TrieNode = function (a) {
	return {ctor: 'TrieNode', _0: a};
};
var _rluiten$trie$TrieModel$ValNode = function (a) {
	return {ctor: 'ValNode', _0: a};
};
var _rluiten$trie$TrieModel$removeByStr = F3(
	function (key, ref, trie) {
		var _p6 = key;
		if (_p6.ctor === '[]') {
			var _p7 = trie;
			switch (_p7.ctor) {
				case 'EmptyTrie':
					return trie;
				case 'ValNode':
					return _rluiten$trie$TrieModel$ValNode(
						A2(_elm_lang$core$Dict$remove, ref, _p7._0));
				case 'TrieNode':
					return trie;
				default:
					return _rluiten$trie$TrieModel$ValTrieNode(
						{
							ctor: '_Tuple2',
							_0: A2(_elm_lang$core$Dict$remove, ref, _p7._0._0),
							_1: _p7._0._1
						});
			}
		} else {
			var _p10 = _p6._0;
			var removeTrieDict = function (trieDict) {
				var _p8 = A2(_elm_lang$core$Dict$get, _p10, trieDict);
				if (_p8.ctor === 'Nothing') {
					return trieDict;
				} else {
					return A3(
						_elm_lang$core$Dict$insert,
						_p10,
						A3(_rluiten$trie$TrieModel$removeByStr, _p6._1, ref, _p8._0),
						trieDict);
				}
			};
			var _p9 = trie;
			switch (_p9.ctor) {
				case 'EmptyTrie':
					return trie;
				case 'ValNode':
					return trie;
				case 'TrieNode':
					return _rluiten$trie$TrieModel$TrieNode(
						removeTrieDict(_p9._0));
				default:
					return _rluiten$trie$TrieModel$ValTrieNode(
						{
							ctor: '_Tuple2',
							_0: _p9._0._0,
							_1: removeTrieDict(_p9._0._1)
						});
			}
		}
	});
var _rluiten$trie$TrieModel$remove = F3(
	function (key, ref, trie) {
		return A3(
			_rluiten$trie$TrieModel$removeByStr,
			_rluiten$trie$TrieModel$toListString(key),
			ref,
			trie);
	});
var _rluiten$trie$TrieModel$EmptyTrie = {ctor: 'EmptyTrie'};
var _rluiten$trie$TrieModel$empty = _rluiten$trie$TrieModel$EmptyTrie;
var _rluiten$trie$TrieModel$isEmpty = function (trie) {
	return _elm_lang$core$Native_Utils.eq(trie, _rluiten$trie$TrieModel$empty);
};
var _rluiten$trie$TrieModel$addByStr = F3(
	function (_p11, key, trie) {
		var _p12 = _p11;
		var _p20 = _p12._1;
		var _p19 = _p12._0;
		var _p13 = key;
		if (_p13.ctor === '[]') {
			var _p14 = trie;
			switch (_p14.ctor) {
				case 'EmptyTrie':
					return _rluiten$trie$TrieModel$ValNode(
						A2(_elm_lang$core$Dict$singleton, _p19, _p20));
				case 'ValNode':
					return _rluiten$trie$TrieModel$ValNode(
						A3(_elm_lang$core$Dict$insert, _p19, _p20, _p14._0));
				case 'TrieNode':
					return _rluiten$trie$TrieModel$ValTrieNode(
						{
							ctor: '_Tuple2',
							_0: A2(_elm_lang$core$Dict$singleton, _p19, _p20),
							_1: _p14._0
						});
				default:
					return _rluiten$trie$TrieModel$ValTrieNode(
						{
							ctor: '_Tuple2',
							_0: A3(_elm_lang$core$Dict$insert, _p19, _p20, _p14._0._0),
							_1: _p14._0._1
						});
			}
		} else {
			var _p18 = _p13._1;
			var _p17 = _p13._0;
			var updateTrieDict = function (trieDict) {
				var updatedSubTrie = A3(
					_rluiten$trie$TrieModel$addByStr,
					{ctor: '_Tuple2', _0: _p19, _1: _p20},
					_p18,
					A2(
						_elm_lang$core$Maybe$withDefault,
						_rluiten$trie$TrieModel$EmptyTrie,
						A2(_elm_lang$core$Dict$get, _p17, trieDict)));
				return A3(_elm_lang$core$Dict$insert, _p17, updatedSubTrie, trieDict);
			};
			var lazyNewTrieDict = function (_p15) {
				return A2(
					_elm_lang$core$Dict$singleton,
					_p17,
					A3(
						_rluiten$trie$TrieModel$addByStr,
						{ctor: '_Tuple2', _0: _p19, _1: _p20},
						_p18,
						_rluiten$trie$TrieModel$EmptyTrie));
			};
			var _p16 = trie;
			switch (_p16.ctor) {
				case 'EmptyTrie':
					return _rluiten$trie$TrieModel$TrieNode(
						lazyNewTrieDict(
							{ctor: '_Tuple0'}));
				case 'ValNode':
					return _rluiten$trie$TrieModel$ValTrieNode(
						{
							ctor: '_Tuple2',
							_0: _p16._0,
							_1: lazyNewTrieDict(
								{ctor: '_Tuple0'})
						});
				case 'TrieNode':
					return _rluiten$trie$TrieModel$TrieNode(
						updateTrieDict(_p16._0));
				default:
					return _rluiten$trie$TrieModel$ValTrieNode(
						{
							ctor: '_Tuple2',
							_0: _p16._0._0,
							_1: updateTrieDict(_p16._0._1)
						});
			}
		}
	});
var _rluiten$trie$TrieModel$add = F3(
	function (refValues, key, trie) {
		return A3(
			_rluiten$trie$TrieModel$addByStr,
			refValues,
			_rluiten$trie$TrieModel$toListString(key),
			trie);
	});
