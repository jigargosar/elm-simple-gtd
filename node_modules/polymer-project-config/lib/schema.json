{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "LintOptions": {
            "properties": {
                "ignoreWarnings": {
                    "description": "Warnings to ignore. After the rules are run, any warning that matches\none of these codes is ignored, project-wide.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rules": {
                    "description": "The lint rules to run. Can be the code of a collection of rules like\n\"polymer-2\" or an individual rule like \"dom-module-invalid-attrs\".",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ProjectBuildOptions": {
            "properties": {
                "addPushManifest": {
                    "description": "If `true`, generate an [HTTP/2 Push\nManifest](https://github.com/GoogleChrome/http2-push-manifest) for your\napplication.",
                    "type": "boolean"
                },
                "addServiceWorker": {
                    "description": "Generate a service worker for your application to cache all files and\nassets on the client.\n\nPolymer CLI will generate a service worker for your build using the\n[sw-precache library](https://github.com/GoogleChrome/sw-precache). To\ncustomize your service worker, create a sw-precache-config.js file in your\nproject directory that exports your configuration. See the [sw-precache\nREADME](https://github.com/GoogleChrome/sw-precache) for a list of all\nsupported options.\n\nNote that the sw-precache library uses a cache-first strategy for maximum\nspeed and makes some other assumptions about how your service worker should\nbehave. Read the \"Considerations\" section of the sw-precache README to make\nsure that this is suitable for your application.",
                    "type": "boolean"
                },
                "basePath": {
                    "description": "Apply transformations during build to support serving this build from a\nnon-root path, such as when doing differential serving based on user\nagent. This works well in conjunction with the convention of using\nrelative URLs for static resources and absolute URLs for application\nroutes.\n\n- Find and update the entrypoint's `<base>` tag.\n- Prefix Service Worker pre-cached resources.\n- Prefix Push Manifest resources.\n\nIf `true`, use the build `name`. If a `string`, use that value.\nLeading/trailing slashes are optional.",
                    "type": [
                        "string",
                        "boolean"
                    ]
                },
                "browserCapabilities": {
                    "description": "Capabilities required for a browser to consume this build. Values include\n`es2015` and `push`. See canonical list at:\nhttps://github.com/Polymer/prpl-server-node/blob/master/src/capabilities.ts\n\nThis field is purely a hint to servers reading this configuration, and\ndoes not affect the build process. A server supporting differential\nserving (e.g. prpl-server) can use this field to help decide which build\nto serve to a given user agent.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "bundle": {
                    "description": "By default, fragments are unbundled. This is optimal for HTTP/2-compatible\nservers and clients.\n\nIf the --bundle flag is supplied, all fragments are bundled together to\nreduce the number of file requests. This is optimal for sending to clients\nor serving from servers that are not HTTP/2 compatible.",
                    "type": "boolean"
                },
                "css": {
                    "description": "Options for processing CSS.",
                    "properties": {
                        "minify": {
                            "description": "Minify inlined and external CSS.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "html": {
                    "description": "Options for processing HTML.",
                    "properties": {
                        "minify": {
                            "description": "Minify HTMl by removing comments and whitespace.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "insertPrefetchLinks": {
                    "description": "Insert prefetch link elements into your fragments so that all dependencies\nare prefetched immediately. Add dependency prefetching by inserting `<link\nrel=\"prefetch\">` tags into entrypoint and `<link rel=\"import\">` tags into\nfragments and shell for all dependencies.",
                    "type": "boolean"
                },
                "js": {
                    "description": "Options for processing JavaScript.",
                    "properties": {
                        "compile": {
                            "description": "Use babel to compile all ES6 JS down to ES5 for older browsers.",
                            "type": "boolean"
                        },
                        "minify": {
                            "description": "Minify inlined and external JavaScript.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "The name of this build, used to determine the output directory name.",
                    "type": "string"
                },
                "preset": {
                    "description": "A build preset for this build. A build can inherit some base configuration\nfrom a named preset.",
                    "type": "string"
                },
                "swPrecacheConfig": {
                    "description": "A config file that's passed to the [sw-precache\nlibrary](https://github.com/GoogleChrome/sw-precache). See [its\nREADME](https://github.com/GoogleChrome/sw-precache) for details of the\nformat of this file.\n\nIgnored if `addServiceWorker` is not `true`.\n\nDefaults to `\"sw-precache-config.js`.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "properties": {
        "builds": {
            "description": "List of build option configurations.",
            "items": {
                "$ref": "#/definitions/ProjectBuildOptions"
            },
            "type": "array"
        },
        "entrypoint": {
            "description": "The path relative to `root` of the entrypoint file that will be served for\napp-shell style projects. Usually this is index.html.",
            "type": "string"
        },
        "extraDependencies": {
            "description": "List of file paths, relative to the project directory, that should be\nincluded as extraDependencies in the build target.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "fragments": {
            "description": "The path relative to `root` of the lazily loaded fragments. Usually the\npages of an app or other bundles of on-demand resources.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "lint": {
            "$ref": "#/definitions/LintOptions",
            "description": "Options for the Polymer Linter."
        },
        "root": {
            "description": "Path to the root of the project on the filesystem. This can be an absolute\npath, or a path relative to the current working directory. Defaults to the\ncurrent working directory of the process.",
            "type": "string"
        },
        "shell": {
            "description": "The path relative to `root` of the app shell element.",
            "type": "string"
        },
        "sources": {
            "description": "List of glob patterns, relative to root, of this project's sources to read\nfrom the file system.",
            "items": {
                "type": "string"
            },
            "type": "array"
        }
    },
    "type": "object"
}

