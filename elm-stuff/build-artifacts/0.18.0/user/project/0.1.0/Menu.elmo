var _user$project$Menu$menuItem = F3(
	function (vm, _p0, item) {
		var _p1 = _p0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					vm.onSelect(item)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$tabindex(_p1._2),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'auto-focus', _p1._1),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'item', true),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: vm.itemView(item),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Menu$isIndexSelected = function (vm) {
	return _user$project$Ext_Function$equals(
		A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(_elm_community$list_extra$List_Extra$findIndex, vm.isSelected, vm.items),
			0));
};
var _user$project$Menu$createItemViewModel = F2(
	function (vm, index) {
		var isSelected = A2(_user$project$Menu$isIndexSelected, vm, index);
		var tabindexValue = function () {
			var boolToTabIndexValue = function (bool) {
				return bool ? 0 : -1;
			};
			return boolToTabIndexValue(
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
						vm.maybeFocusIndex,
						_user$project$Ext_Function$equals(index)),
					isSelected));
		}();
		var shouldAutoFocus = _elm_lang$core$Native_Utils.eq(tabindexValue, 0);
		return {ctor: '_Tuple3', _0: isSelected, _1: shouldAutoFocus, _2: tabindexValue};
	});
var _user$project$Menu$view = function (vm) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('modal-background'),
			_1: {
				ctor: '::',
				_0: _user$project$Ext_Keyboard$onKeyDownStopPropagation(
					function (_p2) {
						return _user$project$Model$commonMsg.noOp;
					}),
				_1: {
					ctor: '::',
					_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(_user$project$Model$DeactivateEditingMode),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id(vm.domId),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('menu'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-prevent-default-keys', 'Tab'),
							_1: {ctor: '[]'}
						}
					}
				},
				A2(
					_elm_lang$core$List$indexedMap,
					function (_p3) {
						return A2(
							_user$project$Menu$menuItem,
							vm,
							A2(_user$project$Menu$createItemViewModel, vm, _p3));
					},
					vm.items)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Menu$ViewModel = F7(
	function (a, b, c, d, e, f, g) {
		return {items: a, onSelect: b, itemDomId: c, domId: d, itemView: e, isSelected: f, maybeFocusIndex: g};
	});
