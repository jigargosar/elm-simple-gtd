var _user$project$EntityList_View$getFocusInId = F2(
	function (entityList, viewModel) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				A2(
					_elm_community$maybe_extra$Maybe_Extra$orElse,
					_elm_lang$core$List$head(entityList),
					A2(
						_elm_community$list_extra$List_Extra$find,
						function (_p0) {
							return A2(
								_user$project$Ext_Function$equals,
								viewModel.focusedEntityInfo.id,
								_user$project$Model$getEntityId(_p0));
						},
						entityList)),
				_user$project$Model$getEntityId),
			'');
	});
var _user$project$EntityList_View$isCursorAtEntityInEntityList = F2(
	function (entityList, viewModel) {
		var focusedId = A2(_user$project$EntityList_View$getFocusInId, entityList, viewModel);
		return function (_p1) {
			return A2(
				_user$project$Ext_Function$equals,
				focusedId,
				_user$project$Model$getEntityId(_p1));
		};
	});
var _user$project$EntityList_View$EntityViewModel = F8(
	function (a, b, c, d, e, f, g, h) {
		return {id: a, onFocusIn: b, onFocus: c, onBlur: d, startEditingMsg: e, toggleDeleteMsg: f, startEditingMsg: g, tabIndexAV: h};
	});
var _user$project$EntityList_View$SubGroup = F2(
	function (a, b) {
		return {groupVM: a, todoListVM: b};
	});
var _user$project$EntityList_View$Todo = function (a) {
	return {ctor: 'Todo', _0: a};
};
var _user$project$EntityList_View$Group = function (a) {
	return {ctor: 'Group', _0: a};
};
var _user$project$EntityList_View$Empty = {ctor: 'Empty'};
var _user$project$EntityList_View$createVMList = F2(
	function (entityList, appViewModel) {
		var updateCount = function (vmList) {
			return _elm_lang$core$Tuple$first(
				A3(
					_elm_lang$core$List$foldr,
					F2(
						function (vm, _p2) {
							var _p3 = _p2;
							var _p6 = _p3._0;
							var _p5 = _p3._1;
							var _p4 = vm;
							if (_p4.ctor === 'Group') {
								return {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: _user$project$EntityList_View$Group(
											_elm_lang$core$Native_Utils.update(
												_p4._0,
												{count: _p5})),
										_1: _p6
									},
									_1: 0
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: _user$project$EntityList_View$Todo(_p4._0),
										_1: _p6
									},
									_1: _p5 + 1
								};
							}
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: 0
					},
					vmList));
		};
		var tree = function (vmList) {
			return A3(
				_elm_lang$core$List$foldl,
				F2(
					function (vm, tree) {
						var _p7 = vm;
						if (_p7.ctor === 'Group') {
							return _user$project$EntityList_View$Empty;
						} else {
							return _user$project$EntityList_View$Empty;
						}
					}),
				_user$project$EntityList_View$Empty,
				vmList);
		};
		var focusInId = A2(_user$project$EntityList_View$getFocusInId, entityList, appViewModel);
		var getTabindexAV = function (entity) {
			var tabindexValue = _elm_lang$core$Native_Utils.eq(
				_user$project$Model$getEntityId(entity),
				focusInId) ? 0 : -1;
			return _elm_lang$html$Html_Attributes$tabindex(tabindexValue);
		};
		var createVM = function (entity) {
			var tabIndexAV = getTabindexAV(entity);
			var _p8 = entity;
			switch (_p8.ctor) {
				case 'ContextEntity':
					return _user$project$EntityList_View$Group(
						A2(_user$project$EntityList$createContextGroupViewModel, tabIndexAV, _p8._0));
				case 'ProjectEntity':
					return _user$project$EntityList_View$Group(
						A2(_user$project$EntityList$createProjectGroupViewModel, tabIndexAV, _p8._0));
				default:
					return _user$project$EntityList_View$Todo(
						A2(appViewModel.createTodoViewModel, tabIndexAV, _p8._0));
			}
		};
		return updateCount(
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], entityList, createVM));
	});
var _user$project$EntityList_View$listView = F3(
	function (viewType, model, appViewModel) {
		var createEntityView = function (vm) {
			var _p9 = vm;
			if (_p9.ctor === 'Group') {
				return A2(_user$project$GroupEntity_View$initKeyed, appViewModel, _p9._0);
			} else {
				return _user$project$Todo_View$initKeyed(_p9._0);
			}
		};
		var entityList = A2(_user$project$Model$createViewEntityList, viewType, model);
		var vmList = A2(_user$project$EntityList_View$createVMList, entityList, appViewModel);
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('entity-list focusable-list'),
				_1: {
					ctor: '::',
					_0: _user$project$Ext_Keyboard$onKeyDown(
						_user$project$Msg$OnEntityListKeyDown(entityList)),
					_1: {ctor: '[]'}
				}
			},
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], vmList, createEntityView));
	});
var _user$project$EntityList_View$GroupNode = function (a) {
	return {ctor: 'GroupNode', _0: a};
};
var _user$project$EntityList_View$SubGroupNode = function (a) {
	return {ctor: 'SubGroupNode', _0: a};
};
