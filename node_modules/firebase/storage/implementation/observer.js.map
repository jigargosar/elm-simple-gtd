{"version":3,"sources":["src/storage/implementation/observer.ts"],"names":["type","Observer","nextOrObserver","opt_error","opt_complete","asFunctions","isFunction","isDef","next","error","complete","observer"],"mappings":";;;;;;;AAeA;;IAAYA,I;;;;0JAfZ;;;;;;;;;;;;;;;;;AA6BA;;;IAGMC,Q,WAAAA,Q,GAKJ,kBACIC,cADJ,EAEIC,SAFJ,EAGIC,YAHJ,EAGoC;AAAA;;AAClC,QAAIC,cAAcL,KAAKM,UAAL,CAAgBJ,cAAhB,KACdF,KAAKO,KAAL,CAAWJ,SAAX,CADc,IACWH,KAAKO,KAAL,CAAWH,YAAX,CAD7B;AAEA,QAAIC,WAAJ,EAAiB;AACf,aAAKG,IAAL,GAAYN,cAAZ;AACA,aAAKO,KAAL,GAAaN,aAAa,IAA1B;AACA,aAAKO,QAAL,GAAgBN,gBAAgB,IAAhC;AACD,KAJD,MAIO;AACL,YAAMO,WAAWT,cAAjB;AAKA,aAAKM,IAAL,GAAYG,SAASH,IAAT,IAAiB,IAA7B;AACA,aAAKC,KAAL,GAAaE,SAASF,KAAT,IAAkB,IAA/B;AACA,aAAKC,QAAL,GAAgBC,SAASD,QAAT,IAAqB,IAArC;AACD;AACF,C","file":"observer.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as type from './type';\n\ntype NextFn<T> = (value: T) => void;\ntype ErrorFn = (error: Error) => void;\ntype CompleteFn = () => void;\ntype Unsubscribe = () => void;\n\ntype Subscribe<T> =\n    (next: NextFn<T> | {[name: string]: string|null},\n     error?: ErrorFn,\n     complete?: CompleteFn) => Unsubscribe;\n\nexport {NextFn, ErrorFn, CompleteFn, Unsubscribe, Subscribe};\n\n/**\n * @struct\n */\nexport class Observer<T> {\n  next: NextFn<T> | null;\n  error: ErrorFn | null;\n  complete: CompleteFn | null;\n\n  constructor(\n      nextOrObserver: NextFn<T> | {[name: string]: string|null} | null,\n      opt_error?: ErrorFn | null,\n      opt_complete?: CompleteFn | null) {\n    let asFunctions = type.isFunction(nextOrObserver) ||\n        type.isDef(opt_error) || type.isDef(opt_complete);\n    if (asFunctions) {\n      this.next = nextOrObserver as (NextFn<T> | null);\n      this.error = opt_error || null;\n      this.complete = opt_complete || null;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T> | null;\n        error?: ErrorFn | null;\n        complete?: CompleteFn | null;\n      };\n      this.next = observer.next || null;\n      this.error = observer.error || null;\n      this.complete = observer.complete || null;\n    }\n  }\n}\n"]}