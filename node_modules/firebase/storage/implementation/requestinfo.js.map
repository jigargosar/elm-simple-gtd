{"version":3,"sources":["src/storage/implementation/requestinfo.ts"],"names":["RequestInfo","url","method","handler","timeout","urlParams","headers","body","errorHandler","progressCallback","successCodes","additionalRetryCodes"],"mappings":";;;;;;;;IAoBMA,W,WAAAA,W,GAgBJ,qBACWC,GADX,EAEWC,MAFX;AAGI;;;;;;;AAOOC,OAVX,EAWWC,OAXX,EAW0B;AAAA;;AAVf,OAAAH,GAAA,GAAAA,GAAA;AACA,OAAAC,MAAA,GAAAA,MAAA;AAQA,OAAAC,OAAA,GAAAA,OAAA;AACA,OAAAC,OAAA,GAAAA,OAAA;AA1BX,OAAAC,SAAA,GAAuB,EAAvB;AACA,OAAAC,OAAA,GAAmB,EAAnB;AACA,OAAAC,IAAA,GAAoC,IAApC;AAEA,OAAAC,YAAA,GAAuF,IAAvF;AAEA;;;;AAIA,OAAAC,gBAAA,GACgD,IADhD;AAEA,OAAAC,YAAA,GAAyB,CAAC,GAAD,CAAzB;AACA,OAAAC,oBAAA,GAAiC,EAAjC;AAa8B,C","file":"requestinfo.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport {FirebaseStorageError} from './error';\nimport {Headers, XhrIo} from './xhrio';\n\nexport type UrlParams = {[name: string]: string};\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob|string|Uint8Array|null = null;\n\n  errorHandler: ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError) | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback:\n      ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n      public url: string,\n      public method: string,\n      /**\n       * Returns the value with which to resolve the request's promise. Only called\n       * if the request is successful. Throw from this function to reject the\n       * returned Request's promise with the thrown error.\n       * Note: The XhrIo passed to this function may be reused after this callback\n       * returns. Do not keep a reference to it in any way.\n       */\n      public handler: (p1: XhrIo, p2: string) => T,\n      public timeout: number) {}\n}\n"]}