{"version":3,"sources":["polymer/polymer2-config.ts"],"names":[],"mappings":"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","file":"polymer2-config.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport {getIdentifierName} from '../javascript/ast-value';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {ScannedMethod} from '../model/model';\n\nimport {analyzeProperties} from './analyze-properties';\nimport * as docs from './docs';\nimport {toScannedMethod} from './js-utils';\nimport {ScannedPolymerProperty} from './polymer-element';\n\nexport function getStaticGetterValue(\n    node: estree.ClassDeclaration|estree.ClassExpression,\n    name: string): estree.Expression|undefined {\n  const getter = node.body.body.find(\n      (n) => n.type === 'MethodDefinition' && n.static === true &&\n          n.kind === 'get' && getIdentifierName(n.key) === name);\n  if (!getter) {\n    return undefined;\n  }\n\n  // TODO(justinfagnani): consider generating warnings for these checks\n  const getterBody = getter.value.body;\n  if (getterBody.body.length !== 1) {\n    // not a single statement function\n    return undefined;\n  }\n  const statement = getterBody.body[0]!;\n  if (statement.type !== 'ReturnStatement') {\n    // we only support a return statement\n    return undefined;\n  }\n\n  return statement.argument;\n}\n\nexport function getIsValue(node: estree.ClassDeclaration|\n                           estree.ClassExpression): string|undefined {\n  const getterValue = getStaticGetterValue(node, 'is');\n  if (!getterValue || getterValue.type !== 'Literal') {\n    // we only support literals\n    return undefined;\n  }\n  if (typeof getterValue.value !== 'string') {\n    return undefined;\n  }\n  return getterValue.value;\n}\n\n/**\n * Returns the properties defined in a Polymer config object literal.\n */\nexport function getPolymerProperties(\n    node: estree.Node, document: JavaScriptDocument): ScannedPolymerProperty[] {\n  if (node.type !== 'ClassDeclaration' && node.type !== 'ClassExpression') {\n    return [];\n  }\n  const propertiesNode = getStaticGetterValue(node, 'properties');\n  return propertiesNode ? analyzeProperties(propertiesNode, document) : [];\n}\n\nexport function getMethods(node: estree.Node, document: JavaScriptDocument):\n    Map<string, ScannedMethod> {\n  if (node.type !== 'ClassDeclaration' && node.type !== 'ClassExpression') {\n    return new Map();\n  }\n  const methods = new Map<string, ScannedMethod>();\n  for (const statement of node.body.body) {\n    if (statement.type === 'MethodDefinition' && statement.static === false &&\n        statement.kind === 'method') {\n      const method = toScannedMethod(\n          statement, document.sourceRangeForNode(statement)!, document);\n      docs.annotate(method);\n      methods.set(method.name, method);\n    }\n  }\n  return methods;\n}\n"]}