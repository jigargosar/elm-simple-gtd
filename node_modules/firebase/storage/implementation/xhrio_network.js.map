{"version":3,"sources":["src/storage/implementation/xhrio_network.ts"],"names":["errorsExports","object","promiseimpl","type","XhrIoExports","NetworkXhrIo","sent_","xhr_","XMLHttpRequest","errorCode_","ErrorCode","NO_ERROR","sendPromise_","make","resolve","addEventListener","ABORT","NETWORK_ERROR","url","method","opt_body","opt_headers","internalError","open","isDef","forEach","key","val","setRequestHeader","toString","send","status","e","responseText","abort","header","getResponseHeader","listener","upload","removeEventListener"],"mappings":"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","file":"xhrio_network.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\nimport {Headers, XhrIo} from './xhrio';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: XhrIoExports.ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make((resolve, reject) => {\n      this.xhr_.addEventListener('abort', (event) => {\n        this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', (event) => {\n        this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', (event) => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n      url: string, method: string, opt_body?: ArrayBufferView|Blob|string|null,\n      opt_headers?: Headers): Promise<XhrIo> {\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (type.isDef(opt_headers)) {\n      const headers = (opt_headers as Headers);\n      object.forEach(headers, (key, val) => {\n        this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): XhrIoExports.ErrorCode {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n          'cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n          'cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort() {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string|null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n"]}