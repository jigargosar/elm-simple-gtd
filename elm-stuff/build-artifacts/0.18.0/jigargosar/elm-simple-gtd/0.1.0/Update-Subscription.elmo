var _jigargosar$elm_simple_gtd$Update_Subscription$keyComboModel = A2(
	_jigargosar$elm_simple_gtd$X_Record$fieldLens,
	function (_) {
		return _.keyComboModel;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{keyComboModel: s});
		}));
var _jigargosar$elm_simple_gtd$Update_Subscription$updateKeyCombo = function (comboMsg) {
	return A2(
		_jigargosar$elm_simple_gtd$X_Record$overReturn,
		_jigargosar$elm_simple_gtd$Update_Subscription$keyComboModel,
		_scottcorgan$keyboard_combo$Keyboard_Combo$update(comboMsg));
};
var _jigargosar$elm_simple_gtd$Update_Subscription$keyboardState = A2(
	_jigargosar$elm_simple_gtd$X_Record$fieldLens,
	function (_) {
		return _.keyboardState;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{keyboardState: s});
		}));
var _jigargosar$elm_simple_gtd$Update_Subscription$updateKeyboardState = _jigargosar$elm_simple_gtd$X_Record$over(_jigargosar$elm_simple_gtd$Update_Subscription$keyboardState);
var _jigargosar$elm_simple_gtd$Update_Subscription$setNow = F2(
	function (now, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{now: now});
	});
var _jigargosar$elm_simple_gtd$Update_Subscription$onGlobalKeyUp = F2(
	function (andThenUpdate, key) {
		return A2(
			_jigargosar$elm_simple_gtd$X_Return$returnWith,
			function (_) {
				return _.editMode;
			},
			function (editMode) {
				var _p0 = {ctor: '_Tuple2', _0: key, _1: editMode};
				_v0_2:
				do {
					if (_p0.ctor === '_Tuple2') {
						if (_p0._1.ctor === 'XMNone') {
							var clear = function (_p1) {
								return A2(
									andThenUpdate,
									_jigargosar$elm_simple_gtd$XMMsg$onSetExclusiveModeToNoneAndTryRevertingFocus,
									A2(_Fresheyeball$elm_return$Return$map, _jigargosar$elm_simple_gtd$Model_Selection$clearSelection, _p1));
							};
							var _p2 = _p0._0;
							switch (_p2.ctor) {
								case 'Escape':
									return clear;
								case 'CharX':
									return clear;
								case 'CharQ':
									return andThenUpdate(_jigargosar$elm_simple_gtd$TodoMsg$onStartAddingTodoWithFocusInEntityAsReference);
								case 'CharI':
									return andThenUpdate(_jigargosar$elm_simple_gtd$TodoMsg$onStartAddingTodoToInbox);
								case 'Slash':
									return andThenUpdate(_jigargosar$elm_simple_gtd$Msg$openLaunchBarMsg);
								default:
									return _elm_lang$core$Basics$identity;
							}
						} else {
							if (_p0._0.ctor === 'Escape') {
								return andThenUpdate(_jigargosar$elm_simple_gtd$XMMsg$onSetExclusiveModeToNoneAndTryRevertingFocus);
							} else {
								break _v0_2;
							}
						}
					} else {
						break _v0_2;
					}
				} while(false);
				return _elm_lang$core$Basics$identity;
			});
	});
var _jigargosar$elm_simple_gtd$Update_Subscription$update = F2(
	function (andThenUpdate, subMsg) {
		var _p3 = subMsg;
		switch (_p3.ctor) {
			case 'OnNowChanged':
				return _Fresheyeball$elm_return$Return$map(
					_jigargosar$elm_simple_gtd$Update_Subscription$setNow(_p3._0));
			case 'OnKeyboardMsg':
				return function (_p4) {
					return A2(
						_jigargosar$elm_simple_gtd$DomPorts$focusSelectorIfNoFocusRCmd,
						'.entity-list .focusable-list-item[tabindex=0]',
						A2(
							_Fresheyeball$elm_return$Return$map,
							_jigargosar$elm_simple_gtd$Update_Subscription$updateKeyboardState(
								_jigargosar$elm_simple_gtd$X_Keyboard$update(_p3._0)),
							_p4));
				};
			case 'OnGlobalKeyUp':
				return A2(_jigargosar$elm_simple_gtd$Update_Subscription$onGlobalKeyUp, andThenUpdate, _p3._0);
			case 'OnKeyCombo':
				return _Fresheyeball$elm_return$Return$andThen(
					_jigargosar$elm_simple_gtd$Update_Subscription$updateKeyCombo(_p3._0));
			case 'OnPouchDBChange':
				var afterEntityUpsertOnPouchDBChange = function (entity) {
					var _p5 = entity;
					if (_p5.ctor === 'TodoEntity') {
						return _jigargosar$elm_simple_gtd$Msg$OnTodoMsg(
							_jigargosar$elm_simple_gtd$Todo_Msg$Upsert(_p5._0));
					} else {
						return _jigargosar$elm_simple_gtd$Model$noop;
					}
				};
				return _jigargosar$elm_simple_gtd$X_Return$andThenMaybe(
					A2(
						_jigargosar$elm_simple_gtd$X_Function_Infix_ops['>>?'],
						A2(_jigargosar$elm_simple_gtd$Stores$upsertEncodedDocOnPouchDBChange, _p3._0, _p3._1),
						function (_p6) {
							return A2(
								_elm_lang$core$Basics$uncurry,
								andThenUpdate,
								A3(_Fresheyeball$elm_tuple_extra$Tuple2$mapEach, afterEntityUpsertOnPouchDBChange, _Fresheyeball$elm_return$Return$singleton, _p6));
						}));
			default:
				return _Fresheyeball$elm_return$Return$effect_(
					A2(_jigargosar$elm_simple_gtd$Stores$upsertEncodedDocOnFirebaseDatabaseChange, _p3._0, _p3._1));
		}
	});
