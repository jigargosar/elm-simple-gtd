var _danielnarey$elm_color_math$ColorMath$checkForNaN = function (value) {
	return _elm_lang$core$Basics$isNaN(value) ? 0 : value;
};
var _danielnarey$elm_color_math$ColorMath$colorTransform = F2(
	function (transform, value) {
		var _p0 = value;
		if (_p0.ctor === 'Col') {
			return _elm_lang$core$Result$Ok(
				_danielnarey$elm_css_basics$CssBasics$Col(
					transform(_p0._0)));
		} else {
			return _elm_lang$core$Result$Err('`CssValue` argument must be of type `Col`');
		}
	});
var _danielnarey$elm_color_math$ColorMath$getAlpha = function (color) {
	return function (_) {
		return _.alpha;
	}(
		_elm_lang$core$Color$toRgb(color));
};
var _danielnarey$elm_color_math$ColorMath$getLightness = function (color) {
	return function (_) {
		return _.lightness;
	}(
		_elm_lang$core$Color$toHsl(color));
};
var _danielnarey$elm_color_math$ColorMath$getSaturation = function (color) {
	return _danielnarey$elm_color_math$ColorMath$checkForNaN(
		function (_) {
			return _.saturation;
		}(
			_elm_lang$core$Color$toHsl(color)));
};
var _danielnarey$elm_color_math$ColorMath$getHue = function (color) {
	return A2(
		F2(
			function (x, y) {
				return x * y;
			}),
		180 / _elm_lang$core$Basics$pi,
		_danielnarey$elm_color_math$ColorMath$checkForNaN(
			function (_) {
				return _.hue;
			}(
				_elm_lang$core$Color$toHsl(color))));
};
var _danielnarey$elm_color_math$ColorMath$getBlue = function (color) {
	return function (_) {
		return _.blue;
	}(
		_elm_lang$core$Color$toRgb(color));
};
var _danielnarey$elm_color_math$ColorMath$getGreen = function (color) {
	return function (_) {
		return _.green;
	}(
		_elm_lang$core$Color$toRgb(color));
};
var _danielnarey$elm_color_math$ColorMath$getRed = function (color) {
	return function (_) {
		return _.red;
	}(
		_elm_lang$core$Color$toRgb(color));
};
var _danielnarey$elm_color_math$ColorMath$numToHex = function (num) {
	var base16Digits = _elm_lang$core$Dict$fromList(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 10, _1: 'A'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 11, _1: 'B'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 12, _1: 'C'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 13, _1: 'D'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 14, _1: 'E'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 15, _1: 'F'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
	var secondDigit = function (num) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_elm_lang$core$Dict$get,
				A2(_elm_lang$core$Basics$rem, num, 16),
				base16Digits),
			_elm_lang$core$Basics$toString(
				A2(_elm_lang$core$Basics$rem, num, 16)));
	};
	var firstDigit = function (num) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(_elm_lang$core$Dict$get, (num / 16) | 0, base16Digits),
			_elm_lang$core$Basics$toString((num / 16) | 0));
	};
	return A2(
		_elm_lang$core$Basics_ops['++'],
		firstDigit(num),
		secondDigit(num));
};
var _danielnarey$elm_color_math$ColorMath$colorToHex = function (color) {
	return _elm_lang$core$String$concat(
		A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Helpers$applyList,
				{
					ctor: '::',
					_0: _danielnarey$elm_color_math$ColorMath$getRed,
					_1: {
						ctor: '::',
						_0: _danielnarey$elm_color_math$ColorMath$getGreen,
						_1: {
							ctor: '::',
							_0: _danielnarey$elm_color_math$ColorMath$getBlue,
							_1: {ctor: '[]'}
						}
					}
				},
				color),
			_danielnarey$elm_color_math$ColorMath$numToHex));
};
var _danielnarey$elm_color_math$ColorMath$colorToHex8 = function (color) {
	var alphaToHex = function (num) {
		return _danielnarey$elm_color_math$ColorMath$numToHex(
			_elm_lang$core$Basics$round(num * 255));
	};
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		alphaToHex(
			_danielnarey$elm_color_math$ColorMath$getAlpha(color)),
		_danielnarey$elm_color_math$ColorMath$colorToHex(color));
};
var _danielnarey$elm_color_math$ColorMath$hexToColor = function (hexCode) {
	var errorMsg = 'Argument is not a valid hexadecimal color code';
	var normalizeAlpha = function (_p1) {
		var _p2 = _p1;
		return {
			ctor: '_Tuple4',
			_0: _p2._0,
			_1: _p2._1,
			_2: _p2._2,
			_3: _elm_lang$core$Basics$toFloat(_p2._3) / 255
		};
	};
	var hexToInt = function (_p3) {
		var _p4 = _p3;
		return A2(
			F2(
				function (x, y) {
					return x + y;
				}),
			_p4._1,
			A2(
				F2(
					function (x, y) {
						return x * y;
					}),
				16,
				_p4._0));
	};
	var separateRgba = function (numList) {
		return A2(
			_elm_lang$core$Result$fromMaybe,
			errorMsg,
			_danielnarey$elm_toolkit$Toolkit_Helpers$maybe4Tuple(
				A2(
					_danielnarey$elm_toolkit$Toolkit_Helpers$apply4,
					{
						ctor: '_Tuple4',
						_0: _danielnarey$elm_toolkit$Toolkit_Helpers$take2Tuple,
						_1: function (_p5) {
							return _danielnarey$elm_toolkit$Toolkit_Helpers$take2Tuple(
								A2(_elm_lang$core$List$drop, 2, _p5));
						},
						_2: function (_p6) {
							return _danielnarey$elm_toolkit$Toolkit_Helpers$take2Tuple(
								A2(_elm_lang$core$List$drop, 4, _p6));
						},
						_3: function (_p7) {
							return _danielnarey$elm_toolkit$Toolkit_Helpers$take2Tuple(
								A2(_elm_lang$core$List$drop, 6, _p7));
						}
					},
					numList)));
	};
	var separateRgb = function (numList) {
		return A2(
			_elm_lang$core$Result$fromMaybe,
			errorMsg,
			_danielnarey$elm_toolkit$Toolkit_Helpers$maybe3Tuple(
				A2(
					_danielnarey$elm_toolkit$Toolkit_Helpers$apply3,
					{
						ctor: '_Tuple3',
						_0: _danielnarey$elm_toolkit$Toolkit_Helpers$take2Tuple,
						_1: function (_p8) {
							return _danielnarey$elm_toolkit$Toolkit_Helpers$take2Tuple(
								A2(_elm_lang$core$List$drop, 2, _p8));
						},
						_2: function (_p9) {
							return _danielnarey$elm_toolkit$Toolkit_Helpers$take2Tuple(
								A2(_elm_lang$core$List$drop, 4, _p9));
						}
					},
					numList)));
	};
	var charToNum = function ($char) {
		return _elm_lang$core$Char$isDigit($char) ? _elm_lang$core$String$toInt(
			_elm_lang$core$String$fromChar($char)) : A2(
			_elm_lang$core$Result$fromMaybe,
			errorMsg,
			A2(
				_elm_lang$core$Dict$get,
				$char,
				_elm_lang$core$Dict$fromList(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.chr('A'),
							_1: 10
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.chr('B'),
								_1: 11
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.chr('C'),
									_1: 12
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.chr('D'),
										_1: 13
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Native_Utils.chr('E'),
											_1: 14
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Native_Utils.chr('F'),
												_1: 15
											},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					})));
	};
	var checkDigits = function (charList) {
		var _p10 = _elm_lang$core$List$length(charList);
		switch (_p10) {
			case 3:
				return A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['!+>'],
							A2(
								_danielnarey$elm_toolkit$Toolkit_Helpers$resultList,
								errorMsg,
								A2(
									_elm_lang$core$List$map,
									charToNum,
									_elm_lang$core$List$concat(
										A2(
											_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
											charList,
											function (c) {
												return {
													ctor: '::',
													_0: c,
													_1: {
														ctor: '::',
														_0: c,
														_1: {ctor: '[]'}
													}
												};
											})))),
							separateRgb),
						_danielnarey$elm_toolkit$Toolkit_Helpers$map3Tuple(hexToInt)),
					_danielnarey$elm_toolkit$Toolkit_Helpers$uncurry3(_elm_lang$core$Color$rgb));
			case 4:
				return A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
							A2(
								_danielnarey$elm_toolkit$Toolkit_Operators_ops['!+>'],
								A2(
									_danielnarey$elm_toolkit$Toolkit_Helpers$resultList,
									errorMsg,
									A2(
										_elm_lang$core$List$map,
										charToNum,
										_elm_lang$core$List$concat(
											A2(
												_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
												charList,
												function (c) {
													return {
														ctor: '::',
														_0: c,
														_1: {
															ctor: '::',
															_0: c,
															_1: {ctor: '[]'}
														}
													};
												})))),
								separateRgba),
							_danielnarey$elm_toolkit$Toolkit_Helpers$map4Tuple(hexToInt)),
						normalizeAlpha),
					_danielnarey$elm_toolkit$Toolkit_Helpers$uncurry4(_elm_lang$core$Color$rgba));
			case 6:
				return A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['!+>'],
							A2(
								_danielnarey$elm_toolkit$Toolkit_Helpers$resultList,
								errorMsg,
								A2(_elm_lang$core$List$map, charToNum, charList)),
							separateRgb),
						_danielnarey$elm_toolkit$Toolkit_Helpers$map3Tuple(hexToInt)),
					_danielnarey$elm_toolkit$Toolkit_Helpers$uncurry3(_elm_lang$core$Color$rgb));
			case 8:
				return A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['!|>'],
							A2(
								_danielnarey$elm_toolkit$Toolkit_Operators_ops['!+>'],
								A2(
									_danielnarey$elm_toolkit$Toolkit_Helpers$resultList,
									errorMsg,
									A2(_elm_lang$core$List$map, charToNum, charList)),
								separateRgba),
							_danielnarey$elm_toolkit$Toolkit_Helpers$map4Tuple(hexToInt)),
						normalizeAlpha),
					_danielnarey$elm_toolkit$Toolkit_Helpers$uncurry4(_elm_lang$core$Color$rgba));
			default:
				return _elm_lang$core$Result$Err(errorMsg);
		}
	};
	var dropFirstChar = function (charList) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['||>'], charList, _elm_lang$core$List$head),
			_elm_lang$core$Maybe$Just(
				_elm_lang$core$Native_Utils.chr('#'))) ? A2(_elm_lang$core$List$drop, 1, charList) : charList;
	};
	return checkDigits(
		dropFirstChar(
			_elm_lang$core$String$toList(
				_elm_lang$core$String$toUpper(hexCode))));
};
var _danielnarey$elm_color_math$ColorMath$hslaToColor = function (hsla) {
	return _danielnarey$elm_toolkit$Toolkit_Helpers$uncurry4(_elm_lang$core$Color$hsla)(
		{
			ctor: '_Tuple4',
			_0: A3(
				_elm_lang$core$Basics$clamp,
				_elm_lang$core$Basics$degrees(0),
				_elm_lang$core$Basics$degrees(360),
				_danielnarey$elm_color_math$ColorMath$checkForNaN(hsla.hue)),
			_1: A3(
				_elm_lang$core$Basics$clamp,
				0,
				1,
				_danielnarey$elm_color_math$ColorMath$checkForNaN(hsla.saturation)),
			_2: A3(_elm_lang$core$Basics$clamp, 0, 1, hsla.lightness),
			_3: A3(_elm_lang$core$Basics$clamp, 0, 1, hsla.alpha)
		});
};
var _danielnarey$elm_color_math$ColorMath$setHue = F2(
	function (value, color) {
		var updateHue = F2(
			function (h, hsla) {
				return _elm_lang$core$Native_Utils.update(
					hsla,
					{hue: h});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				updateHue,
				_elm_lang$core$Basics$degrees(
					A3(_elm_lang$core$Basics$clamp, 0, 360, value)),
				_elm_lang$core$Color$toHsl(color)));
	});
var _danielnarey$elm_color_math$ColorMath$setSaturation = F2(
	function (value, color) {
		var updateSaturation = F2(
			function (s, hsla) {
				return _elm_lang$core$Native_Utils.update(
					hsla,
					{saturation: s});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				updateSaturation,
				A3(_elm_lang$core$Basics$clamp, 0, 1, value),
				_elm_lang$core$Color$toHsl(color)));
	});
var _danielnarey$elm_color_math$ColorMath$setLightness = F2(
	function (value, color) {
		var updateLightness = F2(
			function (l, hsla) {
				return _elm_lang$core$Native_Utils.update(
					hsla,
					{lightness: l});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				updateLightness,
				A3(_elm_lang$core$Basics$clamp, 0, 1, value),
				_elm_lang$core$Color$toHsl(color)));
	});
var _danielnarey$elm_color_math$ColorMath$setAlpha = F2(
	function (value, color) {
		var updateAlpha = F2(
			function (a, hsla) {
				return _elm_lang$core$Native_Utils.update(
					hsla,
					{alpha: a});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				updateAlpha,
				A3(_elm_lang$core$Basics$clamp, 0, 1, value),
				_elm_lang$core$Color$toHsl(color)));
	});
var _danielnarey$elm_color_math$ColorMath$lighten = F2(
	function (amount, baseColor) {
		var scaleFunction = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						lightness: A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							hsl.lightness,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								1 - hsl.lightness))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				scaleFunction,
				A3(_elm_lang$core$Basics$clamp, 0, 1, amount),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$darken = F2(
	function (amount, baseColor) {
		var scaleFunction = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						lightness: A2(
							F2(
								function (x, y) {
									return x - y;
								}),
							hsl.lightness,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								hsl.lightness))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				scaleFunction,
				A3(_elm_lang$core$Basics$clamp, 0, 1, amount),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$saturate = F2(
	function (amount, baseColor) {
		var scaleFunction = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						saturation: A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							hsl.saturation,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								1 - hsl.saturation))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				scaleFunction,
				A3(_elm_lang$core$Basics$clamp, 0, 1, amount),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$desaturate = F2(
	function (amount, baseColor) {
		var scaleFunction = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						saturation: A2(
							F2(
								function (x, y) {
									return x - y;
								}),
							hsl.saturation,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								hsl.saturation))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				scaleFunction,
				A3(_elm_lang$core$Basics$clamp, 0, 1, amount),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$moreOpaque = F2(
	function (amount, baseColor) {
		var scaleFunction = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						alpha: A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							hsl.alpha,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								1 - hsl.alpha))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				scaleFunction,
				A3(_elm_lang$core$Basics$clamp, 0, 1, amount),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$moreTransparent = F2(
	function (amount, baseColor) {
		var scaleFunction = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						alpha: A2(
							F2(
								function (x, y) {
									return x - y;
								}),
							hsl.alpha,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								hsl.alpha))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				scaleFunction,
				A3(_elm_lang$core$Basics$clamp, 0, 1, amount),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$rotateHue = F2(
	function (amount, baseColor) {
		var shiftHue = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						hue: (_elm_lang$core$Native_Utils.cmp(hsl.hue + amount, 0) < 0) ? A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							_elm_lang$core$Basics$degrees(360),
							hsl.hue + amount) : ((_elm_lang$core$Native_Utils.cmp(
							hsl.hue + amount,
							_elm_lang$core$Basics$degrees(360)) > 0) ? A3(
							_elm_lang$core$Basics$flip,
							F2(
								function (x, y) {
									return x - y;
								}),
							_elm_lang$core$Basics$degrees(360),
							hsl.hue + amount) : (hsl.hue + amount))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				shiftHue,
				_elm_lang$core$Basics$turns(
					A3(_elm_lang$core$Basics$clamp, -1, 1, amount)),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$scaleToRed = F2(
	function (amount, baseColor) {
		var scaleFunction = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						hue: (_elm_lang$core$Native_Utils.cmp(
							hsl.hue,
							_elm_lang$core$Basics$degrees(180)) > -1) ? A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							hsl.hue,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								_elm_lang$core$Basics$degrees(360) - hsl.hue)) : A2(
							F2(
								function (x, y) {
									return x - y;
								}),
							hsl.hue,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								hsl.hue))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				scaleFunction,
				A3(_elm_lang$core$Basics$clamp, 0, 1, amount),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$scaleToAqua = F2(
	function (amount, baseColor) {
		var scaleFunction = F2(
			function (amount, hsl) {
				return _elm_lang$core$Native_Utils.update(
					hsl,
					{
						hue: (_elm_lang$core$Native_Utils.cmp(
							hsl.hue,
							_elm_lang$core$Basics$degrees(180)) < 1) ? A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							hsl.hue,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								_elm_lang$core$Basics$degrees(180) - hsl.hue)) : A2(
							F2(
								function (x, y) {
									return x - y;
								}),
							hsl.hue,
							A2(
								F2(
									function (x, y) {
										return x * y;
									}),
								amount,
								hsl.hue - _elm_lang$core$Basics$degrees(180)))
					});
			});
		return _danielnarey$elm_color_math$ColorMath$hslaToColor(
			A2(
				scaleFunction,
				A3(_elm_lang$core$Basics$clamp, 0, 1, amount),
				_elm_lang$core$Color$toHsl(baseColor)));
	});
var _danielnarey$elm_color_math$ColorMath$rgbaToColor = function (rgba) {
	return _danielnarey$elm_toolkit$Toolkit_Helpers$uncurry4(_elm_lang$core$Color$rgba)(
		{
			ctor: '_Tuple4',
			_0: A3(_elm_lang$core$Basics$clamp, 0, 255, rgba.red),
			_1: A3(_elm_lang$core$Basics$clamp, 0, 255, rgba.green),
			_2: A3(_elm_lang$core$Basics$clamp, 0, 255, rgba.blue),
			_3: A3(_elm_lang$core$Basics$clamp, 0, 1, rgba.alpha)
		});
};
var _danielnarey$elm_color_math$ColorMath$setRed = F2(
	function (value, color) {
		var updateRed = F2(
			function (r, rgba) {
				return _elm_lang$core$Native_Utils.update(
					rgba,
					{red: r});
			});
		return _danielnarey$elm_color_math$ColorMath$rgbaToColor(
			A2(
				updateRed,
				A3(_elm_lang$core$Basics$clamp, 0, 255, value),
				_elm_lang$core$Color$toRgb(color)));
	});
var _danielnarey$elm_color_math$ColorMath$setGreen = F2(
	function (value, color) {
		var updateGreen = F2(
			function (g, rgba) {
				return _elm_lang$core$Native_Utils.update(
					rgba,
					{green: g});
			});
		return _danielnarey$elm_color_math$ColorMath$rgbaToColor(
			A2(
				updateGreen,
				A3(_elm_lang$core$Basics$clamp, 0, 255, value),
				_elm_lang$core$Color$toRgb(color)));
	});
var _danielnarey$elm_color_math$ColorMath$setBlue = F2(
	function (value, color) {
		var updateBlue = F2(
			function (b, rgba) {
				return _elm_lang$core$Native_Utils.update(
					rgba,
					{blue: b});
			});
		return _danielnarey$elm_color_math$ColorMath$rgbaToColor(
			A2(
				updateBlue,
				A3(_elm_lang$core$Basics$clamp, 0, 255, value),
				_elm_lang$core$Color$toRgb(color)));
	});
var _danielnarey$elm_color_math$ColorMath$Rgba = F4(
	function (a, b, c, d) {
		return {red: a, green: b, blue: c, alpha: d};
	});
var _danielnarey$elm_color_math$ColorMath$Hsla = F4(
	function (a, b, c, d) {
		return {hue: a, saturation: b, lightness: c, alpha: d};
	});
