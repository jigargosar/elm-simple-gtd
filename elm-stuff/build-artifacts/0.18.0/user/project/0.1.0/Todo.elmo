var _user$project$Todo$toAnyPassPredicate = function (predicateList) {
	return function (_p0) {
		return A2(
			_elm_lang$core$List$any,
			_elm_lang$core$Basics$identity,
			A2(_danielnarey$elm_toolkit$Toolkit_Helpers$applyList, predicateList, _p0));
	};
};
var _user$project$Todo$toAllPassPredicate = function (predicateList) {
	return function (_p1) {
		return A2(
			_elm_lang$core$List$all,
			_elm_lang$core$Basics$identity,
			A2(_danielnarey$elm_toolkit$Toolkit_Helpers$applyList, predicateList, _p1));
	};
};
var _user$project$Todo$rejectAnyPass = function (_p2) {
	return _elm_community$list_extra$List_Extra$filterNot(
		_user$project$Todo$toAnyPassPredicate(_p2));
};
var _user$project$Todo$filterAllPass = function (_p3) {
	return _elm_lang$core$List$filter(
		_user$project$Todo$toAllPassPredicate(_p3));
};
var _user$project$Todo$getContextId = function (_) {
	return _.contextId;
};
var _user$project$Todo$contextFilter = function (context) {
	return function (_p4) {
		return A2(
			_user$project$Ext_Function$equals,
			_user$project$Document$getId(context),
			_user$project$Todo$getContextId(_p4));
	};
};
var _user$project$Todo$isDone = function (_) {
	return _.done;
};
var _user$project$Todo$isNotDone = function (_p5) {
	return !_user$project$Todo$isDone(_p5);
};
var _user$project$Todo$getText = function (_) {
	return _.text;
};
var _user$project$Todo$encodeReminder = function (maybeReminderTime) {
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
		A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
			maybeReminderTime,
			function (reminderTime) {
				return _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: A2(
							_user$project$Ext_Function_Infix_ops['=>'],
							'at',
							_elm_lang$core$Json_Encode$float(reminderTime)),
						_1: {ctor: '[]'}
					});
			}),
		_elm_lang$core$Json_Encode$null);
};
var _user$project$Todo$dueAtAndReminderToSchedule = F2(
	function (dueAt, reminder) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				dueAt,
				function (dueAt) {
					var _p6 = reminder;
					if (_p6.ctor === 'None') {
						return _user$project$Todo_Schedule$NoReminder(dueAt);
					} else {
						return A2(_user$project$Todo_Schedule$WithReminder, dueAt, _p6._0);
					}
				}),
			_user$project$Todo_Schedule$unscheduled);
	});
var _user$project$Todo$todoConstructor = function (id) {
	return function (rev) {
		return function (createdAt) {
			return function (modifiedAt) {
				return function (deleted) {
					return function (deviceId) {
						return function (done) {
							return function (text) {
								return function (dueAt) {
									return function (projectId) {
										return function (contextId) {
											return function (reminder) {
												return {
													id: id,
													rev: rev,
													dirty: false,
													createdAt: createdAt,
													modifiedAt: modifiedAt,
													deviceId: deviceId,
													deleted: deleted,
													done: done,
													text: text,
													schedule: A2(_user$project$Todo$dueAtAndReminderToSchedule, dueAt, reminder),
													projectId: projectId,
													contextId: contextId
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Todo$defaultContextId = '';
var _user$project$Todo$defaultProjectId = '';
var _user$project$Todo$defaultDone = false;
var _user$project$Todo$defaultDeleted = false;
var _user$project$Todo$defaultDueAt = _elm_lang$core$Maybe$Nothing;
var _user$project$Todo$hasReminderChanged = function (_p7) {
	var _p8 = _p7;
	return A2(_user$project$Todo_Schedule$hasReminderChanged, _p8._0.schedule, _p8._1.schedule);
};
var _user$project$Todo$contextId = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.contextId;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{contextId: s});
		}));
var _user$project$Todo$projectId = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.projectId;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{projectId: s});
		}));
var _user$project$Todo$schedule = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.schedule;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{schedule: s});
		}));
var _user$project$Todo$text = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.text;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{text: s});
		}));
var _user$project$Todo$done = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.done;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{done: s});
		}));
var _user$project$Todo$getModifiedAt = function (_) {
	return _.modifiedAt;
};
var _user$project$Todo$modifiedAtInWords = function (now) {
	return function (_p9) {
		return A3(
			_alpacaaa$elm_date_distance$Date_Distance$inWordsWithConfig,
			_elm_lang$core$Native_Utils.update(
				_alpacaaa$elm_date_distance$Date_Distance$defaultConfig,
				{includeSeconds: true}),
			_elm_lang$core$Date$fromTime(now),
			_elm_lang$core$Date$fromTime(
				_user$project$Todo$getModifiedAt(_p9)));
	};
};
var _user$project$Todo$getCreatedAt = function (_) {
	return _.createdAt;
};
var _user$project$Todo$createdAtInWords = function (now) {
	return function (_p10) {
		return A3(
			_alpacaaa$elm_date_distance$Date_Distance$inWordsWithConfig,
			_elm_lang$core$Native_Utils.update(
				_alpacaaa$elm_date_distance$Date_Distance$defaultConfig,
				{includeSeconds: true}),
			_elm_lang$core$Date$fromTime(now),
			_elm_lang$core$Date$fromTime(
				_user$project$Todo$getCreatedAt(_p10)));
	};
};
var _user$project$Todo$getProjectId = function (_) {
	return _.projectId;
};
var _user$project$Todo$projectFilter = function (project) {
	return function (_p11) {
		return A2(
			_user$project$Ext_Function$equals,
			_user$project$Document$getId(project),
			_user$project$Todo$getProjectId(_p11));
	};
};
var _user$project$Todo$hasProjectId = function (projectId) {
	return function (_p12) {
		return A2(
			_user$project$Ext_Function$equals,
			projectId,
			_user$project$Todo$getProjectId(_p12));
	};
};
var _user$project$Todo$getDeleted = function (_) {
	return _.deleted;
};
var _user$project$Todo$isDeleted = _user$project$Todo$getDeleted;
var _user$project$Todo$isNotDeleted = function (_p13) {
	return !_user$project$Todo$getDeleted(_p13);
};
var _user$project$Todo$doneFilter = _user$project$Todo$toAllPassPredicate(
	{
		ctor: '::',
		_0: _user$project$Todo$isNotDeleted,
		_1: {
			ctor: '::',
			_0: _user$project$Todo$isDone,
			_1: {ctor: '[]'}
		}
	});
var _user$project$Todo$projectIdFilter = function (projectId) {
	return _user$project$Todo$toAllPassPredicate(
		{
			ctor: '::',
			_0: _user$project$Todo$hasProjectId(projectId),
			_1: {
				ctor: '::',
				_0: _user$project$Todo$isNotDeleted,
				_1: {
					ctor: '::',
					_0: function (_p14) {
						return !_user$project$Todo$isDone(_p14);
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Todo$binFilter = _user$project$Todo$toAllPassPredicate(
	{
		ctor: '::',
		_0: _user$project$Todo$getDeleted,
		_1: {ctor: '[]'}
	});
var _user$project$Todo$getMaybeReminderTime = function (_p15) {
	return _user$project$Todo_Schedule$getMaybeReminderTime(
		function (_) {
			return _.schedule;
		}(_p15));
};
var _user$project$Todo$isReminderOverdue = function (now) {
	return function (_p16) {
		return A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			false,
			function (time) {
				return _elm_lang$core$Native_Utils.cmp(time, now) < 1;
			},
			_user$project$Todo$getMaybeReminderTime(_p16));
	};
};
var _user$project$Todo$getMaybeDueAt = function (_p17) {
	return _user$project$Todo_Schedule$getMaybeDueAt(
		function (_) {
			return _.schedule;
		}(_p17));
};
var _user$project$Todo$getMaybeTime = function (model) {
	return A2(
		_elm_community$maybe_extra$Maybe_Extra$orElse,
		_user$project$Todo$getMaybeDueAt(model),
		_user$project$Todo$getMaybeReminderTime(model));
};
var _user$project$Todo$isSnoozed = function (todo) {
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
		A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
			_danielnarey$elm_toolkit$Toolkit_Helpers$maybe2Tuple(
				{
					ctor: '_Tuple2',
					_0: _user$project$Todo$getMaybeReminderTime(todo),
					_1: _user$project$Todo$getMaybeDueAt(todo)
				}),
			_elm_lang$core$Basics$uncurry(_user$project$Ext_Function$notEquals)),
		false);
};
var _user$project$Todo$encodeOtherFields = function (todo) {
	return {
		ctor: '::',
		_0: A2(
			_user$project$Ext_Function_Infix_ops['=>'],
			'done',
			_elm_lang$core$Json_Encode$bool(
				_user$project$Todo$isDone(todo))),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Ext_Function_Infix_ops['=>'],
				'text',
				_elm_lang$core$Json_Encode$string(
					_user$project$Todo$getText(todo))),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$Ext_Function_Infix_ops['=>'],
					'dueAt',
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
						A2(
							_elm_lang$core$Maybe$map,
							_elm_lang$core$Json_Encode$float,
							_user$project$Todo$getMaybeDueAt(todo)),
						_elm_lang$core$Json_Encode$null)),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Ext_Function_Infix_ops['=>'],
						'projectId',
						_elm_lang$core$Json_Encode$string(todo.projectId)),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Ext_Function_Infix_ops['=>'],
							'contextId',
							_elm_lang$core$Json_Encode$string(todo.contextId)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Ext_Function_Infix_ops['=>'],
								'reminder',
								_user$project$Todo$encodeReminder(
									_user$project$Todo_Schedule$getMaybeReminderTime(todo.schedule))),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	};
};
var _user$project$Todo$Record = F5(
	function (a, b, c, d, e) {
		return {done: a, text: b, schedule: c, projectId: d, contextId: e};
	});
var _user$project$Todo$At = function (a) {
	return {ctor: 'At', _0: a};
};
var _user$project$Todo$reminderDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'at',
	_elm_lang$core$Json_Decode$float,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
		function (time) {
			return _user$project$Todo$At(time);
		}));
var _user$project$Todo$None = {ctor: 'None'};
var _user$project$Todo$defaultReminder = _user$project$Todo$None;
var _user$project$Todo$todoRecordDecoder = function (_p18) {
	return A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'reminder',
		_user$project$Todo$reminderDecoder,
		_user$project$Todo$defaultReminder,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'contextId',
			_elm_lang$core$Json_Decode$string,
			_user$project$Todo$defaultContextId,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'projectId',
				_elm_lang$core$Json_Decode$string,
				_user$project$Todo$defaultProjectId,
				A4(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
					'dueAt',
					_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$float),
					_user$project$Todo$defaultDueAt,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'text',
						_elm_lang$core$Json_Decode$string,
						A4(_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional, 'done', _elm_lang$core$Json_Decode$bool, _user$project$Todo$defaultDone, _p18))))));
};
var _user$project$Todo$decoder = _user$project$Todo$todoRecordDecoder(
	_user$project$Document$documentFieldsDecoder(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Todo$todoConstructor)));
var _user$project$Todo$init = F4(
	function (createdAt, text, deviceId, id) {
		return _user$project$Todo$todoConstructor(id)(_user$project$Document$defaultRevision)(createdAt)(createdAt)(_user$project$Todo$defaultDeleted)(deviceId)(_user$project$Todo$defaultDone)(text)(_user$project$Todo$defaultDueAt)(_user$project$Todo$defaultProjectId)(_user$project$Todo$defaultContextId)(_user$project$Todo$defaultReminder);
	});
var _user$project$Todo$AutoSnooze = function (a) {
	return {ctor: 'AutoSnooze', _0: a};
};
var _user$project$Todo$SnoozeTill = function (a) {
	return {ctor: 'SnoozeTill', _0: a};
};
var _user$project$Todo$SetSchedule = function (a) {
	return {ctor: 'SetSchedule', _0: a};
};
var _user$project$Todo$TurnReminderOff = {ctor: 'TurnReminderOff'};
var _user$project$Todo$ToggleDeleted = {ctor: 'ToggleDeleted'};
var _user$project$Todo$ToggleDone = {ctor: 'ToggleDone'};
var _user$project$Todo$SetProject = function (a) {
	return {ctor: 'SetProject', _0: a};
};
var _user$project$Todo$CopyProjectAndContextId = function (a) {
	return {ctor: 'CopyProjectAndContextId', _0: a};
};
var _user$project$Todo$SetProjectId = function (a) {
	return {ctor: 'SetProjectId', _0: a};
};
var _user$project$Todo$SetContext = function (a) {
	return {ctor: 'SetContext', _0: a};
};
var _user$project$Todo$SetScheduleFromMaybeTime = function (a) {
	return {ctor: 'SetScheduleFromMaybeTime', _0: a};
};
var _user$project$Todo$SetContextId = function (a) {
	return {ctor: 'SetContextId', _0: a};
};
var _user$project$Todo$SetDeleted = function (a) {
	return {ctor: 'SetDeleted', _0: a};
};
var _user$project$Todo$SetText = function (a) {
	return {ctor: 'SetText', _0: a};
};
var _user$project$Todo$MarkDone = {ctor: 'MarkDone'};
var _user$project$Todo$SetDone = function (a) {
	return {ctor: 'SetDone', _0: a};
};
var _user$project$Todo$update = F2(
	function (action, model) {
		update:
		while (true) {
			var _p19 = action;
			switch (_p19.ctor) {
				case 'SetDone':
					return _elm_lang$core$Native_Utils.update(
						model,
						{done: _p19._0});
				case 'SetDeleted':
					return _elm_lang$core$Native_Utils.update(
						model,
						{deleted: _p19._0});
				case 'SetText':
					return _elm_lang$core$Native_Utils.update(
						model,
						{text: _p19._0});
				case 'SetContextId':
					return _elm_lang$core$Native_Utils.update(
						model,
						{contextId: _p19._0});
				case 'SetProjectId':
					return _elm_lang$core$Native_Utils.update(
						model,
						{projectId: _p19._0});
				case 'CopyProjectAndContextId':
					var _p21 = _p19._0;
					return function (_p20) {
						return A2(
							_user$project$Todo$update,
							_user$project$Todo$SetProjectId(_p21.projectId),
							A2(
								_user$project$Todo$update,
								_user$project$Todo$SetContextId(_p21.contextId),
								_p20));
					}(model);
				case 'SetContext':
					var _v3 = _user$project$Todo$SetContextId(
						_user$project$Document$getId(_p19._0)),
						_v4 = model;
					action = _v3;
					model = _v4;
					continue update;
				case 'SetProject':
					var _v5 = _user$project$Todo$SetProjectId(
						_user$project$Document$getId(_p19._0)),
						_v6 = model;
					action = _v5;
					model = _v6;
					continue update;
				case 'ToggleDone':
					var _v7 = _user$project$Todo$SetDone(!model.done),
						_v8 = model;
					action = _v7;
					model = _v8;
					continue update;
				case 'MarkDone':
					var _v9 = _user$project$Todo$SetDone(true),
						_v10 = model;
					action = _v9;
					model = _v10;
					continue update;
				case 'ToggleDeleted':
					var _v11 = _user$project$Todo$SetDeleted(!model.deleted),
						_v12 = model;
					action = _v11;
					model = _v12;
					continue update;
				case 'SetSchedule':
					return _elm_lang$core$Native_Utils.update(
						model,
						{schedule: _p19._0});
				case 'SetScheduleFromMaybeTime':
					var _v13 = _user$project$Todo$SetSchedule(
						_user$project$Todo_Schedule$fromMaybeTime(_p19._0)),
						_v14 = model;
					action = _v13;
					model = _v14;
					continue update;
				case 'TurnReminderOff':
					var _v15 = _user$project$Todo$SetSchedule(
						_user$project$Todo_Schedule$turnReminderOff(model.schedule)),
						_v16 = model;
					action = _v15;
					model = _v16;
					continue update;
				case 'SnoozeTill':
					var _v17 = _user$project$Todo$SetSchedule(
						A2(_user$project$Todo_Schedule$snoozeTill, _p19._0, model.schedule)),
						_v18 = model;
					action = _v17;
					model = _v18;
					continue update;
				default:
					var _v19 = _user$project$Todo$SetSchedule(
						A2(_user$project$Todo_Schedule$snoozeTill, _p19._0 + (_elm_lang$core$Time$minute * 15), model.schedule)),
						_v20 = model;
					action = _v19;
					model = _v20;
					continue update;
			}
		}
	});
