var _user$project$Entity$createProjectTodoGroup = F2(
	function (getTodoList, project) {
		return {
			project: project,
			todoList: getTodoList(project)
		};
	});
var _user$project$Entity$createProjectSubGroups = F2(
	function (findProjectById, tcg) {
		var filterTodoForProject = function (project) {
			return A2(
				_elm_lang$core$List$filter,
				_user$project$Todo$hasProject(project),
				tcg.todoList);
		};
		var projects = _user$project$Project$sort(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
					_elm_community$list_extra$List_Extra$unique(
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], tcg.todoList, _user$project$Todo$getProjectId)),
					findProjectById)));
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			projects,
			_user$project$Entity$createProjectTodoGroup(filterTodoForProject));
	});
var _user$project$Entity$createContextTodoGroup = F2(
	function (getTodoList, context) {
		return {
			context: context,
			todoList: getTodoList(context)
		};
	});
var _user$project$Entity$createContextSubGroups = F2(
	function (findContextById, tcg) {
		var filterTodoForContext = function (context) {
			return A2(
				_elm_lang$core$List$filter,
				_user$project$Todo$contextFilter(context),
				tcg.todoList);
		};
		var contexts = _user$project$Context$sort(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
					_elm_community$list_extra$List_Extra$unique(
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], tcg.todoList, _user$project$Todo$getContextId)),
					findContextById)));
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			contexts,
			_user$project$Entity$createContextTodoGroup(filterTodoForContext));
	});
var _user$project$Entity$routes = function (viewType) {
	var _p0 = viewType;
	switch (_p0.ctor) {
		case 'ContextsView':
			return {
				ctor: '::',
				_0: 'lists',
				_1: {
					ctor: '::',
					_0: 'contexts',
					_1: {ctor: '[]'}
				}
			};
		case 'ProjectsView':
			return {
				ctor: '::',
				_0: 'lists',
				_1: {
					ctor: '::',
					_0: 'projects',
					_1: {ctor: '[]'}
				}
			};
		case 'ProjectView':
			var _p1 = _p0._0;
			return _elm_lang$core$String$isEmpty(_p1) ? {
				ctor: '::',
				_0: 'project',
				_1: {
					ctor: '::',
					_0: 'NotAssigned',
					_1: {ctor: '[]'}
				}
			} : {
				ctor: '::',
				_0: 'project',
				_1: {
					ctor: '::',
					_0: _p1,
					_1: {ctor: '[]'}
				}
			};
		case 'ContextView':
			var _p2 = _p0._0;
			return _elm_lang$core$String$isEmpty(_p2) ? {
				ctor: '::',
				_0: 'Inbox',
				_1: {ctor: '[]'}
			} : {
				ctor: '::',
				_0: 'context',
				_1: {
					ctor: '::',
					_0: _p2,
					_1: {ctor: '[]'}
				}
			};
		case 'BinView':
			return {
				ctor: '::',
				_0: 'bin',
				_1: {ctor: '[]'}
			};
		default:
			return {
				ctor: '::',
				_0: 'done',
				_1: {ctor: '[]'}
			};
	}
};
var _user$project$Entity$equalById = F2(
	function (e1, e2) {
		var eq = _user$project$Document$equalById;
		var _p3 = {ctor: '_Tuple2', _0: e1, _1: e2};
		_v1_2:
		do {
			if (_p3.ctor === '_Tuple2') {
				if (_p3._0.ctor === 'Group') {
					if (_p3._1.ctor === 'Group') {
						var _p4 = {ctor: '_Tuple2', _0: _p3._0._0, _1: _p3._1._0};
						_v2_2:
						do {
							if (_p4.ctor === '_Tuple2') {
								if (_p4._0.ctor === 'Project') {
									if (_p4._1.ctor === 'Project') {
										return A2(eq, _p4._0._0, _p4._1._0);
									} else {
										break _v2_2;
									}
								} else {
									if (_p4._1.ctor === 'Context') {
										return A2(eq, _p4._0._0, _p4._1._0);
									} else {
										break _v2_2;
									}
								}
							} else {
								break _v2_2;
							}
						} while(false);
						return false;
					} else {
						break _v1_2;
					}
				} else {
					if (_p3._1.ctor === 'Task') {
						return A2(eq, _p3._0._0, _p3._1._0);
					} else {
						break _v1_2;
					}
				}
			} else {
				break _v1_2;
			}
		} while(false);
		return false;
	});
var _user$project$Entity$findEntityByOffsetIn = F3(
	function (offsetIndex, entityList, fromEntity) {
		return A2(
			_elm_community$maybe_extra$Maybe_Extra$orElse,
			_elm_lang$core$List$head(entityList),
			A2(
				_user$project$Ext_List$atIndexIn,
				entityList,
				A2(
					_user$project$Ext_List$clampIndexIn,
					entityList,
					A2(
						_user$project$Ext_Function$add,
						offsetIndex,
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
							A2(
								_elm_community$list_extra$List_Extra$findIndex,
								_user$project$Entity$equalById(fromEntity),
								entityList),
							0)))));
	});
var _user$project$Entity$getId = function (entity) {
	var _p5 = entity;
	if (_p5.ctor === 'Task') {
		return _user$project$Document$getId(_p5._0);
	} else {
		var _p6 = _p5._0;
		if (_p6.ctor === 'Project') {
			return _user$project$Document$getId(_p6._0);
		} else {
			return _user$project$Document$getId(_p6._0);
		}
	}
};
var _user$project$Entity$ContextGroup = F2(
	function (a, b) {
		return {context: a, todoList: b};
	});
var _user$project$Entity$ProjectGroup = F2(
	function (a, b) {
		return {project: a, todoList: b};
	});
var _user$project$Entity$Context = function (a) {
	return {ctor: 'Context', _0: a};
};
var _user$project$Entity$Project = function (a) {
	return {ctor: 'Project', _0: a};
};
var _user$project$Entity$Task = function (a) {
	return {ctor: 'Task', _0: a};
};
var _user$project$Entity$fromTask = _user$project$Entity$Task;
var _user$project$Entity$Group = function (a) {
	return {ctor: 'Group', _0: a};
};
var _user$project$Entity$fromContext = function (_p7) {
	return _user$project$Entity$Group(
		_user$project$Entity$Context(_p7));
};
var _user$project$Entity$fromProject = function (_p8) {
	return _user$project$Entity$Group(
		_user$project$Entity$Project(_p8));
};
var _user$project$Entity$DoneView = {ctor: 'DoneView'};
var _user$project$Entity$BinView = {ctor: 'BinView'};
var _user$project$Entity$ProjectView = function (a) {
	return {ctor: 'ProjectView', _0: a};
};
var _user$project$Entity$ProjectsView = {ctor: 'ProjectsView'};
var _user$project$Entity$ContextView = function (a) {
	return {ctor: 'ContextView', _0: a};
};
var _user$project$Entity$ContextsView = {ctor: 'ContextsView'};
var _user$project$Entity$defaultListView = _user$project$Entity$ContextsView;
var _user$project$Entity$getTodoGotoGroupView = F2(
	function (todo, prevView) {
		var projectView = _user$project$Entity$ProjectView(
			_user$project$Todo$getProjectId(todo));
		var contextView = _user$project$Entity$ContextView(
			_user$project$Todo$getContextId(todo));
		var _p9 = prevView;
		switch (_p9.ctor) {
			case 'ProjectsView':
				return contextView;
			case 'ProjectView':
				return contextView;
			case 'ContextsView':
				return projectView;
			case 'ContextView':
				return projectView;
			case 'BinView':
				return _user$project$Entity$ContextsView;
			default:
				return _user$project$Entity$ContextsView;
		}
	});
var _user$project$Entity$toViewType = F2(
	function (maybePrevView, entity) {
		var _p10 = entity;
		if (_p10.ctor === 'Group') {
			var _p11 = _p10._0;
			if (_p11.ctor === 'Context') {
				return _user$project$Entity$ContextView(
					_user$project$Document$getId(_p11._0));
			} else {
				return _user$project$Entity$ProjectView(
					_user$project$Document$getId(_p11._0));
			}
		} else {
			var _p12 = _p10._0;
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					maybePrevView,
					_user$project$Entity$getTodoGotoGroupView(_p12)),
				_user$project$Entity$ContextView(
					_user$project$Todo$getContextId(_p12)));
		}
	});
var _user$project$Entity$Goto = {ctor: 'Goto'};
var _user$project$Entity$ToggleSelected = {ctor: 'ToggleSelected'};
var _user$project$Entity$OnFocusIn = {ctor: 'OnFocusIn'};
var _user$project$Entity$NameChanged = function (a) {
	return {ctor: 'NameChanged', _0: a};
};
var _user$project$Entity$Save = {ctor: 'Save'};
var _user$project$Entity$ToggleArchived = {ctor: 'ToggleArchived'};
var _user$project$Entity$ToggleDeleted = {ctor: 'ToggleDeleted'};
var _user$project$Entity$StartEditing = {ctor: 'StartEditing'};
var _user$project$Entity$FlatTodoList = F2(
	function (a, b) {
		return {ctor: 'FlatTodoList', _0: a, _1: b};
	});
var _user$project$Entity$createGroupingForTodoList = _user$project$Entity$FlatTodoList;
var _user$project$Entity$MultiProject = function (a) {
	return {ctor: 'MultiProject', _0: a};
};
var _user$project$Entity$createGroupingForProjects = F2(
	function (getTodoList, projects) {
		return _user$project$Entity$MultiProject(
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				projects,
				_user$project$Entity$createProjectTodoGroup(getTodoList)));
	});
var _user$project$Entity$MultiContext = function (a) {
	return {ctor: 'MultiContext', _0: a};
};
var _user$project$Entity$createGroupingForContexts = F2(
	function (getTodoList, contexts) {
		return _user$project$Entity$MultiContext(
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				contexts,
				_user$project$Entity$createContextTodoGroup(getTodoList)));
	});
var _user$project$Entity$flattenGrouping = function (grouping) {
	var _p13 = grouping;
	switch (_p13.ctor) {
		case 'SingleContext':
			return {
				ctor: '::',
				_0: _user$project$Entity$fromContext(_p13._0.context),
				_1: _user$project$Entity$flattenGrouping(
					_user$project$Entity$MultiProject(_p13._1))
			};
		case 'SingleProject':
			return {
				ctor: '::',
				_0: _user$project$Entity$fromProject(_p13._0.project),
				_1: _user$project$Entity$flattenGrouping(
					_user$project$Entity$MultiContext(_p13._1))
			};
		case 'MultiContext':
			return A2(
				_elm_lang$core$List$concatMap,
				function (g) {
					return {
						ctor: '::',
						_0: _user$project$Entity$fromContext(g.context),
						_1: A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], g.todoList, _user$project$Entity$Task)
					};
				},
				_p13._0);
		case 'MultiProject':
			return A2(
				_elm_lang$core$List$concatMap,
				function (g) {
					return {
						ctor: '::',
						_0: _user$project$Entity$fromProject(g.project),
						_1: A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], g.todoList, _user$project$Entity$Task)
					};
				},
				_p13._0);
		default:
			return A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], _p13._1, _user$project$Entity$Task);
	}
};
var _user$project$Entity$SingleProject = F2(
	function (a, b) {
		return {ctor: 'SingleProject', _0: a, _1: b};
	});
var _user$project$Entity$createGroupingForProject = F3(
	function (getTodoList, findProjectById, project) {
		return function (tcg) {
			return A2(
				_user$project$Entity$SingleProject,
				tcg,
				A2(_user$project$Entity$createContextSubGroups, findProjectById, tcg));
		}(
			A2(_user$project$Entity$createProjectTodoGroup, getTodoList, project));
	});
var _user$project$Entity$SingleContext = F2(
	function (a, b) {
		return {ctor: 'SingleContext', _0: a, _1: b};
	});
var _user$project$Entity$createGroupingForContext = F3(
	function (getTodoList, findContextById, context) {
		return function (tcg) {
			return A2(
				_user$project$Entity$SingleContext,
				tcg,
				A2(_user$project$Entity$createProjectSubGroups, findContextById, tcg));
		}(
			A2(_user$project$Entity$createContextTodoGroup, getTodoList, context));
	});
