var _user$project$OldGroupEntity_ViewModel$lightGray = '#9e9e9e';
var _user$project$OldGroupEntity_ViewModel$sgtdBlue = 'rgb(68, 138, 255)';
var _user$project$OldGroupEntity_ViewModel$projectsColor = 'rgb(124, 77, 255)';
var _user$project$OldGroupEntity_ViewModel$nullProjectColor = 'rgb(179, 157, 219)';
var _user$project$OldGroupEntity_ViewModel$contextsColor = _user$project$OldGroupEntity_ViewModel$sgtdBlue;
var _user$project$OldGroupEntity_ViewModel$inboxColor = '#42a5f5';
var _user$project$OldGroupEntity_ViewModel$create = F3(
	function (getTodoListByEntityId, config, entity) {
		var name = entity.name;
		var isNull = config.isNull(entity);
		var icon = isNull ? config.nullIcon : {name: config.defaultIconName, color: _user$project$OldGroupEntity_ViewModel$lightGray};
		var appHeader = {
			name: A2(_elm_lang$core$Basics_ops['++'], config.namePrefix, name),
			backgroundColor: icon.color
		};
		var createEntityActionMsg = _user$project$Model$OnEntityAction(
			config.toEntity(entity));
		var startEditingMsg = createEntityActionMsg(_user$project$Entity$StartEditing);
		var id = _user$project$Document$getId(entity);
		var count = _elm_lang$core$List$length(
			getTodoListByEntityId(id));
		return {
			id: id,
			name: name,
			isDeleted: _user$project$Document$isDeleted(entity),
			isEmpty: _elm_lang$core$Native_Utils.eq(count, 0),
			count: count,
			onActiveStateChanged: function (bool) {
				return bool ? _user$project$Model$OnSetViewType(
					_user$project$Model$EntityListView(
						config.getViewType(id))) : _user$project$Model$commonMsg.noOp;
			},
			icon: icon,
			appHeader: appHeader
		};
	});
var _user$project$OldGroupEntity_ViewModel$createList = F2(
	function (config, model) {
		var list = config.filter(model);
		var todoListDict = A2(_elm_community$dict_extra$Dict_Extra$groupBy, config.groupByFn, config.todoList);
		var getTodoListWithGroupId = function (id) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(_elm_lang$core$Dict$get, id, todoListDict),
				{ctor: '[]'});
		};
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			list,
			A2(_user$project$OldGroupEntity_ViewModel$create, getTodoListWithGroupId, config));
	});
var _user$project$OldGroupEntity_ViewModel$contexts = function (model) {
	var activeFilter = _user$project$Model$filterContexts(_user$project$GroupDoc$isActive);
	var config = {
		groupByFn: _user$project$Todo$getContextId,
		todoList: _user$project$Model$getActiveTodoListHavingActiveProjects(model),
		namePrefix: '@',
		filter: activeFilter,
		toEntity: _user$project$Entity$fromContext,
		nullEntity: _user$project$Context$null,
		isNull: _user$project$Context$isNull,
		nullIcon: {name: 'inbox', color: _user$project$OldGroupEntity_ViewModel$inboxColor},
		defaultIconName: 'fiber_manual_record',
		getViewType: _user$project$Entity$ContextView
	};
	var entityList = A2(_user$project$OldGroupEntity_ViewModel$createList, config, model);
	var nullVMAsList = _user$project$X_Maybe$toList(
		_elm_lang$core$List$head(entityList));
	var archivedFilter = _user$project$Model$filterContexts(_user$project$GroupDoc$archivedButNotDeletedPred);
	var archivedConfig = _elm_lang$core$Native_Utils.update(
		config,
		{filter: archivedFilter});
	return {
		entityList: A2(_elm_lang$core$List$drop, 1, entityList),
		nullVMAsList: nullVMAsList,
		archivedEntityList: A2(_user$project$OldGroupEntity_ViewModel$createList, archivedConfig, model),
		viewType: _user$project$Entity$ContextsView,
		title: 'Contexts',
		className: 'contexts',
		showDeleted: model.showDeleted,
		showArchived: _user$project$AppDrawer_Model$getShowArchivedForContexts(model.appDrawerModel),
		onAddClicked: _user$project$Model$NewContext,
		icon: {name: 'group_work', color: _user$project$OldGroupEntity_ViewModel$contextsColor},
		onToggleExpanded: _user$project$Model$OnAppDrawerMsg(_user$project$AppDrawer_Model$OnToggleExpandContextList),
		onToggleShowArchived: _user$project$Model$OnAppDrawerMsg(_user$project$AppDrawer_Model$OnToggleShowArchivedContexts),
		isExpanded: _user$project$AppDrawer_Model$isContextListExpanded(model.appDrawerModel)
	};
};
var _user$project$OldGroupEntity_ViewModel$projects = function (model) {
	var activeFilter = _user$project$Model$filterProjects(_user$project$GroupDoc$isActive);
	var config = {
		groupByFn: _user$project$Todo$getProjectId,
		todoList: _user$project$Model$getActiveTodoListHavingActiveContexts(model),
		namePrefix: '#',
		filter: activeFilter,
		toEntity: _user$project$Entity$fromProject,
		nullEntity: _user$project$Project$null,
		isNull: _user$project$Project$isNull,
		nullIcon: {name: 'apps', color: _user$project$OldGroupEntity_ViewModel$nullProjectColor},
		defaultIconName: 'apps',
		getViewType: _user$project$Entity$ProjectView
	};
	var entityList = A2(_user$project$OldGroupEntity_ViewModel$createList, config, model);
	var nullVMAsList = _user$project$X_Maybe$toList(
		_elm_lang$core$List$head(entityList));
	var archivedFilter = _user$project$Model$filterProjects(_user$project$GroupDoc$archivedButNotDeletedPred);
	var archivedConfig = _elm_lang$core$Native_Utils.update(
		config,
		{filter: archivedFilter});
	return {
		entityList: A2(_elm_lang$core$List$drop, 1, entityList),
		nullVMAsList: {ctor: '[]'},
		archivedEntityList: A2(_user$project$OldGroupEntity_ViewModel$createList, archivedConfig, model),
		viewType: _user$project$Entity$ProjectsView,
		title: 'Projects',
		className: 'projects',
		showDeleted: model.showDeleted,
		showArchived: _user$project$AppDrawer_Model$getShowArchivedForProjects(model.appDrawerModel),
		onAddClicked: _user$project$Model$NewProject,
		icon: {name: 'group_work', color: _user$project$OldGroupEntity_ViewModel$projectsColor},
		onToggleExpanded: _user$project$Model$OnAppDrawerMsg(_user$project$AppDrawer_Model$OnToggleExpandProjectList),
		onToggleShowArchived: _user$project$Model$OnAppDrawerMsg(_user$project$AppDrawer_Model$OnToggleShowArchivedProjects),
		isExpanded: _user$project$AppDrawer_Model$isProjectListExpanded(model.appDrawerModel)
	};
};
var _user$project$OldGroupEntity_ViewModel$IconVM = F2(
	function (a, b) {
		return {name: a, color: b};
	});
var _user$project$OldGroupEntity_ViewModel$ViewModel = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {nullVMAsList: a, entityList: b, archivedEntityList: c, viewType: d, title: e, className: f, showDeleted: g, showArchived: h, onAddClicked: i, onToggleExpanded: j, onToggleShowArchived: k, isExpanded: l, icon: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$OldGroupEntity_ViewModel$DocumentWithNameViewModel = F8(
	function (a, b, c, d, e, f, g, h) {
		return {id: a, name: b, appHeader: c, isDeleted: d, isEmpty: e, count: f, onActiveStateChanged: g, icon: h};
	});
var _user$project$OldGroupEntity_ViewModel$Record = F2(
	function (a, b) {
		return {name: a, archived: b};
	});
var _user$project$OldGroupEntity_ViewModel$Config = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {groupByFn: a, todoList: b, namePrefix: c, filter: d, toEntity: e, nullEntity: f, isNull: g, nullIcon: h, defaultIconName: i, getViewType: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
