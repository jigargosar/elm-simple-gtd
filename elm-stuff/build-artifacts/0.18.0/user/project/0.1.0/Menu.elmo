var _user$project$Menu$menuItemView = function (itemVM) {
	return {
		ctor: '_Tuple2',
		_0: itemVM.key,
		_1: A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(itemVM.onClick),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$tabindex(itemVM.tabIndexValue),
					_1: {
						ctor: '::',
						_0: _user$project$Ext_Keyboard$onKeyDownStopPropagation(itemVM.onKeyDown),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'auto-focus', itemVM.isFocused),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'collection-item', true),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'active', itemVM.isSelected),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: itemVM.view,
				_1: {ctor: '[]'}
			})
	};
};
var _user$project$Menu$boolToTabIndexValue = function (bool) {
	return bool ? 0 : -1;
};
var _user$project$Menu$createItemViewModel = F3(
	function (menuVM, index, item) {
		return {
			key: menuVM.itemKey(item),
			isSelected: menuVM.isSelectedAt(index),
			isFocused: menuVM.isFocusedAt(index),
			tabIndexValue: menuVM.tabIndexValueAt(index),
			onClick: menuVM.onSelect(item),
			view: menuVM.itemView(item),
			onKeyDown: menuVM.onKeyDownAt(index)
		};
	});
var _user$project$Menu$initState = {maybeFocusKey: _elm_lang$core$Maybe$Nothing};
var _user$project$Menu$State = function (a) {
	return {maybeFocusKey: a};
};
var _user$project$Menu$createViewModel = F3(
	function (items, state, config) {
		var moveFocusToItemWithChar = function (singleChar) {
			return state;
		};
		var maybeFocusedIndex = function () {
			var findIndexOfItemWithKey = function (key) {
				return A2(
					_elm_community$list_extra$List_Extra$findIndex,
					function (_p0) {
						return A2(
							_user$project$Ext_Function$equals,
							key,
							config.itemKey(_p0));
					},
					items);
			};
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?+>'],
				state.maybeFocusKey,
				A2(
					_user$project$Ext_Function_Infix_ops['>>?'],
					findIndexOfItemWithKey,
					_user$project$Ext_List$clampIndexIn(items)));
		}();
		var clampIndex = _user$project$Ext_List$clampIndexIn(items);
		var selectedIndex = clampIndex(
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(_elm_community$list_extra$List_Extra$findIndex, config.isSelected, items),
				0));
		var focusedIndex = A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='], maybeFocusedIndex, selectedIndex);
		var isFocusedAt = _user$project$Ext_Function$equals(focusedIndex);
		var maybeFocusedItem = A2(_elm_community$list_extra$List_Extra$getAt, focusedIndex, items);
		var onFocusedItemKeyDown = function (_p1) {
			var _p2 = _p1;
			var moveFocusIndexBy = function (offset) {
				var indexToFocusKey = function (index) {
					return A2(
						_elm_community$maybe_extra$Maybe_Extra$orElse,
						state.maybeFocusKey,
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
							A2(_elm_community$list_extra$List_Extra$getAt, index, items),
							config.itemKey));
				};
				return function (_p3) {
					return _user$project$Menu$State(
						indexToFocusKey(
							clampIndex(
								A2(_user$project$Ext_Function$add, focusedIndex, _p3))));
				}(offset);
			};
			var _p4 = _p2.key;
			switch (_p4.ctor) {
				case 'Enter':
					return A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'], maybeFocusedItem, config.onSelect),
						config.noOp);
				case 'ArrowUp':
					return config.onStateChanged(
						moveFocusIndexBy(-1));
				case 'ArrowDown':
					return config.onStateChanged(
						moveFocusIndexBy(1));
				default:
					var _p5 = _elm_lang$core$String$toList(_p2.keyString);
					if ((_p5.ctor === '::') && (_p5._1.ctor === '[]')) {
						return config.onStateChanged(
							moveFocusToItemWithChar(_p5._0));
					} else {
						return config.noOp;
					}
			}
		};
		var onKeyDownAt = function (index) {
			return isFocusedAt(index) ? onFocusedItemKeyDown : function (_p6) {
				return config.noOp;
			};
		};
		return {
			isFocusedAt: isFocusedAt,
			isSelectedAt: _user$project$Ext_Function$equals(selectedIndex),
			tabIndexValueAt: function (_p7) {
				return _user$project$Menu$boolToTabIndexValue(
					isFocusedAt(_p7));
			},
			onKeyDownAt: onKeyDownAt,
			onSelect: config.onSelect,
			itemView: config.itemView,
			itemKey: config.itemKey
		};
	});
var _user$project$Menu$view = F3(
	function (items, state, config) {
		var menuVM = A3(_user$project$Menu$createViewModel, items, state, config);
		var itemViewList = A2(
			_user$project$Ext_Function_Infix_ops['.#|>'],
			items,
			A2(
				_user$project$Ext_Function_Infix_ops['>>>'],
				_user$project$Menu$createItemViewModel(menuVM),
				_user$project$Menu$menuItemView));
		return _user$project$View_FullBleedCapture$init(
			{
				onMouseDown: config.onOutsideMouseDown,
				children: {
					ctor: '::',
					_0: A3(
						_elm_lang$html$Html_Keyed$node,
						'ul',
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('popup-menu'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('collection z-depth-4'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-prevent-default-keys', 'Tab'),
									_1: {ctor: '[]'}
								}
							}
						},
						itemViewList),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Menu$Config = F8(
	function (a, b, c, d, e, f, g, h) {
		return {onSelect: a, itemKey: b, itemSearchText: c, itemView: d, isSelected: e, onStateChanged: f, noOp: g, onOutsideMouseDown: h};
	});
var _user$project$Menu$ViewModel = F7(
	function (a, b, c, d, e, f, g) {
		return {isFocusedAt: a, isSelectedAt: b, tabIndexValueAt: c, onKeyDownAt: d, onSelect: e, itemView: f, itemKey: g};
	});
var _user$project$Menu$ItemViewModel = F7(
	function (a, b, c, d, e, f, g) {
		return {key: a, isFocused: b, tabIndexValue: c, isSelected: d, onClick: e, onKeyDown: f, view: g};
	});
