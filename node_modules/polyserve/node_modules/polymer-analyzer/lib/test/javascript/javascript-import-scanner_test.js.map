{"version":3,"sources":["test/javascript/javascript-import-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAGH,+BAA4B;AAC5B,yBAAyB;AACzB,6BAA6B;AAG7B,0FAAmF;AACnF,0EAAoE;AAEpE,KAAK,CAAC,yBAAyB,EAAE;IAE/B,MAAM,MAAM,GAAG,IAAI,oCAAgB,EAAE,CAAC;IACtC,MAAM,OAAO,GAAG,IAAI,mDAAuB,EAAE,CAAC;IAE9C,IAAI,CAAC,eAAe,EAAE;QACpB,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CACxB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,gCAAgC,CAAC,EAAE,MAAM,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;QAEpE,MAAM,KAAK,GAAG,CAAC,OAAgB,KAC3B,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE/C,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACvD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACjC,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAC5C,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,iCAAiC,CAAC,CAAC;IACnE,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,wBAAwB,EAAE;QAC7B,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CACxB,IAAI,CAAC,OAAO,CACR,SAAS,EAAE,kDAAkD,CAAC,EAClE,MAAM,CAAC,CAAC;QACZ,MAAM,QAAQ,GACV,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,gDAAgD,CAAC,CAAC;QAEzE,MAAM,KAAK,GAAG,CAAC,OAAgB,KAC3B,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE/C,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACvD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,CAAA,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"javascript-import-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {Visitor} from '../../javascript/estree-visitor';\nimport {JavaScriptImportScanner} from '../../javascript/javascript-import-scanner';\nimport {JavaScriptParser} from '../../javascript/javascript-parser';\n\nsuite('JavaScriptImportScanner', () => {\n\n  const parser = new JavaScriptParser();\n  const scanner = new JavaScriptImportScanner();\n\n  test('finds imports', async() => {\n    const file = fs.readFileSync(\n        path.resolve(__dirname, '../static/javascript/module.js'), 'utf8');\n    const document = parser.parse(file, '/static/javascript/module.js');\n\n    const visit = (visitor: Visitor) =>\n        Promise.resolve(document.visit([visitor]));\n\n    const {features} = await scanner.scan(document, visit);\n    assert.equal(features.length, 1);\n    assert.equal(features[0].type, 'js-import');\n    assert.equal(features[0].url, '/static/javascript/submodule.js');\n  });\n\n  test('skips non-path imports', async() => {\n    const file = fs.readFileSync(\n        path.resolve(\n            __dirname, '../static/javascript/module-with-named-import.js'),\n        'utf8');\n    const document =\n        parser.parse(file, '/static/javascript/module-with-named-import.js');\n\n    const visit = (visitor: Visitor) =>\n        Promise.resolve(document.visit([visitor]));\n\n    const {features} = await scanner.scan(document, visit);\n    assert.equal(features.length, 0);\n  });\n\n});\n"]}