{"version":3,"sources":["test/polymer/polymer-core-feature_test.ts"],"names":[],"mappings":"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","file":"polymer-core-feature_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as path from 'path';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {Visitor} from '../../javascript/estree-visitor';\nimport {JavaScriptParser} from '../../javascript/javascript-parser';\nimport {PolymerCoreFeatureScanner} from '../../polymer/polymer-core-feature-scanner';\nimport {FSUrlLoader} from '../../url-loader/fs-url-loader';\n\nsuite('PolymerCoreFeatureScanner', () => {\n\n  test('scans _addFeature calls and the Polymer.Base assignment', async() => {\n    const js = `\n      /** Feature A */\n      Polymer.Base._addFeature({\n        /** Method A */\n        methodA: function() {},\n        /** Prop A */\n        propA: []\n      });\n\n      /** Feature B */\n      Polymer.Base._addFeature({\n        methodB: function() {}\n      });\n\n      /** Polymer.Base declaration */\n      Polymer.Base = {\n        methodBase: function() {}\n      };\n\n      /** Invalid feature */\n      Polymer.Base._addFeature(null);\n\n      /** Not a feature at all */\n      Polymer.Base._somethingElse({\n        methodX: function() {}\n      });\n    `;\n\n    const parser = new JavaScriptParser();\n    const scanner = new PolymerCoreFeatureScanner();\n    const doc = parser.parse(js, 'features.js');\n    const visit = (visitor: Visitor) => Promise.resolve(doc.visit([visitor]));\n    const {features} = await scanner.scan(doc, visit);\n\n    assert.lengthOf(features, 4);\n    const [a, b, base, invalid] = features;\n\n    assert.equal(a.description, 'Feature A');\n    assert.deepEqual(a.warnings, []);\n    assert.deepEqual(\n        [...a.properties.values()].map(\n            ({name, type, description}) => ({name, type, description})),\n        [{\n          name: 'propA',\n          type: 'Array',\n          description: 'Prop A',\n        }]);\n    assert.deepEqual(\n        [...a.methods.values()].map(\n            ({name, type, description}) => ({name, type, description})),\n        [{\n          name: 'methodA',\n          type: 'Function',\n          description: 'Method A',\n        }]);\n\n    assert.equal(b.description, 'Feature B');\n    assert.deepEqual(b.warnings, []);\n    assert.deepEqual([...b.properties.values()], []);\n    assert.deepEqual(\n        [...b.methods.values()].map(\n            ({name, type, description}) => ({name, type, description})),\n        [{\n          name: 'methodB',\n          type: 'Function',\n          description: '',\n        }]);\n\n    assert.equal(base.description, 'Polymer.Base declaration');\n    assert.deepEqual(base.warnings, []);\n    assert.deepEqual([...base.properties.values()], []);\n    assert.deepEqual(\n        [...base.methods.values()].map(\n            ({name, type, description}) => ({name, type, description})),\n        [{\n          name: 'methodBase',\n          type: 'Function',\n          description: '',\n        }]);\n\n    assert.lengthOf(invalid.warnings, 1);\n  });\n\n  test('resolves the Polymer.Base class', async() => {\n    const analyzer = new Analyzer({\n      urlLoader: new FSUrlLoader(\n          // This directory contains files copied from Polymer 1.x core.\n          path.resolve(__dirname, '../static/polymer-core-feature/')),\n    });\n\n    const analysis = await analyzer.analyzePackage();\n    const features = analysis.getFeatures({id: 'Polymer.Base', kind: 'class'});\n    assert.equal(features.size, 1);\n    const polymerBase = features.values().next().value;\n    assert.equal(polymerBase.methods.size, 35);\n    assert.equal(polymerBase.properties.size, 2);\n\n    // A method from debounce.html\n    const debounce = polymerBase.methods.get('debounce');\n    assert.isDefined(debounce);\n    assert.equal(debounce!.privacy, 'public');\n    assert.equal(debounce!.params![0].name, 'jobName');\n\n    // A method from base.html\n    const addFeature = polymerBase.methods.get('_addFeature');\n    assert.isDefined(addFeature);\n    assert.equal(addFeature!.privacy, 'protected');\n\n    // A property from behaviors.html\n    const behaviors = polymerBase.properties.get('behaviors');\n    assert.isDefined(behaviors);\n  });\n});\n"]}