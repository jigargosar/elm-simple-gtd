var _jigargosar$elm_simple_gtd$LaunchBar_Update$fuzzyMatch = F2(
	function (needle, entity) {
		var match = function (n) {
			return A3(
				_tripokey$elm_fuzzy$Fuzzy$match,
				{ctor: '[]'},
				{ctor: '[]'},
				n);
		};
		var boil = _elm_community$string_extra$String_Extra$underscored;
		var boiledHay = function (_p0) {
			return boil(
				_jigargosar$elm_simple_gtd$LaunchBar_Models$getSearchItemName(_p0));
		}(entity);
		var boiledNeedle = boil(needle);
		return {
			ctor: '_Tuple2',
			_0: entity,
			_1: A2(match, boiledNeedle, boiledHay)
		};
	});
var _jigargosar$elm_simple_gtd$LaunchBar_Update$getFuzzyResults = F2(
	function (needle, _p1) {
		var _p2 = _p1;
		var projects = A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], _p2.activeProjects, _jigargosar$elm_simple_gtd$LaunchBar_Models$SI_Project);
		var contexts = A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], _p2.activeContexts, _jigargosar$elm_simple_gtd$LaunchBar_Models$SI_Context);
		var all = A2(
			_elm_lang$core$Basics_ops['++'],
			projects,
			A2(
				_elm_lang$core$Basics_ops['++'],
				contexts,
				{
					ctor: '::',
					_0: _jigargosar$elm_simple_gtd$LaunchBar_Models$SI_Projects,
					_1: {
						ctor: '::',
						_0: _jigargosar$elm_simple_gtd$LaunchBar_Models$SI_Contexts,
						_1: {ctor: '[]'}
					}
				}));
		return A2(
			_elm_lang$core$List$sortBy,
			function (_p3) {
				return function (_) {
					return _.score;
				}(
					_elm_lang$core$Tuple$second(_p3));
			},
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				all,
				_jigargosar$elm_simple_gtd$LaunchBar_Update$fuzzyMatch(needle)));
	});
var _jigargosar$elm_simple_gtd$LaunchBar_Update$updateInputHelp = F3(
	function (input, model, now) {
		return function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{updatedAt: now});
		}(
			_elm_lang$core$Native_Utils.update(
				model,
				{input: input}));
	});
var _jigargosar$elm_simple_gtd$LaunchBar_Update$updateInput = F3(
	function (config, input, model) {
		var now = config.now;
		var newInput = ((_elm_lang$core$Native_Utils.cmp(now - model.updatedAt, 1 * _elm_lang$core$Time$second) > 0) ? A3(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$AtMost(1),
			_elm_lang$core$Regex$regex(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'^',
					_elm_lang$core$Regex$escape(model.input))),
			function (_p4) {
				return '';
			}) : _elm_lang$core$Basics$identity)(input);
		return function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					searchResults: A2(_jigargosar$elm_simple_gtd$LaunchBar_Update$getFuzzyResults, input, config)
				});
		}(
			A3(_jigargosar$elm_simple_gtd$LaunchBar_Update$updateInputHelp, newInput, model, now));
	});
var _jigargosar$elm_simple_gtd$LaunchBar_Update$map = _Fresheyeball$elm_return$Return$map;
var _jigargosar$elm_simple_gtd$LaunchBar_Update$update = F2(
	function (config, msg) {
		return function (_p5) {
			return function () {
				var _p6 = msg;
				switch (_p6.ctor) {
					case 'NOOP':
						return _elm_lang$core$Basics$identity;
					case 'OnLBEnter':
						return _jigargosar$elm_simple_gtd$LaunchBar_Update$map(
							function (model) {
								return _elm_lang$core$Native_Utils.update(
									model,
									{
										maybeResult: _elm_lang$core$Maybe$Just(
											_jigargosar$elm_simple_gtd$LaunchBar_Models$Selected(_p6._0))
									});
							});
					case 'OnLBInputChanged':
						return _jigargosar$elm_simple_gtd$LaunchBar_Update$map(
							A2(_jigargosar$elm_simple_gtd$LaunchBar_Update$updateInput, config, _p6._1));
					case 'OnLBOpen':
						return function (_p7) {
							return _jigargosar$elm_simple_gtd$DomPorts$autoFocusInputCmd(
								A2(
									_jigargosar$elm_simple_gtd$LaunchBar_Update$map,
									function (m) {
										return _elm_lang$core$Native_Utils.update(
											m,
											{maybeResult: _elm_lang$core$Maybe$Nothing});
									},
									_p7));
						};
					default:
						return _jigargosar$elm_simple_gtd$LaunchBar_Update$map(
							function (m) {
								return _elm_lang$core$Native_Utils.update(
									m,
									{
										maybeResult: _elm_lang$core$Maybe$Just(_jigargosar$elm_simple_gtd$LaunchBar_Models$Canceled)
									});
							});
				}
			}()(
				_Fresheyeball$elm_return$Return$singleton(_p5));
		};
	});
var _jigargosar$elm_simple_gtd$LaunchBar_Update$Config = F3(
	function (a, b, c) {
		return {now: a, activeProjects: b, activeContexts: c};
	});
