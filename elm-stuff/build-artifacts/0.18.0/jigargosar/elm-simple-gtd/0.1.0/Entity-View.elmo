var _jigargosar$elm_simple_gtd$Entity_View$flatTodoListView = F2(
	function (title, todoListView) {
		var truncatedList = A2(_elm_lang$core$List$take, 75, todoListView);
		var count = _elm_lang$core$List$length(todoListView);
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: title,
				_1: A3(
					_elm_lang$html$Html_Keyed$node,
					'div',
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('todo-list collection'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: title,
							_1: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('collection-item'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h5,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(_jigargosar$elm_simple_gtd$View_Shared$badge, title, count),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								})
						},
						_1: truncatedList
					})
			},
			_1: {ctor: '[]'}
		};
	});
var _jigargosar$elm_simple_gtd$Entity_View$groupHeaderView = function (vm) {
	return _jigargosar$elm_simple_gtd$GroupDoc_View$initHeaderKeyed(vm);
};
var _jigargosar$elm_simple_gtd$Entity_View$groupView = F2(
	function (todoView, vm) {
		return A2(_jigargosar$elm_simple_gtd$GroupDoc_View$initKeyed, todoView, vm);
	});
var _jigargosar$elm_simple_gtd$Entity_View$keyedViewList = F3(
	function (grouping, maybeFocusInEntity, model) {
		var entityIdHasFocusIn = function (entityId) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					maybeFocusInEntity,
					_jigargosar$elm_simple_gtd$Entity$hasEntityId(entityId)),
				false);
		};
		var getTabIndexForEntityId = function (entityId) {
			return entityIdHasFocusIn(entityId) ? 0 : -1;
		};
		var createContextVM = function (_p0) {
			var _p1 = _p0;
			return A3(_jigargosar$elm_simple_gtd$GroupDoc_ViewModel$contextGroup, getTabIndexForEntityId, _p1.todoList, _p1.context);
		};
		var createProjectVM = function (_p2) {
			var _p3 = _p2;
			return A3(_jigargosar$elm_simple_gtd$GroupDoc_ViewModel$projectGroup, getTabIndexForEntityId, _p3.todoList, _p3.project);
		};
		var todoViewFromTodo = function (todo) {
			var isFocusable = entityIdHasFocusIn(
				_jigargosar$elm_simple_gtd$EntityId$fromTodo(todo));
			return _jigargosar$elm_simple_gtd$Todo_View$keyedItem(
				A3(_jigargosar$elm_simple_gtd$Todo_View$createTodoViewModel, model, isFocusable, todo));
		};
		var multiContextView = function (list) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				list,
				function (_p4) {
					return A2(
						_jigargosar$elm_simple_gtd$Entity_View$groupView,
						todoViewFromTodo,
						createContextVM(_p4));
				});
		};
		var multiProjectView = function (list) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
				list,
				function (_p5) {
					return A2(
						_jigargosar$elm_simple_gtd$Entity_View$groupView,
						todoViewFromTodo,
						createProjectVM(_p5));
				});
		};
		var todoListView = _elm_lang$core$List$map(todoViewFromTodo);
		var _p6 = grouping;
		switch (_p6.ctor) {
			case 'ContextRoot':
				var header = _jigargosar$elm_simple_gtd$Entity_View$groupHeaderView(
					createContextVM(_p6._0));
				return {
					ctor: '::',
					_0: header,
					_1: multiProjectView(_p6._1)
				};
			case 'ProjectRoot':
				var header = _jigargosar$elm_simple_gtd$Entity_View$groupHeaderView(
					createProjectVM(_p6._0));
				return {
					ctor: '::',
					_0: header,
					_1: multiContextView(_p6._1)
				};
			case 'ContextForest':
				return multiContextView(_p6._0);
			case 'ProjectForest':
				return multiProjectView(_p6._0);
			default:
				return A2(
					_jigargosar$elm_simple_gtd$Entity_View$flatTodoListView,
					_p6._0,
					todoListView(_p6._1));
		}
	});
var _jigargosar$elm_simple_gtd$Entity_View$getMaybeFocusInEntity = F2(
	function (entityList, model) {
		return A2(
			_elm_community$maybe_extra$Maybe_Extra$orElse,
			_elm_lang$core$List$head(entityList),
			A2(
				_elm_community$list_extra$List_Extra$find,
				_jigargosar$elm_simple_gtd$Entity$equalById(model.focusInEntity),
				entityList));
	});
var _jigargosar$elm_simple_gtd$Entity_View$list = F2(
	function (viewType, model) {
		var grouping = A2(_jigargosar$elm_simple_gtd$Stores$createGrouping, viewType, model);
		var entityList = _jigargosar$elm_simple_gtd$Entity_Tree$flatten(grouping);
		var maybeFocusInEntity = A2(_jigargosar$elm_simple_gtd$Entity_View$getMaybeFocusInEntity, entityList, model);
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('entity-list focusable-list'),
				_1: {
					ctor: '::',
					_0: _jigargosar$elm_simple_gtd$X_Keyboard$onKeyDown(
						_jigargosar$elm_simple_gtd$Msg$OnEntityListKeyDown(entityList)),
					_1: {ctor: '[]'}
				}
			},
			A3(_jigargosar$elm_simple_gtd$Entity_View$keyedViewList, grouping, maybeFocusInEntity, model));
	});
