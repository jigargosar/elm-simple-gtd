{"version":3,"sources":["src/messaging/models/db-interface.ts"],"names":["DBInterface","dbName","dbVersion","errorFactory_","map","dbName_","dbVersion_","openDbPromise_","TRANSACTION_READ_WRITE","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","error","onsuccess","result","onupgradeneeded","db","onDBUpgrade","then","close","create","codes","SHOULD_BE_INHERITED"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAEA;;AAEA;;;;;;;;IAEcA,W;AAQZ;;;;AAIA,yBAAYC,MAAZ,EAAoBC,SAApB,EAA6B;AAAA;;AAC3B,aAAKC,aAAL,GAAqB,yBAAiB,WAAjB,EAA8B,WAA9B,EAA2C,iBAAOC,GAAlD,CAArB;AACA,aAAKC,OAAL,GAAeJ,MAAf;AACA,aAAKK,UAAL,GAAkBJ,SAAlB;AACA,aAAKK,cAAL,GAAsB,IAAtB;AACA,aAAKC,sBAAL,GAA8B,WAA9B;AACD;AAED;;;;;;;;;uCAKY;AAAA;;AACV,gBAAI,KAAKD,cAAT,EAAyB;AACvB,uBAAO,KAAKA,cAAZ;AACD;AAED,iBAAKA,cAAL,GAAsB,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AAChD,oBAAMC,UAAUC,UAAUC,IAAV,CAAe,MAAKT,OAApB,EAA6B,MAAKC,UAAlC,CAAhB;AACAM,wBAAQG,OAAR,GAAkB,UAACC,KAAD,EAAM;AACtBL,2BAAqBK,MAAMC,MAAN,CAAcC,KAAnC;AACD,iBAFD;AAGAN,wBAAQO,SAAR,GAAoB,iBAAK;AACvBT,4BAAsBM,MAAMC,MAAN,CAAcG,MAApC;AACD,iBAFD;AAGAR,wBAAQS,eAAR,GAA0B,iBAAK;AAC7B,wBAAIC,KAAmBN,MAAMC,MAAN,CAAcG,MAArC;AACA,0BAAKG,WAAL,CAAiBD,EAAjB;AACD,iBAHD;AAID,aAZqB,CAAtB;AAcA,mBAAO,KAAKf,cAAZ;AACD;AAED;;;;;;;wCAIa;AAAA;;AACX,mBAAOE,QAAQC,OAAR,GACJc,IADI,CACC,YAAA;AACJ,oBAAI,OAAKjB,cAAT,EAAyB;AACvB,2BAAO,OAAKA,cAAL,CAAoBiB,IAApB,CAAyB,cAAE;AAChCF,2BAAGG,KAAH;AACA,+BAAKlB,cAAL,GAAsB,IAAtB;AACD,qBAHM,CAAP;AAID;AACF,aARI,CAAP;AASD;AAED;;;;;;;sCAIc;AACZ,kBAAM,KAAKJ,aAAL,CAAmBuB,MAAnB,CAA0B,iBAAOC,KAAP,CAAaC,mBAAvC,CAAN;AACD;;;;;;kBArEW5B,W","file":"db-interface.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n\nimport {ErrorFactory} from '../../app/errors';\n\nimport Errors from './errors';\n\nexport default class DBInterface {\n\n  private dbName_: string;\n  private dbVersion_: number;\n  private openDbPromise_: Promise<IDBDatabase>;\n  protected errorFactory_: ErrorFactory<string>;\n  protected TRANSACTION_READ_WRITE: string;\n\n  /**\n   * @param {string} dbName\n   * @param {number} dbVersion\n   */\n  constructor(dbName, dbVersion) {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n    this.dbName_ = dbName;\n    this.dbVersion_ = dbVersion;\n    this.openDbPromise_ = null;\n    this.TRANSACTION_READ_WRITE = 'readwrite';\n  }\n\n  /**\n   * Get the indexedDB as a promsie.\n   * @protected\n   * @return {!Promise<!IDBDatabase>} The IndexedDB database\n   */\n  openDatabase() {\n    if (this.openDbPromise_) {\n      return this.openDbPromise_;\n    }\n\n    this.openDbPromise_ = new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName_, this.dbVersion_);\n      request.onerror = (event) => {\n        reject((<IDBRequest> event.target).error);\n      };\n      request.onsuccess = event => {\n        resolve((<IDBRequest> event.target).result);\n      };\n      request.onupgradeneeded = event => {\n        var db = (<IDBRequest> event.target).result;\n        this.onDBUpgrade(db);\n      };\n    });\n\n    return this.openDbPromise_;\n  }\n\n  /**\n   * Close the currently open database.\n   * @return {!Promise} Returns the result of the promise chain.\n   */\n  closeDatabase() {\n    return Promise.resolve()\n      .then(() => {\n        if (this.openDbPromise_) {\n          return this.openDbPromise_.then(db => {\n            db.close();\n            this.openDbPromise_ = null;\n          });\n        }\n      });\n  }\n\n  /**\n   * @protected\n   * @param {!IDBDatabase} db\n   */\n  onDBUpgrade(db) {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n}\n"]}