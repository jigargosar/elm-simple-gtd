"use strict";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __asyncValues = (this && this.__asyncIterator) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), q = [], c, i;
    return i = { next: verb("next"), "throw": verb("throw"), "return": verb("return") }, i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { return function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]), next(); }); }; }
    function next() { if (!c && q.length) resume((c = q.shift())[0], c[1]); }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(c[3], e); } }
    function step(r) { r.done ? settle(c[2], r) : Promise.resolve(r.value[1]).then(r.value[0] === "yield" ? send : fulfill, reject); }
    function send(value) { settle(c[2], { value: value, done: false }); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { c = void 0, f(v), next(); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const dom5 = require("dom5");
const parse5 = require("parse5");
const streams_1 = require("./streams");
const baseMatcher = dom5.predicates.hasTagName('base');
/**
 * Find a `<base>` tag in the specified file and if found, update its `href`
 * with the given new value.
 */
class BaseTagUpdater extends streams_1.AsyncTransformStream {
    constructor(filePath, newHref) {
        super({ objectMode: true });
        this.filePath = filePath;
        this.newHref = newHref;
    }
    _transformIter(files) {
        return __asyncGenerator(this, arguments, function* _transformIter_1() {
            try {
                for (var files_1 = __asyncValues(files), files_1_1 = yield ["await", files_1.next()]; !files_1_1.done; files_1_1 = yield ["await", files_1.next()]) {
                    const file = files_1_1.value;
                    if (file.path !== this.filePath) {
                        yield ["yield", file];
                        continue;
                    }
                    const contents = yield ["await", streams_1.getFileContents(file)];
                    const parsed = parse5.parse(contents, { locationInfo: true });
                    const base = dom5.query(parsed, baseMatcher);
                    if (!base || dom5.getAttribute(base, 'href') === this.newHref) {
                        yield ["yield", file];
                        continue;
                    }
                    dom5.setAttribute(base, 'href', this.newHref);
                    dom5.removeFakeRootElements(parsed);
                    const updatedFile = file.clone();
                    updatedFile.contents = new Buffer(parse5.serialize(parsed), 'utf-8');
                    yield ["yield", updatedFile];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (files_1_1 && !files_1_1.done && (_a = files_1.return)) yield ["await", _a.call(files_1)];
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _a;
        });
    }
}
exports.BaseTagUpdater = BaseTagUpdater;
