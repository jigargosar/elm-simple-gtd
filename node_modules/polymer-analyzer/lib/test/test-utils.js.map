{"version":3,"sources":["test/test-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,0CAAqC;AAErC,iEAAsE;AAEtE,gEAA0D;AAG1D,+BAAuC,SAAQ,KAAK;IAElD,YAAY,OAAe,EAAE,aAAkB;QAC7C,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;CACF;AAND,8DAMC;AAED,uBAAoC,OAAqB;;QACvD,IAAI,KAAU,CAAC;QACf,IAAI,CAAC;YACH,KAAK,GAAG,MAAM,OAAO,CAAC;QACxB,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,CAAC,CAAC;QACX,CAAC;QACD,MAAM,IAAI,yBAAyB,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;IAC1E,CAAC;CAAA;AARD,sCAQC;AAID;;;;;GAKG;AACH;IAEE,YAAY,SAAoB;QAC9B,IAAI,CAAC,cAAc;YACf,IAAI,gCAAc,CAAC,IAAW,EAAE,EAAC,QAAQ,EAAE,IAAI,mBAAQ,CAAC,EAAC,SAAS,EAAC,CAAC,EAAC,CAAC,CAAC;IAC7E,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW,EAAE,QAAgB;QAC9C,MAAM,SAAS,GAAG,IAAI,yCAAwB,EAAE,CAAC;QACjD,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAWK,SAAS,CAAC,UAAiC;;YAC/C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC7B,MAAM,CAAC,wBAAwB,CAAC;gBAClC,CAAC;gBACD,MAAM,WAAW,GACb,SAAS,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,WAAW,GAAG,UAAU,CAAC;gBAChE,MAAM,CAAC,IAAI,IAAG,MAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAA,CAAC;YACzE,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC;KAAA;CACF;AAjCD,wCAiCC;AAED,mBAAmB,IAAyB;IAC1C,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC;AACxB,CAAC","file":"test-utils.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Analyzer} from '../analyzer';\nimport {SourceRange, Warning} from '../model/model';\nimport {InMemoryOverlayUrlLoader} from '../url-loader/overlay-loader';\nimport {UrlLoader} from '../url-loader/url-loader';\nimport {WarningPrinter} from '../warning/warning-printer';\n\n\nexport class UnexpectedResolutionError extends Error {\n  resolvedValue: any;\n  constructor(message: string, resolvedValue: any) {\n    super(message);\n    this.resolvedValue = resolvedValue;\n  }\n}\n\nexport async function invertPromise(promise: Promise<any>): Promise<any> {\n  let value: any;\n  try {\n    value = await promise;\n  } catch (e) {\n    return e;\n  }\n  throw new UnexpectedResolutionError('Inverted Promise resolved', value);\n}\n\nexport type Reference = Warning | SourceRange | undefined;\n\n/**\n * Used for asserting that warnings or source ranges correspond to the right\n * parts of the source code.\n *\n * Non-test code probably wants WarningPrinter instead.\n */\nexport class CodeUnderliner {\n  warningPrinter: WarningPrinter;\n  constructor(urlLoader: UrlLoader) {\n    this.warningPrinter =\n        new WarningPrinter(null as any, {analyzer: new Analyzer({urlLoader})});\n  }\n\n  static withMapping(url: string, contents: string) {\n    const urlLoader = new InMemoryOverlayUrlLoader();\n    urlLoader.urlContentsMap.set(url, contents);\n    return new CodeUnderliner(urlLoader);\n  }\n\n  /**\n   * Converts one or more warnings/source ranges into underlined text.\n   *                                                  ~~~~~~~~~~ ~~~~\n   *\n   * This has a loose set of types that it will accept in order to make\n   * writing tests simple and legible.\n   */\n  async underline(reference: Reference): Promise<string>;\n  async underline(references: Reference[]): Promise<string[]>;\n  async underline(references: Reference|Reference[]): Promise<string|string[]> {\n    if (!Array.isArray(references)) {\n      if (references === undefined) {\n        return 'No source range given.';\n      }\n      const sourceRange =\n          isWarning(references) ? references.sourceRange : references;\n      return '\\n' + await this.warningPrinter.getUnderlinedText(sourceRange);\n    }\n    return Promise.all(references.map((ref) => this.underline(ref)));\n  }\n}\n\nfunction isWarning(wOrS: Warning|SourceRange): wOrS is Warning {\n  return 'code' in wOrS;\n}\n"]}