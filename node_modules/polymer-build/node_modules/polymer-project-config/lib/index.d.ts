/**
 * The default globs for matching all user application source files.
 */
export declare const defaultSourceGlobs: string[];
export interface ProjectBuildOptions {
    /**
     * The name of this build, used to determine the output directory name.
     */
    name?: string;
    /**
     * Generate a service worker for your application to cache all files and
     * assets on the client.
     *
     * Polymer CLI will generate a service worker for your build using the
     * [sw-precache library](https://github.com/GoogleChrome/sw-precache). To
     * customize your service worker, create a sw-precache-config.js file in your
     * project directory that exports your configuration. See the [sw-precache
     * README](https://github.com/GoogleChrome/sw-precache) for a list of all
     * supported options.
     *
     * Note that the sw-precache library uses a cache-first strategy for maximum
     * speed and makes some other assumptions about how your service worker should
     * behave. Read the "Considerations" section of the sw-precache README to make
     * sure that this is suitable for your application.
     */
    addServiceWorker?: boolean;
    /**
     * If `true`, generate an [HTTP/2 Push
     * Manifest](https://github.com/GoogleChrome/http2-push-manifest) for your
     * application.
     */
    addPushManifest?: boolean;
    /**
     * A config file that's passed to the [sw-precache
     * library](https://github.com/GoogleChrome/sw-precache). See [its
     * README](https://github.com/GoogleChrome/sw-precache) for details of the
     * format of this file.
     *
     * Ignored if `addServiceWorker` is not `true`.
     *
     * Defaults to `"sw-precache-config.js`.
     */
    swPrecacheConfig?: string;
    /**
     * Insert prefetch link elements into your fragments so that all dependencies
     * are prefetched immediately. Add dependency prefetching by inserting `<link
     * rel="prefetch">` tags into entrypoint and `<link rel="import">` tags into
     * fragments and shell for all dependencies.
     */
    insertPrefetchLinks?: boolean;
    /**
     * By default, fragments are unbundled. This is optimal for HTTP/2-compatible
     * servers and clients.
     *
     * If the --bundle flag is supplied, all fragments are bundled together to
     * reduce the number of file requests. This is optimal for sending to clients
     * or serving from servers that are not HTTP/2 compatible.
     */
    bundle?: boolean;
    /** Options for processing HTML. */
    html?: {
        /** Minify HTMl by removing comments and whitespace. */
        minify?: boolean;
    };
    /** Options for processing CSS. */
    css?: {
        /** Minify inlined and external CSS. */
        minify?: boolean;
    };
    /** Options for processing JavaScript. */
    js?: {
        /** Minify inlined and external JavaScript. */
        minify?: boolean;
        /** Use babel to compile all ES6 JS down to ES5 for older browsers. */
        compile?: boolean;
    };
}
export interface LintOptions {
    /**
     * The lint rules to run. Can be the code of a collection of rules like
     * "polymer-2" or an individual rule like "dom-module-invalid-attrs".
     */
    rules: string[];
    /**
     * Warnings to ignore. After the rules are run, any warning that matches
     * one of these codes is ignored, project-wide.
     */
    ignoreWarnings?: string[];
}
export interface ProjectOptions {
    /**
     * Path to the root of the project on the filesystem. This can be an absolute
     * path, or a path relative to the current working directory. Defaults to the
     * current working directory of the process.
     */
    root?: string;
    /**
     * The path relative to `root` of the entrypoint file that will be served for
     * app-shell style projects. Usually this is index.html.
     */
    entrypoint?: string;
    /**
     * The path relative to `root` of the app shell element.
     */
    shell?: string;
    /**
     * The path relative to `root` of the lazily loaded fragments. Usually the
     * pages of an app or other bundles of on-demand resources.
     */
    fragments?: string[];
    /**
     * List of glob patterns, relative to root, of this project's sources to read
     * from the file system.
     */
    sources?: string[];
    /**
     * List of file paths, relative to the project directory, that should be
     * included as extraDependencies in the build target.
     */
    extraDependencies?: string[];
    /**
     * List of build option configurations.
     */
    builds?: ProjectBuildOptions[];
    /**
     * Options for the Polymer Linter.
     */
    lint?: LintOptions;
}
export declare class ProjectConfig {
    readonly root: string;
    readonly entrypoint: string;
    readonly shell?: string;
    readonly fragments: string[];
    readonly sources: string[];
    readonly extraDependencies: string[];
    readonly builds: ProjectBuildOptions[];
    readonly allFragments: string[];
    readonly lint: LintOptions | undefined;
    /**
     * Given an absolute file path to a polymer.json-like ProjectOptions object,
     * read that file. If no file exists, null is returned. If the file exists
     * but there is a problem reading or parsing it, throw an exception.
     *
     * TODO: make this method and the one below async.
     */
    static loadOptionsFromFile(filepath: string): ProjectOptions;
    /**
     * Given an absolute file path to a polymer.json-like ProjectOptions object,
     * return a new ProjectConfig instance created with those options.
     */
    static loadConfigFromFile(filepath: string): ProjectConfig;
    /**
     * constructor - given a ProjectOptions object, create the correct project
     * configuration for those options. This involves setting the correct
     * defaults, validating options, warning on deprecated options, and
     * calculating some additional properties.
     */
    constructor(options: ProjectOptions);
    isFragment(filepath: string): boolean;
    isShell(filepath: string): boolean;
    isSource(filepath: string): boolean;
    /**
     * Validates that a configuration is accurate, and that all paths are
     * contained within the project root.
     */
    validate(): boolean;
}
