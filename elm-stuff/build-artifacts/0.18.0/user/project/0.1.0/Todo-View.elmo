var _user$project$Todo_View$contextMenu = _user$project$Todo_View_Menu$context;
var _user$project$Todo_View$projectMenu = _user$project$Todo_View_Menu$project;
var _user$project$Todo_View$editView = function (edit) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('vertical layout flex-auto'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('flex'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('input-field'),
								_1: {
									ctor: '::',
									_0: _user$project$Ext_Keyboard$onKeyDownStopPropagation(
										function (_p0) {
											return _user$project$Model$commonMsg.noOp;
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$textarea,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('materialize-textarea auto-focus'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$defaultValue(edit.todo.text),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(edit.onTodoTextChanged),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$label,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Todo'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _user$project$View_Shared$defaultOkCancelDeleteButtons(edit.onDeleteClicked),
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	};
};
var _user$project$Todo_View$createEditTodoViewModel = F2(
	function (form, todo) {
		var updateTodoFormMsg = _user$project$Model$UpdateTodoForm(form);
		var todoId = form.id;
		return {
			todo: {text: form.todoText},
			onTodoTextChanged: function (_p1) {
				return updateTodoFormMsg(
					_user$project$Todo_Form$SetText(_p1));
			},
			onDeleteClicked: A2(
				_user$project$Model$OnEntityAction,
				_user$project$Entity$TodoEntity(todo),
				_user$project$Entity$ToggleDeleted)
		};
	});
var _user$project$Todo_View$createReminderViewModel = F2(
	function (vc, todo) {
		var dueAt = _user$project$Todo$getMaybeDueAt(todo);
		var smartFormat = _user$project$Ext_Time$smartFormat(vc.now);
		var overDueText = 'Overdue';
		var formatReminderTime = function (time) {
			var now = _elm_lang$core$Date$fromTime(vc.now);
			var due = _elm_lang$core$Date$fromTime(time);
			return (_elm_lang$core$Native_Utils.cmp(time, vc.now) < 0) ? overDueText : A2(_user$project$Ext_Time$smartFormat, vc.now, time);
		};
		var displayText = A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				_user$project$Todo$getMaybeTime(todo),
				formatReminderTime),
			'');
		var maybeTodoReminderForm = vc.getMaybeTodoReminderFormForTodo(todo);
		var form = A3(
			_elm_community$maybe_extra$Maybe_Extra$unpack,
			function (_p2) {
				return A2(_user$project$Todo_ReminderForm$create, todo, vc.now);
			},
			_elm_lang$core$Basics$identity,
			maybeTodoReminderForm);
		var updateReminderForm = _user$project$Model$UpdateReminderForm(form);
		var isDropdownOpen = _elm_community$maybe_extra$Maybe_Extra$isJust(maybeTodoReminderForm);
		return {
			isDropdownOpen: isDropdownOpen,
			date: form.date,
			time: form.time,
			displayText: displayText,
			isOverDue: _elm_lang$core$Native_Utils.eq(displayText, overDueText),
			isSnoozed: _user$project$Todo$isSnoozed(todo),
			dueAtToolTipText: A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					_user$project$Todo$getMaybeDueAt(todo),
					_user$project$Ext_Time$formatDateTime),
				''),
			dayDiffInWords: A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					dueAt,
					_user$project$Ext_Time$dayDiffInWords(vc.now)),
				''),
			onDateChanged: function (_p3) {
				return updateReminderForm(
					_user$project$Todo_ReminderForm$SetDate(_p3));
			},
			onTimeChanged: function (_p4) {
				return updateReminderForm(
					_user$project$Todo_ReminderForm$SetTime(_p4));
			},
			startEditingMsg: _user$project$Model$StartEditingReminder(todo)
		};
	});
var _user$project$Todo_View$editScheduleButton = function (vm) {
	return A2(
		_edvail$elm_polymer$Polymer_Paper$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id(
				A2(_elm_lang$core$Basics_ops['++'], 'edit-schedule-buton-', vm.key)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'height', '24px'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('small padding-0 margin-0 shrink'),
					_1: {
						ctor: '::',
						_0: vm.tabindexAV,
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_user$project$Material$iconButton,
				'clock',
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Todo_View$projectProjectButton = function (vm) {
	return A2(
		_edvail$elm_polymer$Polymer_Paper$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id(
				A2(_elm_lang$core$Basics_ops['++'], 'edit-project-buton-', vm.key)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'height', '24px'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('small padding-0 margin-0 shrink'),
					_1: {
						ctor: '::',
						_0: vm.tabindexAV,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(vm.showProjectDropdownMsg),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('title primary-text-color'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(vm.projectDisplayName),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Todo_View$editContextButton = function (vm) {
	return A2(
		_edvail$elm_polymer$Polymer_Paper$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id(
				A2(_elm_lang$core$Basics_ops['++'], 'edit-context-buton-', vm.key)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'height', '24px'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('small padding-0 margin-0 shrink'),
					_1: {
						ctor: '::',
						_0: vm.tabindexAV,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(vm.showContextDropdownMsg),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('title primary-text-color'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(vm.contextDisplayName),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Todo_View$doneIconButton = function (vm) {
	return A2(
		_edvail$elm_polymer$Polymer_Paper$iconButton,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'done-icon done-',
					_elm_lang$core$Basics$toString(vm.isDone))),
			_1: {
				ctor: '::',
				_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(vm.toggleDoneMsg),
				_1: {
					ctor: '::',
					_0: _user$project$WebComponents$iconA('done'),
					_1: {
						ctor: '::',
						_0: vm.tabindexAV,
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Todo_View$getDisplayText = function (todo) {
	var trimAndReplaceEmptyWithDefault = A2(
		_user$project$Ext_Function_Infix_ops['>>?='],
		function (_p5) {
			return _elm_community$string_extra$String_Extra$nonEmpty(
				_elm_lang$core$String$trim(_p5));
		},
		'< empty >');
	var tripleNewLineAndRestRegex = _elm_lang$core$Regex$regex('\\n\\n\\n(.|\n)*');
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$AtMost(1),
		tripleNewLineAndRestRegex,
		function (match) {
			return '\n...';
		},
		trimAndReplaceEmptyWithDefault(
			_user$project$Todo$getText(todo)));
};
var _user$project$Todo_View$createTodoViewModel = F3(
	function (vc, tabindexAV, todo) {
		var maybeEditTodoForm = vc.getMaybeEditTodoFormForTodo(todo);
		var maybeEditVM = A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
			maybeEditTodoForm,
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Todo_View$createEditTodoViewModel, todo));
		var createEntityActionMsg = _user$project$Model$OnEntityAction(
			_user$project$Entity$TodoEntity(todo));
		var startEditingMsg = createEntityActionMsg(_user$project$Entity$StartEditing);
		var toggleDeleteMsg = createEntityActionMsg(_user$project$Entity$ToggleDeleted);
		var contextId = _user$project$Todo$getContextId(todo);
		var projectId = _user$project$Todo$getProjectId(todo);
		var truncateName = _elm_community$string_extra$String_Extra$ellipsis(15);
		var projectDisplayName = A2(
			_elm_lang$core$String$append,
			'#',
			truncateName(
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_user$project$Ext_Function_Infix_ops['>>?'],
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _elm_lang$core$Dict$get, vc.projectByIdDict),
						_user$project$Project$getName)(projectId),
					'')));
		var contextDisplayName = truncateName(
			A2(
				_elm_lang$core$String$append,
				'@',
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_user$project$Ext_Function_Infix_ops['>>?'],
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _elm_lang$core$Dict$get, vc.contextByIdDict),
						_user$project$Context$getName)(contextId),
					'Inbox')));
		var todoId = _user$project$Document$getId(todo);
		var toggleDoneMsg = _user$project$Model$ToggleTodoDone(todoId);
		var onKeyDownMsg = function (_p6) {
			var _p7 = _p6;
			if (_user$project$Ext_Keyboard$isNoSoftKeyDown(_p7)) {
				var _p8 = _p7.key;
				switch (_p8.ctor) {
					case 'Space':
						return createEntityActionMsg(_user$project$Entity$ToggleSelected);
					case 'CharE':
						return startEditingMsg;
					case 'CharD':
						return toggleDoneMsg;
					case 'Delete':
						return toggleDeleteMsg;
					case 'CharP':
						return _user$project$Model$StartEditingProject(todo);
					case 'CharC':
						return _user$project$Model$StartEditingContext(todo);
					case 'CharG':
						return createEntityActionMsg(_user$project$Entity$Goto);
					case 'CharS':
						return _user$project$Model$onTodoInitRunning(todoId);
					default:
						return _user$project$Model$commonMsg.noOp;
				}
			} else {
				return _user$project$Model$commonMsg.noOp;
			}
		};
		return {
			isDone: _user$project$Todo$isDone(todo),
			key: todoId,
			isDeleted: _user$project$Todo$getDeleted(todo),
			onKeyDownMsg: onKeyDownMsg,
			displayText: _user$project$Todo_View$getDisplayText(todo),
			projectDisplayName: projectDisplayName,
			contextDisplayName: contextDisplayName,
			setContextMsg: A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$SetTodoContext, todo),
			setProjectMsg: A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$SetTodoProject, todo),
			showContextDropdownMsg: _user$project$Model$StartEditingContext(todo),
			showProjectDropdownMsg: _user$project$Model$StartEditingProject(todo),
			startEditingMsg: startEditingMsg,
			toggleDoneMsg: toggleDoneMsg,
			reminder: A2(_user$project$Todo_View$createReminderViewModel, vc, todo),
			edit: maybeEditVM,
			isEditing: _elm_community$maybe_extra$Maybe_Extra$isJust(maybeEditVM),
			onDeleteClicked: toggleDeleteMsg,
			onFocusIn: createEntityActionMsg(_user$project$Entity$OnFocusIn),
			tabindexAV: tabindexAV,
			isSelected: A2(_elm_lang$core$Set$member, todoId, vc.selectedEntityIdSet)
		};
	});
var _user$project$Todo_View$dropdownTrigger = F2(
	function (_p9, content) {
		var _p10 = _p9;
		return A2(
			_edvail$elm_polymer$Polymer_Paper$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'height', '24px'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _user$project$WebComponents$slotDropdownTrigger,
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('small padding-0 margin-0 shrink'),
						_1: {
							ctor: '::',
							_0: _p10.tabindexAV,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('title primary-text-color'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: content,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Todo_View$reminderView = function (vm) {
	var reminderVM = vm.reminder;
	var reminderTrigger = _elm_lang$core$Native_Utils.eq(reminderVM.displayText, '') ? A2(
		_user$project$WebComponents$iconButton,
		'alarm-add',
		{
			ctor: '::',
			_0: vm.tabindexAV,
			_1: {
				ctor: '::',
				_0: _user$project$WebComponents$slotDropdownTrigger,
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(reminderVM.startEditingMsg),
					_1: {ctor: '[]'}
				}
			}
		}) : A2(
		_user$project$Todo_View$dropdownTrigger,
		vm,
		A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(reminderVM.startEditingMsg),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'reminder-text', true),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'overdue', reminderVM.isOverDue),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_user$project$WebComponents$icon,
					'av:snooze',
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'display-none', !reminderVM.isSnoozed),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(reminderVM.displayText),
					_1: {ctor: '[]'}
				}
			}));
	var menuButton = A2(
		_edvail$elm_polymer$Polymer_Paper$menuButton,
		{
			ctor: '::',
			_0: A2(_edvail$elm_polymer$Polymer_Attributes$boolProperty, 'opened', reminderVM.isDropdownOpen),
			_1: {
				ctor: '::',
				_0: A2(_edvail$elm_polymer$Polymer_Attributes$boolProperty, 'dynamicAlign', true),
				_1: {
					ctor: '::',
					_0: A2(_edvail$elm_polymer$Polymer_Attributes$boolProperty, 'stopKeyboardEventPropagation', true),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: reminderTrigger,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('static'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'slot', 'dropdown-content'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('font-subhead'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select date and time'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_edvail$elm_polymer$Polymer_Paper$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('date'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$classList(
											{
												ctor: '::',
												_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'auto-focus', reminderVM.isDropdownOpen),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _user$project$WebComponents$labelA('Date'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(reminderVM.date),
												_1: {
													ctor: '::',
													_0: A2(_edvail$elm_polymer$Polymer_Attributes$boolProperty, 'stopKeyboardEventPropagation', true),
													_1: {
														ctor: '::',
														_0: _user$project$WebComponents$onChange(reminderVM.onDateChanged),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_edvail$elm_polymer$Polymer_Paper$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('time'),
										_1: {
											ctor: '::',
											_0: _user$project$WebComponents$labelA('Time'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(reminderVM.time),
												_1: {
													ctor: '::',
													_0: A2(_edvail$elm_polymer$Polymer_Attributes$boolProperty, 'stopKeyboardEventPropagation', true),
													_1: {
														ctor: '::',
														_0: _user$project$WebComponents$onChange(reminderVM.onTimeChanged),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: _user$project$View_Shared$defaultOkCancelButtons,
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
	var timeToolTip = A2(
		_edvail$elm_polymer$Polymer_Paper$tooltip,
		{
			ctor: '::',
			_0: A2(_elm_community$html_extra$Html_Attributes_Extra$intProperty, 'offset', 0),
			_1: {ctor: '[]'}
		},
		(!_elm_lang$core$Native_Utils.eq(reminderVM.dueAtToolTipText, '')) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('tooltip'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('font-body1 font-nowrap'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(reminderVM.dueAtToolTipText),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('font-caption'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(reminderVM.dayDiffInWords),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		} : {ctor: '[]'});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'position', 'relative'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: menuButton,
			_1: {
				ctor: '::',
				_0: timeToolTip,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Todo_View$defaultView = function (vm) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(''),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(vm.startEditingMsg),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _user$project$Todo_View$doneIconButton(vm),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('display-text'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(vm.displayText),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('layout horizontal end-justified'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Todo_View$reminderView(vm),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'padding', '0 8px'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$Todo_View$editContextButton(vm),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'padding', '0 8px'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$Todo_View$projectProjectButton(vm),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	};
};
var _user$project$Todo_View$init = function (vm) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'todo-item', true),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'selected', vm.isSelected),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'editing', vm.isEditing),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Events$onFocusIn(vm.onFocusIn),
				_1: {
					ctor: '::',
					_0: vm.tabindexAV,
					_1: {
						ctor: '::',
						_0: _user$project$Ext_Keyboard$onKeyDown(vm.onKeyDownMsg),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-key', vm.key),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		A3(
			_elm_community$maybe_extra$Maybe_Extra$unpack,
			function (_p11) {
				return _user$project$Todo_View$defaultView(vm);
			},
			_user$project$Todo_View$editView,
			vm.edit));
};
var _user$project$Todo_View$initKeyed = function (vm) {
	return {
		ctor: '_Tuple2',
		_0: vm.key,
		_1: _user$project$Todo_View$init(vm)
	};
};
var _user$project$Todo_View$TodoViewModel = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return {key: a, displayText: b, isDone: c, isDeleted: d, onKeyDownMsg: e, projectDisplayName: f, contextDisplayName: g, setContextMsg: h, setProjectMsg: i, startEditingMsg: j, toggleDoneMsg: k, onDeleteClicked: l, showContextDropdownMsg: m, showProjectDropdownMsg: n, reminder: o, edit: p, isEditing: q, onFocusIn: r, tabindexAV: s, isSelected: t};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Todo_View$ReminderViewModel = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {isDropdownOpen: a, date: b, time: c, displayText: d, isOverDue: e, isSnoozed: f, dueAtToolTipText: g, dayDiffInWords: h, onDateChanged: i, onTimeChanged: j, startEditingMsg: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Todo_View$EditViewModel = F3(
	function (a, b, c) {
		return {todo: a, onTodoTextChanged: b, onDeleteClicked: c};
	});
