{"version":3,"sources":["test/url-loader/redirect-resolver_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAA4B;AAE5B,0EAAoE;AAGpE,KAAK,CAAC,kBAAkB,EAAE;IAExB,KAAK,CAAC,YAAY,EAAE;QAElB,IAAI,CAAC,wDAAwD,EAAE;YAC7D,MAAM,QAAQ,GAAG,IAAI,oCAAgB,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YACpE,aAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,6BAA6B,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2DAA2D,EAAE;YAChE,MAAM,QAAQ,GAAG,IAAI,oCAAgB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAC7D,aAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE;YACvD,MAAM,QAAQ,GAAG,IAAI,oCAAgB,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YACpE,aAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;YAC5D,aAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,SAAS,EAAE;QACf,IAAI,CAAC,qCAAqC,EAAE;YAC1C,MAAM,QAAQ,GAAG,IAAI,oCAAgB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YACrE,aAAM,CAAC,KAAK,CACR,QAAQ,CAAC,OAAO,CAAC,6BAA6B,CAAC,EAC/C,0BAA0B,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,0CAA0C,EAAE;YAC/C,MAAM,QAAQ,GAAG,IAAI,oCAAgB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YACrE,aAAM,CAAC,MAAM,CACT,MAAM,QAAQ,CAAC,OAAO,CAAC,8BAA8B,CAAC,EACtD,kBAAkB,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"redirect-resolver_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {RedirectResolver} from '../../url-loader/redirect-resolver';\n\n\nsuite('RedirectResolver', function() {\n\n  suite('canResolve', () => {\n\n    test('canResolve is true if the prefix matches with protocol', () => {\n      const resolver = new RedirectResolver('proto://site/', 'some/path');\n      assert.isTrue(resolver.canResolve('proto://site/something.html'));\n    });\n\n    test('canResolve is true if the prefix matches without protocol', () => {\n      const resolver = new RedirectResolver('/site/', 'some/path');\n      assert.isTrue(resolver.canResolve('/site/something.html'));\n    });\n\n    test('canResolve is false if the prefix doesn\\'t match', () => {\n      const resolver = new RedirectResolver('proto://site/', 'some/path');\n      assert.isFalse(resolver.canResolve('/site/something.html'));\n      assert.isFalse(resolver.canResolve('protzo://site/something.html'));\n    });\n\n  });\n\n  suite('resolve', () => {\n    test('if prefix matches, url is rewritten', () => {\n      const resolver = new RedirectResolver('proto://site/', 'some/path/');\n      assert.equal(\n          resolver.resolve('proto://site/something.html'),\n          'some/path/something.html');\n    });\n    test('if prefix doesn\\'t match, resolve throws', () => {\n      const resolver = new RedirectResolver('proto://site/', 'some/path/');\n      assert.throws(\n          () => resolver.resolve('protoz://site/something.html'),\n          /RedirectResolver/);\n    });\n  });\n});\n"]}