var _iosphere$elm_logger$Logger$toInt = function (logLevel) {
	var _p0 = logLevel;
	switch (_p0.ctor) {
		case 'Error':
			return 4;
		case 'Warning':
			return 3;
		case 'Info':
			return 2;
		case 'Debug':
			return 1;
		default:
			return 0;
	}
};
var _iosphere$elm_logger$Logger$levelString = function (logLevel) {
	var _p1 = logLevel;
	switch (_p1.ctor) {
		case 'Error':
			return 'Error';
		case 'Warning':
			return 'Warning';
		case 'Info':
			return 'Info';
		case 'Debug':
			return 'Debug';
		default:
			return 'Verbose';
	}
};
var _iosphere$elm_logger$Logger$elmLog = F3(
	function (level, message, value) {
		var taggedMessage = A2(
			_elm_lang$core$Basics_ops['++'],
			_iosphere$elm_logger$Logger$levelString(level),
			A2(_elm_lang$core$Basics_ops['++'], ': ', message));
		return A2(_elm_lang$core$Debug$log, taggedMessage, value);
	});
var _iosphere$elm_logger$Logger$internalLog = F4(
	function (config, messageLevel, message, value) {
		return (_elm_lang$core$Native_Utils.cmp(
			_iosphere$elm_logger$Logger$toInt(messageLevel),
			_iosphere$elm_logger$Logger$toInt(config.minimumLevel)) > -1) ? A3(config.logFunc, messageLevel, message, value) : value;
	});
var _iosphere$elm_logger$Logger$log = function (config) {
	var _p2 = config;
	return _iosphere$elm_logger$Logger$internalLog(_p2._0);
};
var _iosphere$elm_logger$Logger$InternalConfig = F2(
	function (a, b) {
		return {logFunc: a, minimumLevel: b};
	});
var _iosphere$elm_logger$Logger$Verbose = {ctor: 'Verbose'};
var _iosphere$elm_logger$Logger$Debug = {ctor: 'Debug'};
var _iosphere$elm_logger$Logger$Info = {ctor: 'Info'};
var _iosphere$elm_logger$Logger$Warning = {ctor: 'Warning'};
var _iosphere$elm_logger$Logger$Error = {ctor: 'Error'};
var _iosphere$elm_logger$Logger$Config = function (a) {
	return {ctor: 'Config', _0: a};
};
var _iosphere$elm_logger$Logger$customConfig = F2(
	function (minimumLevel, logFunc) {
		return _iosphere$elm_logger$Logger$Config(
			{logFunc: logFunc, minimumLevel: minimumLevel});
	});
var _iosphere$elm_logger$Logger$defaultConfig = function (minimumLevel) {
	return A2(_iosphere$elm_logger$Logger$customConfig, minimumLevel, _iosphere$elm_logger$Logger$elmLog);
};
