{"version":3,"sources":["test/typescript/typescript-preparser_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAC5B,iCAAiC;AAEjC,4CAA6C;AAE7C,8EAA8E;AAC9E,gFAA0E;AAC1E,6CAA2D;AAC3D,8CAA6C;AAE7C,KAAK,CAAC,kBAAkB,EAAE;IACxB,IAAI,MAA2B,CAAC;IAEhC,KAAK,CAAC;QACJ,MAAM,GAAG,IAAI,0CAAmB,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,SAAS,EAAE;QAEf,IAAI,CAAC,gBAAgB,EAAE;YACrB,MAAM,QAAQ,GAAG;;;;;;OAMhB,CAAC;YACF,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;YAC/D,aAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,8CAAwB,CAAC,CAAC;YACtD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;YAClD,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAoB,CAAC;YAEjD,4CAA4C;YAC5C,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CACR,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE;YACzD,MAAM,QAAQ,GAAG,2CAA2C,CAAC;YAC7D,MAAM,GAAG,GAAG,mBAAmB,CAAC;YAChC,IAAI,KAAK,GAAuC,SAAS,CAAC;YAC1D,IAAI,CAAC;gBACH,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAC9B,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,gCAAwB,CAAC,CAAC,CAAC,CAAC;oBAC7C,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACf,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;gBAC5D,CAAC;gBACD,KAAK,GAAG,CAAC,CAAC;YACZ,CAAC;YACD,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACzD,CAAC;YACD,MAAM,UAAU,GAAG,2BAAc,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC7D,aAAM,CAAC,SAAS,CAAC,MAAM,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;;YAEtD,CAAC,CAAC;QACV,CAAC,CAAA,CAAC,CAAC;QAEH,kCAAkC;QAClC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE;YACxB,IAAI,CAAC,sBAAsB,EAAE;gBAC3B,MAAM,QAAQ,GAAG,WAAW,CAAC;;;;;;;;UAQ3B,CAAC,CAAC,IAAI,EAAE;oBACN,IAAI,CAAC;gBACT,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;gBACxD,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"typescript-preparser_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as ts from 'typescript';\n\nimport stripIndent = require('strip-indent');\n\nimport {ParsedTypeScriptDocument} from '../../typescript/typescript-document';\nimport {TypeScriptPreparser} from '../../typescript/typescript-preparser';\nimport {WarningCarryingException} from '../../model/model';\nimport {CodeUnderliner} from '../test-utils';\n\nsuite('TypeScriptParser', () => {\n  let parser: TypeScriptPreparser;\n\n  setup(() => {\n    parser = new TypeScriptPreparser();\n  });\n\n  suite('parse()', () => {\n\n    test('parses classes', () => {\n      const contents = `\n        import * as b from './b';\n\n        class Foo extends HTMLElement {\n          bar: string = 'baz';\n        }\n      `;\n      const document = parser.parse(contents, '/typescript/test.ts');\n      assert.instanceOf(document, ParsedTypeScriptDocument);\n      assert.equal(document.url, '/typescript/test.ts');\n      const sourceFile = document.ast as ts.SourceFile;\n\n      // very basic check that the file got parsed\n      assert.equal(sourceFile.statements.length, 2);\n      assert.equal(\n          sourceFile.statements[0].kind, ts.SyntaxKind.ImportDeclaration);\n    });\n\n    test('throws a WarningCarryingException for parse errors', async() => {\n      const contents = 'const const const const const #!@(~~)!();';\n      const url = 'ts-parse-error.ts';\n      let error: WarningCarryingException|undefined = undefined;\n      try {\n        parser.parse(contents, url);\n      } catch (e) {\n        if (!(e instanceof WarningCarryingException)) {\n          console.log(e);\n          throw new Error('Expected a warning carrying exception.');\n        }\n        error = e;\n      }\n      if (error === undefined) {\n        throw new Error('Parsing invalid file did not throw!');\n      }\n      const underliner = CodeUnderliner.withMapping(url, contents);\n      assert.deepEqual(await underliner.underline(error.warning), `\nconst const const const const #!@(~~)!();\n      ~~~~~`);\n    });\n\n    // stringify() not implemented yet\n    suite.skip(`stringify()`, () => {\n      test('pretty prints output', () => {\n        const contents = stripIndent(`\n        class Foo extends HTMLElement {\n          constructor() {\n            super();\n            this.bar = () => {\n            };\n            const let = 'let const';\n          }\n        }`).trim() +\n            '\\n';\n        const document = parser.parse(contents, 'test-file.js');\n        assert.deepEqual(document.stringify({}), contents);\n      });\n    });\n  });\n});\n"]}