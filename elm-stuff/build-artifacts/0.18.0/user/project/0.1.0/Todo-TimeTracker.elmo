var _user$project$Todo_TimeTracker$isTrackingTodo = function (todo) {
	return A2(
		_elm_community$maybe_extra$Maybe_Extra$unwrap,
		false,
		function (rec) {
			return A2(_user$project$Document$hasId, rec.todoId, todo);
		});
};
var _user$project$Todo_TimeTracker$getElapsedTime = F2(
	function (now, rec) {
		var _p0 = rec.state;
		if (_p0.ctor === 'Running') {
			return rec.totalTime + (now - _p0._0);
		} else {
			return rec.totalTime;
		}
	});
var _user$project$Todo_TimeTracker$alarmDelay = 10 * _elm_lang$core$Time$minute;
var _user$project$Todo_TimeTracker$map = _elm_lang$core$Maybe$map;
var _user$project$Todo_TimeTracker$getMaybeTodoId = _user$project$Todo_TimeTracker$map(
	function (_) {
		return _.todoId;
	});
var _user$project$Todo_TimeTracker$wrap = _elm_lang$core$Maybe$Just;
var _user$project$Todo_TimeTracker$updateNextAlarmAt = F2(
	function (now, model) {
		var _p1 = model;
		if (_p1.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: model};
		} else {
			var _p2 = _p1._0;
			return A2(
				_elm_lang$core$Tuple$mapSecond,
				_user$project$Todo_TimeTracker$wrap,
				function () {
					if (_elm_lang$core$Native_Utils.cmp(now, _p2.nextAlarmAt) > -1) {
						var newRec = _elm_lang$core$Native_Utils.update(
							_p2,
							{nextAlarmAt: now + _user$project$Todo_TimeTracker$alarmDelay});
						var info = {
							todoId: _p2.todoId,
							elapsedTime: A2(_user$project$Todo_TimeTracker$getElapsedTime, now, newRec)
						};
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Maybe$Just(info),
							_1: newRec
						};
					} else {
						return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _p2};
					}
				}());
		}
	});
var _user$project$Todo_TimeTracker$none = _elm_lang$core$Maybe$Nothing;
var _user$project$Todo_TimeTracker$Info = F2(
	function (a, b) {
		return {todoId: a, elapsedTime: b};
	});
var _user$project$Todo_TimeTracker$ModelRec = F4(
	function (a, b, c, d) {
		return {todoId: a, totalTime: b, state: c, nextAlarmAt: d};
	});
var _user$project$Todo_TimeTracker$Paused = {ctor: 'Paused'};
var _user$project$Todo_TimeTracker$Running = function (a) {
	return {ctor: 'Running', _0: a};
};
var _user$project$Todo_TimeTracker$initRunning = F2(
	function (todoId, now) {
		return _user$project$Todo_TimeTracker$wrap(
			{
				todoId: todoId,
				totalTime: 0,
				state: _user$project$Todo_TimeTracker$Running(now),
				nextAlarmAt: now + _user$project$Todo_TimeTracker$alarmDelay
			});
	});
var _user$project$Todo_TimeTracker$toggleStartStop = F3(
	function (todoId, now, model) {
		var _p3 = model;
		if (_p3.ctor === 'Nothing') {
			return A2(_user$project$Todo_TimeTracker$initRunning, todoId, now);
		} else {
			return _user$project$Todo_TimeTracker$none;
		}
	});
var _user$project$Todo_TimeTracker$switchOrStartRunning = F2(
	function (todoId, now) {
		return A2(
			_elm_lang$core$Debug$log,
			'switchOrStartRunning',
			A2(
				_elm_community$maybe_extra$Maybe_Extra$unpack,
				function (_p4) {
					return A2(_user$project$Todo_TimeTracker$initRunning, todoId, now);
				},
				function (rec) {
					return _user$project$Todo_TimeTracker$wrap(
						_elm_lang$core$Native_Utils.update(
							rec,
							{todoId: todoId}));
				}));
	});
var _user$project$Todo_TimeTracker$togglePause = function (now) {
	return _user$project$Todo_TimeTracker$map(
		function (rec) {
			var _p5 = rec.state;
			if (_p5.ctor === 'Running') {
				return _elm_lang$core$Native_Utils.update(
					rec,
					{totalTime: rec.totalTime + (now - _p5._0), state: _user$project$Todo_TimeTracker$Paused});
			} else {
				return _elm_lang$core$Native_Utils.update(
					rec,
					{
						state: _user$project$Todo_TimeTracker$Running(now)
					});
			}
		});
};
