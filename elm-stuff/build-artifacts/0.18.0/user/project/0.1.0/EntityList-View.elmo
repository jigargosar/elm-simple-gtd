var _user$project$EntityList_View$groupView = F2(
	function (appViewModel, vm) {
		return A2(_user$project$EntityList_GroupView2$initKeyed, appViewModel, vm);
	});
var _user$project$EntityList_View$Todo = function (a) {
	return {ctor: 'Todo', _0: a};
};
var _user$project$EntityList_View$Project = function (a) {
	return {ctor: 'Project', _0: a};
};
var _user$project$EntityList_View$Context = function (a) {
	return {ctor: 'Context', _0: a};
};
var _user$project$EntityList_View$updateCount = function (vmList) {
	return function (list) {
		var _p0 = list;
		_v0_2:
		do {
			if ((_p0.ctor === '::') && (_p0._1.ctor === '::')) {
				switch (_p0._0.ctor) {
					case 'Context':
						if (_p0._1._0.ctor === 'Project') {
							var isTodo = function (vm) {
								var _p1 = vm;
								if (_p1.ctor === 'Todo') {
									return true;
								} else {
									return false;
								}
							};
							var totalTodoCount = _elm_lang$core$List$length(
								A2(_elm_lang$core$List$filter, isTodo, vmList));
							return {
								ctor: '::',
								_0: _user$project$EntityList_View$Context(
									_elm_lang$core$Native_Utils.update(
										_p0._0._0,
										{count: totalTodoCount})),
								_1: {
									ctor: '::',
									_0: _user$project$EntityList_View$Project(_p0._1._0._0),
									_1: _p0._1._1
								}
							};
						} else {
							break _v0_2;
						}
					case 'Project':
						if (_p0._1._0.ctor === 'Context') {
							var isTodo = function (vm) {
								var _p2 = vm;
								if (_p2.ctor === 'Todo') {
									return true;
								} else {
									return false;
								}
							};
							var totalTodoCount = _elm_lang$core$List$length(
								A2(_elm_lang$core$List$filter, isTodo, vmList));
							return {
								ctor: '::',
								_0: _user$project$EntityList_View$Project(
									_elm_lang$core$Native_Utils.update(
										_p0._0._0,
										{count: totalTodoCount})),
								_1: {
									ctor: '::',
									_0: _user$project$EntityList_View$Context(_p0._1._0._0),
									_1: _p0._1._1
								}
							};
						} else {
							break _v0_2;
						}
					default:
						break _v0_2;
				}
			} else {
				break _v0_2;
			}
		} while(false);
		return list;
	}(
		_elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldr,
				F2(
					function (vm, _p3) {
						var _p4 = _p3;
						var _p7 = _p4._0;
						var _p6 = _p4._1;
						var _p5 = vm;
						switch (_p5.ctor) {
							case 'Context':
								return {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: _user$project$EntityList_View$Context(
											_elm_lang$core$Native_Utils.update(
												_p5._0,
												{count: _p6})),
										_1: _p7
									},
									_1: 0
								};
							case 'Project':
								return {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: _user$project$EntityList_View$Project(
											_elm_lang$core$Native_Utils.update(
												_p5._0,
												{count: _p6})),
										_1: _p7
									},
									_1: 0
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: _user$project$EntityList_View$Todo(_p5._0),
										_1: _p7
									},
									_1: _p6 + 1
								};
						}
					}),
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: 0
				},
				vmList)));
};
var _user$project$EntityList_View$createVMList = F3(
	function (entityList, appViewModel, model) {
		var maybeFocusInEntity = A2(_user$project$Model$getMaybeFocusInEntity, entityList, model);
		var hasFocusIn = function (entity) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					maybeFocusInEntity,
					_user$project$Entity$equalById(entity)),
				false);
		};
		var getTabindexAV = function (entity) {
			var tabindexValue = hasFocusIn(entity) ? 0 : -1;
			return _elm_lang$html$Html_Attributes$tabindex(tabindexValue);
		};
		var createVM = function (entity) {
			var tabIndexAV = getTabindexAV(entity);
			var _p8 = entity;
			switch (_p8.ctor) {
				case 'ContextEntity':
					return _user$project$EntityList_View$Context(
						A2(_user$project$EntityList_GroupViewModel$forContext, tabIndexAV, _p8._0));
				case 'ProjectEntity':
					return _user$project$EntityList_View$Project(
						A2(_user$project$EntityList_GroupViewModel$forProject, tabIndexAV, _p8._0));
				default:
					return _user$project$EntityList_View$Todo(
						A2(appViewModel.createTodoViewModel, tabIndexAV, _p8._0));
			}
		};
		return _user$project$EntityList_View$updateCount(
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], entityList, createVM));
	});
var _user$project$EntityList_View$listView = F3(
	function (viewType, model, appViewModel) {
		var createEntityView = function (vm) {
			var _p9 = vm;
			switch (_p9.ctor) {
				case 'Context':
					return _user$project$EntityList_GroupView$initKeyed(_p9._0);
				case 'Project':
					return _user$project$EntityList_GroupView$initKeyed(_p9._0);
				default:
					return _user$project$Todo_View$initKeyed(_p9._0);
			}
		};
		var grouping = A2(_user$project$Model$createGrouping, viewType, model);
		var entityList = _user$project$Entity$flattenGrouping(grouping);
		var maybeFocusInEntity = A2(_user$project$Model$getMaybeFocusInEntity, entityList, model);
		var hasFocusIn = function (entity) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					maybeFocusInEntity,
					_user$project$Entity$equalById(entity)),
				false);
		};
		var getTabindexAVForEntity = function (entity) {
			var tabindexValue = hasFocusIn(entity) ? 0 : -1;
			return _elm_lang$html$Html_Attributes$tabindex(tabindexValue);
		};
		var tempList = function () {
			var _p10 = grouping;
			if (_p10.ctor === 'MultiContext') {
				return A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
					_p10._0,
					function (_p11) {
						var _p12 = _p11;
						return A2(
							_user$project$EntityList_View$groupView,
							appViewModel,
							A3(_user$project$EntityList_ViewModel$contextGroup, getTabindexAVForEntity, _p12.todoList, _p12.context));
					});
			} else {
				return {ctor: '[]'};
			}
		}();
		var vmList = A3(_user$project$EntityList_View$createVMList, entityList, appViewModel, model);
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('entity-list focusable-list'),
				_1: {
					ctor: '::',
					_0: _user$project$Ext_Keyboard$onKeyDown(
						_user$project$Model$OnEntityListKeyDown(entityList)),
					_1: {ctor: '[]'}
				}
			},
			tempList);
	});
var _user$project$EntityList_View$Multi = function (a) {
	return {ctor: 'Multi', _0: a};
};
