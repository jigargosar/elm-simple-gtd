{"version":3,"sources":["../src/storage/reference.ts"],"names":["args","errorsExports","metadata","object","path","requests","fbsString","type","Reference","authWrapper","location","makeFromUrl","validate","arguments","bucket","getMappings","childPath","stringSpec","newPath","child","newRef","data","uploadDataSpec","metadataSpec","throwIfRoot_","mappings","string","format","RAW","opt_metadata","formatValidator","dataFromString","clone","isDef","contentType","self","getAuthToken","then","authToken","requestInfo","deleteObject","makeRequest","getPromise","getMetadata","updateMetadata","url","noDownloadURL","name","invalidRootOperation","parent","lastComponent","service"],"mappings":"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","file":"reference.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport {AuthWrapper} from './implementation/authwrapper';\nimport {FbsBlob} from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport {errors} from './implementation/error';\nimport {Location} from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport {StringFormat} from './implementation/string';\nimport * as type from './implementation/type';\nimport {Metadata} from './metadata';\nimport {Service} from './service';\nimport {UploadTask} from './task';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  protected location: Location;\n\n  constructor(protected authWrapper: AuthWrapper, location: string|Location) {\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @return The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  }\n\n  protected newRef(authWrapper: AuthWrapper, location: Location): Reference {\n    return new Reference(authWrapper, location);\n  }\n\n  protected mappings(): metadata.Mappings {\n    return metadata.getMappings();\n  }\n\n  /**\n   * @return A reference to the object obtained by\n   *     appending childPath, removing any duplicate, beginning, or trailing\n   *     slashes.\n   */\n  child(childPath: string): Reference {\n    args.validate('child', [args.stringSpec()], arguments);\n    let newPath = path.child(this.location.path, childPath);\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return A reference to the parent of the\n   *     current object, or null if the current object is the root.\n   */\n  get parent(): Reference|null {\n    let newPath = path.parent(this.location.path);\n    if (newPath === null) {\n      return null;\n    }\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    let location = new Location(this.location.bucket, '');\n    return this.newRef(this.authWrapper, location);\n  }\n\n  get bucket(): string {\n    return this.location.bucket;\n  }\n\n  get fullPath(): string {\n    return this.location.path;\n  }\n\n  get name(): string {\n    return path.lastComponent(this.location.path);\n  }\n\n  get storage(): Service {\n    return this.authWrapper.service();\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data The blob to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  put(data: Blob|Uint8Array|ArrayBuffer, metadata: Metadata|null = null): UploadTask {\n    args.validate(\n        'put', [args.uploadDataSpec(), args.metadataSpec(true)], arguments);\n    this.throwIfRoot_('put');\n    return new UploadTask(\n        this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data),\n        metadata);\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param string The string to upload.\n   * @param opt_format The format of the string to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  putString(string: string, format: StringFormat = StringFormat.RAW, opt_metadata?: Metadata):\n      UploadTask {\n    args.validate(\n        'putString',\n        [\n          args.stringSpec(), args.stringSpec(fbsString.formatValidator, true),\n          args.metadataSpec(true)\n        ],\n        arguments);\n    this.throwIfRoot_('putString');\n    let data = fbsString.dataFromString(format, string);\n    let metadata = object.clone<Metadata>(opt_metadata);\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n    return new UploadTask(\n        this, this.authWrapper, this.location, this.mappings(),\n        new FbsBlob(data.data, true), metadata);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @return A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   *     A promise that resolves with the metadata for this object. If this\n   *     object doesn't exist or metadata cannot be retreived, the promise is\n   *     rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.getMetadata(\n          self.authWrapper, self.location, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata The new metadata for the object.\n   *     Only values that have been explicitly set will be changed. Explicitly\n   *     setting a value to null will remove the metadata.\n   * @return A promise that resolves\n   *     with the new metadata for this object.\n   *     @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.updateMetadata(\n          self.authWrapper, self.location, metadata, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * @return A promise that resolves with the download\n   *     URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function(metadata) {\n      let url = (metadata['downloadURLs'] as string[])[0];\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  }\n\n  private throwIfRoot_(name: string) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  }\n}\n"]}