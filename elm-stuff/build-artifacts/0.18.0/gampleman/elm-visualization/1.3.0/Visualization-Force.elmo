var _gampleman$elm_visualization$Visualization_Force$isCompleted = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Native_Utils.cmp(_p1._0.alpha, _p1._0.minAlpha) < 1;
};
var _gampleman$elm_visualization$Visualization_Force$applyForce = F3(
	function (alpha, force, entities) {
		var _p2 = force;
		switch (_p2.ctor) {
			case 'Center':
				var n = _elm_lang$core$Basics$toFloat(
					_elm_lang$core$Dict$size(entities));
				var _p3 = A3(
					_elm_lang$core$Dict$foldr,
					F3(
						function (_p5, ent, _p4) {
							var _p6 = _p4;
							return {ctor: '_Tuple2', _0: _p6._0 + ent.x, _1: _p6._1 + ent.y};
						}),
					{ctor: '_Tuple2', _0: 0, _1: 0},
					entities);
				var sumx = _p3._0;
				var sumy = _p3._1;
				var sx = (sumx / n) - _p2._0;
				var sy = (sumy / n) - _p2._1;
				return A2(
					_elm_lang$core$Dict$map,
					F2(
						function (_p7, ent) {
							return _elm_lang$core$Native_Utils.update(
								ent,
								{x: ent.x - sx, y: ent.y - sy});
						}),
					entities);
			case 'Collision':
				return _elm_lang$core$Native_Utils.crashCase(
					'Visualization.Force',
					{
						start: {line: 111, column: 5},
						end: {line: 197, column: 42}
					},
					_p2)('not implemented');
			case 'Links':
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (_p9, ents) {
							var _p10 = _p9;
							var _p16 = _p10.target;
							var _p15 = _p10.source;
							var _p14 = _p10.bias;
							var _p11 = {
								ctor: '_Tuple2',
								_0: A2(_elm_lang$core$Dict$get, _p15, ents),
								_1: A2(_elm_lang$core$Dict$get, _p16, ents)
							};
							if (((_p11.ctor === '_Tuple2') && (_p11._0.ctor === 'Just')) && (_p11._1.ctor === 'Just')) {
								var _p13 = _p11._1._0;
								var _p12 = _p11._0._0;
								var y = ((_p13.y + _p13.vy) - _p12.y) - _p12.vy;
								var x = ((_p13.x + _p13.vx) - _p12.x) - _p12.vx;
								var d = _elm_lang$core$Basics$sqrt(
									Math.pow(x, 2) + Math.pow(y, 2));
								var l = (((d - _p10.distance) / d) * alpha) * _p10.strength;
								return A3(
									_elm_lang$core$Dict$update,
									_p15,
									_elm_lang$core$Maybe$map(
										function (tn) {
											return _elm_lang$core$Native_Utils.update(
												tn,
												{vx: tn.vx + ((x * l) * (1 - _p14)), vy: tn.vy + ((y * l) * (1 - _p14))});
										}),
									A3(
										_elm_lang$core$Dict$update,
										_p16,
										_elm_lang$core$Maybe$map(
											function (sn) {
												return _elm_lang$core$Native_Utils.update(
													sn,
													{vx: sn.vx - ((x * l) * _p14), vy: sn.vy - ((y * l) * _p14)});
											}),
										ents));
							} else {
								return ents;
							}
						}),
					entities,
					_p2._1);
			case 'ManyBody':
				return A2(
					_elm_lang$core$Dict$map,
					F2(
						function (key, opEntity) {
							return A3(
								_elm_lang$core$Dict$foldr,
								F3(
									function (key2, entity2, entity) {
										if (!_elm_lang$core$Native_Utils.eq(key, key2)) {
											var strength = A2(
												_elm_lang$core$Maybe$withDefault,
												0,
												A2(
													_elm_lang$core$Maybe$map,
													function (_) {
														return _.strength;
													},
													A2(_elm_lang$core$Dict$get, key2, _p2._3)));
											var y = entity2.y - entity.y;
											var x = entity2.x - entity.x;
											var l = Math.pow(x, 2) + Math.pow(y, 2);
											var w = (strength * alpha) / l;
											return _elm_lang$core$Native_Utils.update(
												entity,
												{vx: entity.vx + (x * w), vy: entity.vy + (y * w)});
										} else {
											return entity;
										}
									}),
								opEntity,
								entities);
						}),
					entities);
			case 'X':
				return _elm_lang$core$Native_Utils.crashCase(
					'Visualization.Force',
					{
						start: {line: 111, column: 5},
						end: {line: 197, column: 42}
					},
					_p2)('not implemented');
			default:
				return _elm_lang$core$Native_Utils.crashCase(
					'Visualization.Force',
					{
						start: {line: 111, column: 5},
						end: {line: 197, column: 42}
					},
					_p2)('not implemented');
		}
	});
var _gampleman$elm_visualization$Visualization_Force$initialAngle = _elm_lang$core$Basics$pi * (3 - _elm_lang$core$Basics$sqrt(5));
var _gampleman$elm_visualization$Visualization_Force$initialRadius = 10;
var _gampleman$elm_visualization$Visualization_Force$entity = F2(
	function (index, a) {
		var angle = _elm_lang$core$Basics$toFloat(index) * _gampleman$elm_visualization$Visualization_Force$initialAngle;
		var radius = _elm_lang$core$Basics$sqrt(
			_elm_lang$core$Basics$toFloat(index)) * _gampleman$elm_visualization$Visualization_Force$initialRadius;
		return {
			x: radius * _elm_lang$core$Basics$cos(angle),
			y: radius * _elm_lang$core$Basics$sin(angle),
			vx: 0.0,
			vy: 0.0,
			id: index,
			value: a
		};
	});
var _gampleman$elm_visualization$Visualization_Force$CollisionParam = F2(
	function (a, b) {
		return {radius: a, strength: b};
	});
var _gampleman$elm_visualization$Visualization_Force$LinkParam = F5(
	function (a, b, c, d, e) {
		return {source: a, target: b, distance: c, strength: d, bias: e};
	});
var _gampleman$elm_visualization$Visualization_Force$ManyBodyParam = function (a) {
	return {strength: a};
};
var _gampleman$elm_visualization$Visualization_Force$DirectionalParam = F2(
	function (a, b) {
		return {force: a, position: b};
	});
var _gampleman$elm_visualization$Visualization_Force$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _gampleman$elm_visualization$Visualization_Force$tick = F2(
	function (_p19, nodes) {
		var _p20 = _p19;
		var _p21 = _p20._0;
		var updateEntity = function (ent) {
			return _elm_lang$core$Native_Utils.update(
				ent,
				{x: ent.x + (ent.vx * _p21.velocityDecay), vx: ent.vx * _p21.velocityDecay, y: ent.y + (ent.vy * _p21.velocityDecay), vy: ent.vy * _p21.velocityDecay});
		};
		var dictNodes = A3(
			_elm_lang$core$List$foldl,
			function (node) {
				return A2(_elm_lang$core$Dict$insert, node.id, node);
			},
			_elm_lang$core$Dict$empty,
			nodes);
		var alpha = _p21.alpha + ((_p21.alphaTarget - _p21.alpha) * _p21.alphaDecay);
		var newNodes = A3(
			_elm_lang$core$List$foldl,
			_gampleman$elm_visualization$Visualization_Force$applyForce(alpha),
			dictNodes,
			_p21.forces);
		return {
			ctor: '_Tuple2',
			_0: _gampleman$elm_visualization$Visualization_Force$State(
				_elm_lang$core$Native_Utils.update(
					_p21,
					{alpha: alpha})),
			_1: A2(
				_elm_lang$core$List$map,
				updateEntity,
				_elm_lang$core$Dict$values(newNodes))
		};
	});
var _gampleman$elm_visualization$Visualization_Force$computeSimulation = F2(
	function (state, entities) {
		computeSimulation:
		while (true) {
			if (_gampleman$elm_visualization$Visualization_Force$isCompleted(state)) {
				return entities;
			} else {
				var _p22 = A2(_gampleman$elm_visualization$Visualization_Force$tick, state, entities);
				var newState = _p22._0;
				var newEntities = _p22._1;
				var _v6 = newState,
					_v7 = newEntities;
				state = _v6;
				entities = _v7;
				continue computeSimulation;
			}
		}
	});
var _gampleman$elm_visualization$Visualization_Force$simulation = function (forces) {
	return _gampleman$elm_visualization$Visualization_Force$State(
		{
			forces: forces,
			alpha: 1.0,
			minAlpha: 1.0e-3,
			alphaDecay: 1 - Math.pow(1.0e-3, 1 / 300),
			alphaTarget: 0.0,
			velocityDecay: 0.6
		});
};
var _gampleman$elm_visualization$Visualization_Force$iterations = F2(
	function (iterations, _p23) {
		var _p24 = _p23;
		var _p25 = _p24._0;
		return _gampleman$elm_visualization$Visualization_Force$State(
			_elm_lang$core$Native_Utils.update(
				_p25,
				{
					alphaDecay: 1 - Math.pow(
						_p25.minAlpha,
						1 / _elm_lang$core$Basics$toFloat(iterations))
				}));
	});
var _gampleman$elm_visualization$Visualization_Force$reheat = function (_p26) {
	var _p27 = _p26;
	return _gampleman$elm_visualization$Visualization_Force$State(
		_elm_lang$core$Native_Utils.update(
			_p27._0,
			{alpha: 1.0}));
};
var _gampleman$elm_visualization$Visualization_Force$Y = function (a) {
	return {ctor: 'Y', _0: a};
};
var _gampleman$elm_visualization$Visualization_Force$X = function (a) {
	return {ctor: 'X', _0: a};
};
var _gampleman$elm_visualization$Visualization_Force$ManyBody = F4(
	function (a, b, c, d) {
		return {ctor: 'ManyBody', _0: a, _1: b, _2: c, _3: d};
	});
var _gampleman$elm_visualization$Visualization_Force$manyBodyStrength = function (strength) {
	return function (_p28) {
		return A4(
			_gampleman$elm_visualization$Visualization_Force$ManyBody,
			0.9,
			1,
			1 / 0,
			_elm_lang$core$Dict$fromList(
				A2(
					_elm_lang$core$List$map,
					function (key) {
						return {
							ctor: '_Tuple2',
							_0: key,
							_1: {strength: strength}
						};
					},
					_p28)));
	};
};
var _gampleman$elm_visualization$Visualization_Force$manyBody = _gampleman$elm_visualization$Visualization_Force$manyBodyStrength(-30);
var _gampleman$elm_visualization$Visualization_Force$Links = F2(
	function (a, b) {
		return {ctor: 'Links', _0: a, _1: b};
	});
var _gampleman$elm_visualization$Visualization_Force$customLinks = F2(
	function (iterations, list) {
		var counts = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (_p29, d) {
					var _p30 = _p29;
					return A3(
						_elm_lang$core$Dict$update,
						_p30.target,
						function (_p31) {
							return _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$Maybe$withDefault,
									1,
									A2(
										_elm_lang$core$Maybe$map,
										F2(
											function (x, y) {
												return x + y;
											})(1),
										_p31)));
						},
						A3(
							_elm_lang$core$Dict$update,
							_p30.source,
							function (_p32) {
								return _elm_lang$core$Maybe$Just(
									A2(
										_elm_lang$core$Maybe$withDefault,
										1,
										A2(
											_elm_lang$core$Maybe$map,
											F2(
												function (x, y) {
													return x + y;
												})(1),
											_p32)));
							},
							d));
				}),
			_elm_lang$core$Dict$empty,
			list);
		var count = function (key) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				A2(_elm_lang$core$Dict$get, key, counts));
		};
		return A2(
			_gampleman$elm_visualization$Visualization_Force$Links,
			iterations,
			A2(
				_elm_lang$core$List$map,
				function (_p33) {
					var _p34 = _p33;
					var _p36 = _p34.target;
					var _p35 = _p34.source;
					return {
						source: _p35,
						target: _p36,
						distance: _p34.distance,
						strength: A2(
							_elm_lang$core$Maybe$withDefault,
							1 / A2(
								_elm_lang$core$Basics$min,
								count(_p35),
								count(_p36)),
							_p34.strength),
						bias: count(_p35) / (count(_p35) + count(_p36))
					};
				},
				list));
	});
var _gampleman$elm_visualization$Visualization_Force$links = function (_p37) {
	return A2(
		_gampleman$elm_visualization$Visualization_Force$customLinks,
		1,
		A2(
			_elm_lang$core$List$map,
			function (_p38) {
				var _p39 = _p38;
				return {source: _p39._0, target: _p39._1, distance: 30, strength: _elm_lang$core$Maybe$Nothing};
			},
			_p37));
};
var _gampleman$elm_visualization$Visualization_Force$Collision = F2(
	function (a, b) {
		return {ctor: 'Collision', _0: a, _1: b};
	});
var _gampleman$elm_visualization$Visualization_Force$Center = F2(
	function (a, b) {
		return {ctor: 'Center', _0: a, _1: b};
	});
var _gampleman$elm_visualization$Visualization_Force$center = _gampleman$elm_visualization$Visualization_Force$Center;
