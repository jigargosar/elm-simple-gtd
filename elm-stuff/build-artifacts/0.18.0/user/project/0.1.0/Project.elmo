var _user$project$Project$decoder = _user$project$GroupDoc$decoder;
var _user$project$Project$nullId = '';
var _user$project$Project$isNullId = _user$project$Ext_Function$equals(_user$project$Project$nullId);
var _user$project$Project$constructor = _user$project$GroupDoc$constructor;
var _user$project$Project$init = F4(
	function (name, now, deviceId, id) {
		return A8(_user$project$Project$constructor, id, '', now, now, false, deviceId, name, false);
	});
var _user$project$Project$null = A8(_user$project$Project$constructor, _user$project$Project$nullId, '', 0, 0, false, '', 'No Project', false);
var _user$project$Project$filterNull = function (pred) {
	return A2(
		_elm_lang$core$List$filter,
		pred,
		{
			ctor: '::',
			_0: _user$project$Project$null,
			_1: {ctor: '[]'}
		});
};
var _user$project$Project$isNull = _user$project$Ext_Function$equals(_user$project$Project$null);
var _user$project$Project$sort = _user$project$GroupDoc$sort(_user$project$Project$isNull);
var _user$project$Project$setName = F2(
	function (name, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{name: name});
	});
var _user$project$Project$updateName = F2(
	function (updater, model) {
		return A2(
			_user$project$Project$setName,
			updater(model),
			model);
	});
var _user$project$Project$getName = function (_) {
	return _.name;
};
var _user$project$Project$otherFieldsEncoder = function (project) {
	return {
		ctor: '::',
		_0: A2(
			_user$project$Ext_Function_Infix_ops['=>'],
			'name',
			_elm_lang$core$Json_Encode$string(
				_user$project$Project$getName(project))),
		_1: {ctor: '[]'}
	};
};
var _user$project$Project$setRev = F2(
	function (rev, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{rev: rev});
	});
var _user$project$Project$updateRev = F2(
	function (updater, model) {
		return A2(
			_user$project$Project$setRev,
			updater(model),
			model);
	});
var _user$project$Project$getRev = function (_) {
	return _.rev;
};
var _user$project$Project$setId = F2(
	function (id, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{id: id});
	});
var _user$project$Project$updateId = F2(
	function (updater, model) {
		return A2(
			_user$project$Project$setId,
			updater(model),
			model);
	});
var _user$project$Project$nameEquals = function (name) {
	return function (_p0) {
		return A2(
			_user$project$Ext_Function$equals,
			name,
			_user$project$Project$getName(_p0));
	};
};
var _user$project$Project$findByName = function (projectName) {
	return _user$project$Store$findBy(
		_user$project$Project$nameEquals(
			_elm_lang$core$String$trim(projectName)));
};
var _user$project$Project$storeGenerator = A3(_user$project$Store$generator, 'project-db', _user$project$Project$otherFieldsEncoder, _user$project$Project$decoder);
var _user$project$Project$findNameById = function (id) {
	return A2(
		_user$project$Ext_Function_Infix_ops['>>?'],
		_user$project$Store$findById(id),
		_user$project$Project$getName);
};
