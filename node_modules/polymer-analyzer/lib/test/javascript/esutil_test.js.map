{"version":3,"sources":["test/javascript/esutil_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAA4B;AAG5B,oDAA0D;AAG1D,yDAAyD;AAEzD,KAAK,CAAC,mBAAmB,EAAE;IACzB,IAAI,CAAC,8BAA8B,EAAE;QACnC,MAAM,gBAAgB,GAA4B;YAChD,IAAI,EAAE,kBAAkB;YACxB,MAAM,EAAE,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,EAAC;YACzC,QAAQ,EAAE,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,EAAC;YAC3C,QAAQ,EAAE,KAAK;SAChB,CAAC;QACF,MAAM,GAAG,GAAmC;YAC1C,IAAI,EAAE,yBAAyB;YAC/B,UAAU,EAAE,IAAI;YAChB,MAAM,EAAE,EAAE;YACV,IAAI,EAAE,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,EAAC;SACxC,CAAC;QACF,MAAM,aAAa,GAAwC;YACzD,CAAC,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,EAAC,EAAE,KAAK,CAAC;YAC1C,CAAC,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAC,EAAE,KAAK,CAAC;YACtD,CAAC,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAC,EAAE,IAAI,CAAC;YAC/C,CAAC,gBAAgB,EAAE,SAAS,CAAC;YAC7B,oDAAoD;YACpD,CAAC,GAAG,EAAE,SAAS,CAAC;SACjB,CAAC;QACF,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,aAAa,CAAC,CAAC,CAAC;YACrC,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,0BAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"esutil_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as estree from 'estree';\n\nimport {objectKeyToString} from '../../javascript/esutil';\n\n\n// See analysis_test for tests of generateElementMetadata\n\nsuite('objectKeyToString', function() {\n  test('produces expected type names', function() {\n    const memberExpression: estree.MemberExpression = {\n      type: 'MemberExpression',\n      object: {type: 'Identifier', name: 'foo'},\n      property: {type: 'Identifier', name: 'bar'},\n      computed: false\n    };\n    const afe: estree.ArrowFunctionExpression = {\n      type: 'ArrowFunctionExpression',\n      expression: true,\n      params: [],\n      body: {type: 'Identifier', name: 'foo'}\n    };\n    const inputToOutput: [estree.Node, string | undefined][] = [\n      [{type: 'Identifier', name: 'foo'}, 'foo'],\n      [{type: 'Literal', value: 'foo', raw: '\"foo\"'}, 'foo'],\n      [{type: 'Literal', value: 10, raw: '10'}, '10'],\n      [memberExpression, 'foo.bar'],\n      // When it hits an unknown type it returns undefined\n      [afe, undefined]\n    ];\n    for (const testCase of inputToOutput) {\n      assert.equal(testCase[1], objectKeyToString(testCase[0]));\n    }\n  });\n});\n"]}