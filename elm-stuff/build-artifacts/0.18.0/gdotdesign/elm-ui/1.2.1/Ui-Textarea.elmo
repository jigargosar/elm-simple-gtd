var _gdotdesign$elm_ui$Ui_Textarea$spaceRegex = _elm_lang$core$Regex$regex('^\\s*$');
var _gdotdesign$elm_ui$Ui_Textarea$process = function (value) {
	var renderLine = function (data) {
		var isEmpty = A2(_elm_lang$core$Regex$contains, _gdotdesign$elm_ui$Ui_Textarea$spaceRegex, data);
		var attributes = _gdotdesign$elm_ui$Ui$attributeList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'empty', _1: isEmpty},
				_1: {ctor: '[]'}
			});
		return A3(
			_elm_lang$html$Html$node,
			'span-line',
			attributes,
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(data),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$core$List$intersperse,
		A2(
			_elm_lang$html$Html$br,
			{ctor: '[]'},
			{ctor: '[]'}),
		A2(
			_elm_lang$core$List$map,
			renderLine,
			A2(_elm_lang$core$String$split, '\n', value)));
};
var _gdotdesign$elm_ui$Ui_Textarea$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'Input') {
			var _p1 = _p0._0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{value: _p1}),
				_1: A2(_gdotdesign$elm_ui$Ui_Helpers_Emitter$sendString, model.uid, _p1)
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _gdotdesign$elm_ui$Ui_Textarea$defaultValue = F2(
	function (value, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{value: value});
	});
var _gdotdesign$elm_ui$Ui_Textarea$enterAllowed = F2(
	function (value, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{enterAllowed: value});
	});
var _gdotdesign$elm_ui$Ui_Textarea$placeholder = F2(
	function (value, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{placeholder: value});
	});
var _gdotdesign$elm_ui$Ui_Textarea$onChange = F2(
	function (msg, model) {
		return A2(_gdotdesign$elm_ui$Ui_Helpers_Emitter$listenString, model.uid, msg);
	});
var _gdotdesign$elm_ui$Ui_Textarea$init = function (_p2) {
	return {
		enterAllowed: true,
		uid: _gdotdesign$elm_ui$Ui_Native_Uid$uid(
			{ctor: '_Tuple0'}),
		placeholder: '',
		disabled: false,
		readonly: false,
		value: ''
	};
};
var _gdotdesign$elm_ui$Ui_Textarea$Model = F6(
	function (a, b, c, d, e, f) {
		return {placeholder: a, enterAllowed: b, disabled: c, readonly: d, value: e, uid: f};
	});
var _gdotdesign$elm_ui$Ui_Textarea$NoOp = {ctor: 'NoOp'};
var _gdotdesign$elm_ui$Ui_Textarea$Input = function (a) {
	return {ctor: 'Input', _0: a};
};
var _gdotdesign$elm_ui$Ui_Textarea$render = function (model) {
	var actions = A2(
		_gdotdesign$elm_ui$Ui$enabledActions,
		model,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onInput(_gdotdesign$elm_ui$Ui_Textarea$Input),
			_1: {ctor: '[]'}
		});
	var base = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$placeholder(model.placeholder),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$defaultValue(model.value),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$readonly(model.readonly),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$disabled(model.disabled),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$spellcheck(false),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id(model.uid),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		},
		actions);
	var attributes = model.enterAllowed ? base : A2(
		_elm_lang$core$Basics_ops['++'],
		base,
		{
			ctor: '::',
			_0: _gdotdesign$elm_ui$Html_Events_Extra$onEnterPreventDefault(_gdotdesign$elm_ui$Ui_Textarea$NoOp),
			_1: {ctor: '[]'}
		});
	return A3(
		_elm_lang$html$Html$node,
		'ui-textarea',
		_gdotdesign$elm_ui$Ui_Styles$apply(_gdotdesign$elm_ui$Ui_Styles_Textarea$defaultStyle),
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$textarea,
				attributes,
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A3(
					_elm_lang$html$Html$node,
					'ui-textarea-background',
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A3(
						_elm_lang$html$Html$node,
						'ui-textarea-mirror',
						{ctor: '[]'},
						_gdotdesign$elm_ui$Ui_Textarea$process(model.value)),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _gdotdesign$elm_ui$Ui_Textarea$view = function (model) {
	return A2(_elm_lang$html$Html_Lazy$lazy, _gdotdesign$elm_ui$Ui_Textarea$render, model);
};
var _gdotdesign$elm_ui$Ui_Textarea$Done = function (a) {
	return {ctor: 'Done', _0: a};
};
var _gdotdesign$elm_ui$Ui_Textarea$setValue = F2(
	function (value, model) {
		var selector = _gdotdesign$elm_dom$DOM$idSelector(model.uid);
		var equals = function () {
			var _p3 = _gdotdesign$elm_dom$DOM$getValueSync(selector);
			if (_p3.ctor === 'Ok') {
				return _elm_lang$core$Native_Utils.eq(model.value, value) && _elm_lang$core$Native_Utils.eq(_p3._0, value);
			} else {
				return false;
			}
		}();
		return equals ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{value: value}),
			_1: A2(
				_elm_lang$core$Task$attempt,
				_gdotdesign$elm_ui$Ui_Textarea$Done,
				A2(_gdotdesign$elm_dom$DOM$setValue, value, selector))
		};
	});
