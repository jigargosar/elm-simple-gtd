{"version":3,"sources":["src/storage/implementation/args.ts"],"names":["validate","and_","stringSpec","uploadDataSpec","metadataSpec","nonNegativeNumberSpec","looseObjectSpec","nullFunctionSpec","errorsExports","MetadataUtils","type","name","specs","passed","minArgs","length","maxArgs","i","optional","validLength","invalidArgumentCount","validator","e","Error","invalidArgument","message","ArgSpec","opt_optional","self","p","isJustDef","v1","v2","opt_validator","stringValidator","isString","valid","Uint8Array","ArrayBuffer","isNativeBlobDefined","Blob","metadataValidator","isNumber","isLooseObject","isDef","Object","undefined","isFunction"],"mappings":"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","file":"args.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport {errors} from './error';\nimport * as MetadataUtils from './metadata';\nimport * as type from './type';\n\n/**\n * @param name Name of the function.\n * @param specs Argument specs.\n * @param passed The actual arguments passed to the function.\n * @throws {fbs.Error} If the arguments are invalid.\n */\nexport function validate(name: string, specs: ArgSpec[], passed: IArguments) {\n  let minArgs = specs.length;\n  let maxArgs = specs.length;\n  for (let i = 0; i < specs.length; i++) {\n    if (specs[i].optional) {\n      minArgs = i;\n      break;\n    }\n  }\n  let validLength = minArgs <= passed.length && passed.length <= maxArgs;\n  if (!validLength) {\n    throw errorsExports.invalidArgumentCount(\n        minArgs, maxArgs, name, passed.length);\n  }\n  for (let i = 0; i < passed.length; i++) {\n    try {\n      specs[i].validator(passed[i]);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw errorsExports.invalidArgument(i, name, e.message);\n      } else {\n        throw errorsExports.invalidArgument(i, name, e);\n      }\n    }\n  }\n}\n\n/**\n * @struct\n */\nexport class ArgSpec {\n  validator: (p1: any) => void;\n  optional: boolean;\n\n  constructor(\n      validator: (p1: any) => void,\n      opt_optional?: boolean) {\n    let self = this;\n    this.validator = function(p: any) {\n      if (self.optional && !type.isJustDef(p)) {\n        return;\n      }\n      validator(p);\n    };\n    this.optional = !!opt_optional;\n  }\n}\n\nexport function and_(\n    v1: (p1: any) => void,\n    v2: Function): (p1: any) => void {\n  return function(p) {\n    v1(p);\n    v2(p);\n  };\n}\n\nexport function stringSpec(\n    opt_validator?: (p1: any) => void | null,\n    opt_optional?: boolean): ArgSpec {\n  function stringValidator(p: any) {\n    if (!type.isString(p)) {\n      throw 'Expected string.';\n    }\n  }\n  let validator;\n  if (opt_validator) {\n    validator = and_(stringValidator, opt_validator);\n  } else {\n    validator = stringValidator;\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\nexport function uploadDataSpec(): ArgSpec {\n  function validator(p: any) {\n    let valid = p instanceof Uint8Array || p instanceof ArrayBuffer ||\n        type.isNativeBlobDefined() && p instanceof Blob;\n    if (!valid) {\n      throw 'Expected Blob or File.';\n    }\n  }\n  return new ArgSpec(validator);\n}\n\nexport function metadataSpec(opt_optional?: boolean): ArgSpec {\n  return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);\n}\n\nexport function nonNegativeNumberSpec(): ArgSpec {\n  function validator(p: any) {\n    let valid = type.isNumber(p) && p >= 0;\n    if (!valid) {\n      throw 'Expected a number 0 or greater.';\n    }\n  }\n  return new ArgSpec(validator);\n}\n\nexport function looseObjectSpec(\n    opt_validator?: ((p1: any) => void) | null,\n    opt_optional?: boolean): ArgSpec {\n  function validator(p: any) {\n    let isLooseObject = (p === null) || (type.isDef(p) && p instanceof Object);\n    if (!isLooseObject) {\n      throw 'Expected an Object.';\n    }\n    if (opt_validator !== undefined && opt_validator !== null) {\n      opt_validator(p);\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\nexport function nullFunctionSpec(opt_optional?: boolean): ArgSpec {\n  function validator(p: any) {\n    let valid = p === null || type.isFunction(p);\n    if (!valid) {\n      throw 'Expected a Function.';\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n"]}