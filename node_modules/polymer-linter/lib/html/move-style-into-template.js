"use strict";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dom5 = require("dom5");
const polymer_analyzer_1 = require("polymer-analyzer");
const registry_1 = require("../registry");
const rule_1 = require("./rule");
const stripIndent = require("strip-indent");
const p = dom5.predicates;
class MoveStyleIntoTemplate extends rule_1.HtmlRule {
    constructor() {
        super(...arguments);
        this.code = 'style-into-template';
        this.description = stripIndent(`
      Warns about \`style\` tags in dom-modules but not in templates.

      This:

          <dom-module>
            <style></style>
            <template>foo</template>
          <dom-module>

      Should instead be written as:

          <dom-module>
            <template>
              <style></style>
              foo
            </template>
          <dom-module>
  `);
    }
    checkDocument(parsedDocument) {
        return __awaiter(this, void 0, void 0, function* () {
            const warnings = [];
            const outOfPlaceStyle = p.AND(p.hasTagName('style'), p.parentMatches(p.hasTagName('dom-module')));
            const outOfPlaceStyles = dom5.nodeWalkAll(parsedDocument.ast, outOfPlaceStyle);
            for (const outOfPlaceNode of outOfPlaceStyles) {
                warnings.push(new polymer_analyzer_1.Warning({
                    parsedDocument,
                    code: this.code,
                    message: `<style> tags should not be direct children of <dom-module>, they should be moved into the <template>`,
                    severity: polymer_analyzer_1.Severity.WARNING,
                    sourceRange: parsedDocument.sourceRangeForNode(outOfPlaceNode)
                }));
            }
            return warnings;
        });
    }
}
registry_1.registry.register(new MoveStyleIntoTemplate());
//# sourceMappingURL=move-style-into-template.js.map