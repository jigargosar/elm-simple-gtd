var _ydschneider$regex_builder$Internal$replaceNonPrinting = function (c) {
	var _p0 = c;
	switch (_p0.valueOf()) {
		case '\f':
			return '\\f';
		case '\n':
			return '\\n';
		case '\r':
			return '\\r';
		case '\t':
			return '\\t';
		case '\v':
			return '\\v';
		case '\b':
			return '[\\b]';
		default:
			return _elm_lang$core$String$fromChar(c);
	}
};
var _ydschneider$regex_builder$Internal$escapeOneOf = function (c) {
	return _elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr('\\')) ? '\\\\' : (_elm_lang$core$Native_Utils.eq(
		c,
		_elm_lang$core$Native_Utils.chr('\b')) ? '\\b' : (A2(
		_elm_lang$core$List$member,
		c,
		{
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('['),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.chr(']'),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.chr('-'),
					_1: {ctor: '[]'}
				}
			}
		}) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'\\',
		_elm_lang$core$String$fromChar(c)) : _ydschneider$regex_builder$Internal$replaceNonPrinting(c)));
};
var _ydschneider$regex_builder$Internal$specialChars = {
	ctor: '::',
	_0: _elm_lang$core$Native_Utils.chr('-'),
	_1: {
		ctor: '::',
		_0: _elm_lang$core$Native_Utils.chr('/'),
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('\\'),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.chr('^'),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.chr('$'),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('*'),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.chr('+'),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.chr('#'),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.chr('?'),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.chr('.'),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.chr('('),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.chr(')'),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.chr('|'),
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.chr('['),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.chr(']'),
															_1: {
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.chr('{'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.chr('}'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _ydschneider$regex_builder$Internal$escape = function (c) {
	return A2(_elm_lang$core$List$member, c, _ydschneider$regex_builder$Internal$specialChars) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'\\',
		_elm_lang$core$String$fromChar(c)) : _ydschneider$regex_builder$Internal$replaceNonPrinting(c);
};
var _ydschneider$regex_builder$Internal$quantifierToString = function (q) {
	var _p1 = q;
	switch (_p1.ctor) {
		case 'ZeroPlus':
			return '*';
		case 'OnePlus':
			return '+';
		case 'ZeroOrOne':
			return '?';
		case 'Exactly':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p1._0),
					'}'));
		case 'Between':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p1._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p1._1),
							'}'))));
		case 'LazyZeroPlus':
			return '*?';
		case 'LazyOnePlus':
			return '+?';
		case 'LazyZeroOrOne':
			return '??';
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p1._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p1._1),
							'}?'))));
	}
};
var _ydschneider$regex_builder$Internal$Empty = {ctor: 'Empty'};
var _ydschneider$regex_builder$Internal$internalToString = function (x) {
	var appendTo = function (a) {
		return _elm_lang$core$String$append(
			function () {
				var _p2 = a;
				if (_p2.ctor === 'Choice') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'(?:',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_ydschneider$regex_builder$Internal$internalToString(a),
							')'));
				} else {
					return _ydschneider$regex_builder$Internal$internalToString(a);
				}
			}());
	};
	var _p3 = x;
	switch (_p3.ctor) {
		case 'Remember':
			return A2(
				appendTo,
				_p3._1,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_ydschneider$regex_builder$Internal$internalToString(_p3._0),
						')')));
		case 'OneOf':
			return A2(
				appendTo,
				_p3._1,
				function (s) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(_elm_lang$core$Basics_ops['++'], s, ']'));
				}(
					_elm_lang$core$String$concat(
						A2(_elm_lang$core$List$map, _ydschneider$regex_builder$Internal$escapeOneOf, _p3._0))));
		case 'NoneOf':
			return A2(
				appendTo,
				_p3._1,
				function (s) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'[^',
						A2(_elm_lang$core$Basics_ops['++'], s, ']'));
				}(
					_elm_lang$core$String$concat(
						A2(_elm_lang$core$List$map, _ydschneider$regex_builder$Internal$escapeOneOf, _p3._0))));
		case 'Choice':
			var _p5 = _p3._0;
			var _p4 = _p3._1;
			var wrap = function (s) {
				return ((!_elm_lang$core$Native_Utils.eq(_p4, _ydschneider$regex_builder$Internal$Empty)) && (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p5),
					1) > 0)) ? A2(
					_elm_lang$core$Basics_ops['++'],
					'(?:',
					A2(_elm_lang$core$Basics_ops['++'], s, ')')) : s;
			};
			return A2(
				appendTo,
				_p4,
				wrap(
					A2(
						_elm_lang$core$String$join,
						'|',
						A2(_elm_lang$core$List$map, _ydschneider$regex_builder$Internal$internalToString, _p5))));
		case 'Postfix':
			return A2(
				appendTo,
				_p3._2,
				A2(_ydschneider$regex_builder$Internal$quantify, _p3._0, _p3._1));
		case 'Lookahead':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(?:',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_ydschneider$regex_builder$Internal$internalToString(_p3._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						')(?=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_ydschneider$regex_builder$Internal$internalToString(_p3._0),
							')'))));
		case 'NegativeLookahead':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(?:',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_ydschneider$regex_builder$Internal$internalToString(_p3._1),
					A2(
						_elm_lang$core$Basics_ops['++'],
						')(?!',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_ydschneider$regex_builder$Internal$internalToString(_p3._0),
							')'))));
		case 'Raw':
			return A2(appendTo, _p3._1, _p3._0);
		case 'Unescaped':
			return A2(
				appendTo,
				_p3._1,
				_ydschneider$regex_builder$Internal$escape(_p3._0));
		default:
			return '';
	}
};
var _ydschneider$regex_builder$Internal$quantify = F2(
	function (q, x) {
		var needsParens = function () {
			var _p6 = x;
			_v4_6:
			do {
				switch (_p6.ctor) {
					case 'Unescaped':
						if (_p6._1.ctor === 'Empty') {
							return false;
						} else {
							break _v4_6;
						}
					case 'Raw':
						if (_p6._1.ctor === 'Empty') {
							return false;
						} else {
							break _v4_6;
						}
					case 'Empty':
						return false;
					case 'NoneOf':
						if (_p6._1.ctor === 'Empty') {
							return false;
						} else {
							break _v4_6;
						}
					case 'OneOf':
						if (_p6._1.ctor === 'Empty') {
							return false;
						} else {
							break _v4_6;
						}
					case 'Remember':
						if (_p6._1.ctor === 'Empty') {
							return false;
						} else {
							break _v4_6;
						}
					default:
						break _v4_6;
				}
			} while(false);
			return true;
		}();
		return needsParens ? A2(
			_elm_lang$core$Basics_ops['++'],
			'(?:',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_ydschneider$regex_builder$Internal$internalToString(x),
				A2(
					_elm_lang$core$Basics_ops['++'],
					')',
					_ydschneider$regex_builder$Internal$quantifierToString(q)))) : A2(
			_elm_lang$core$Basics_ops['++'],
			_ydschneider$regex_builder$Internal$internalToString(x),
			_ydschneider$regex_builder$Internal$quantifierToString(q));
	});
var _ydschneider$regex_builder$Internal$Unescaped = F2(
	function (a, b) {
		return {ctor: 'Unescaped', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$Raw = F2(
	function (a, b) {
		return {ctor: 'Raw', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$NegativeLookahead = F2(
	function (a, b) {
		return {ctor: 'NegativeLookahead', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$Lookahead = F2(
	function (a, b) {
		return {ctor: 'Lookahead', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$Postfix = F3(
	function (a, b, c) {
		return {ctor: 'Postfix', _0: a, _1: b, _2: c};
	});
var _ydschneider$regex_builder$Internal$Choice = F2(
	function (a, b) {
		return {ctor: 'Choice', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$NoneOf = F2(
	function (a, b) {
		return {ctor: 'NoneOf', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$OneOf = F2(
	function (a, b) {
		return {ctor: 'OneOf', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$Remember = F2(
	function (a, b) {
		return {ctor: 'Remember', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$LazyBetween = F2(
	function (a, b) {
		return {ctor: 'LazyBetween', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$LazyZeroOrOne = {ctor: 'LazyZeroOrOne'};
var _ydschneider$regex_builder$Internal$LazyOnePlus = {ctor: 'LazyOnePlus'};
var _ydschneider$regex_builder$Internal$LazyZeroPlus = {ctor: 'LazyZeroPlus'};
var _ydschneider$regex_builder$Internal$Between = F2(
	function (a, b) {
		return {ctor: 'Between', _0: a, _1: b};
	});
var _ydschneider$regex_builder$Internal$Exactly = function (a) {
	return {ctor: 'Exactly', _0: a};
};
var _ydschneider$regex_builder$Internal$ZeroOrOne = {ctor: 'ZeroOrOne'};
var _ydschneider$regex_builder$Internal$OnePlus = {ctor: 'OnePlus'};
var _ydschneider$regex_builder$Internal$ZeroPlus = {ctor: 'ZeroPlus'};
