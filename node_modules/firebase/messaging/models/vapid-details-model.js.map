{"version":3,"sources":["src/messaging/models/vapid-details-model.ts"],"names":["FCM_VAPID_OBJ_STORE","DB_VERSION","VapidDetailsModel","dbName","db","createObjectStore","keyPath","swScope","length","Promise","reject","errorFactory_","create","codes","BAD_SCOPE","openDatabase","then","resolve","transaction","objectStore","scopeRequest","get","onerror","event","target","error","onsuccess","result","vapidKey","BAD_VAPID_KEY","details","TRANSACTION_READ_WRITE","request","put","getVapidFromSWScope","DELETE_SCOPE_NOT_FOUND","delete","FAILED_DELETE_VAPID_KEY"],"mappings":"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","file":"vapid-details-model.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n\nimport DBInterface from './db-interface';\nimport Errors from './errors';\n\nconst FCM_VAPID_OBJ_STORE = 'fcm_vapid_object_Store';\nconst DB_VERSION = 1;\n\nexport default class VapidDetailsModel extends DBInterface {\n\n  constructor() {\n    super(VapidDetailsModel.dbName, DB_VERSION);\n  }\n\n  static get dbName() {\n    return 'fcm_vapid_details_db';\n  }\n\n  /**\n   * @override\n   * @param {IDBDatabase} db\n   */\n  onDBUpgrade(db) {\n    db.createObjectStore(FCM_VAPID_OBJ_STORE, {\n      keyPath: 'swScope'\n    });\n  }\n\n  /**\n   * Given a service worker scope, this method will look up the vapid key\n   * in indexedDB.\n   * @param {string} swScope\n   * @return {Promise<string>} The vapid key associated with that scope.\n   */\n  getVapidFromSWScope(swScope) {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.openDatabase()\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction([FCM_VAPID_OBJ_STORE]);\n          const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n          const scopeRequest = objectStore.get(swScope);\n          scopeRequest.onerror = event => {\n            reject((<IDBRequest> event.target).error);\n          };\n\n          scopeRequest.onsuccess = event => {\n            let result = (<IDBRequest> event.target).result;\n            let vapidKey = null;\n            if (result) {\n              vapidKey = result.vapidKey;\n            }\n            resolve(vapidKey);\n          };\n        });\n      });\n  }\n\n  /**\n   * Save a vapid key against a swScope for later date.\n   * @param  {string} swScope The service worker scope to be associated with\n   * this push subscription.\n   * @param {string} vapidKey The public vapid key to be associated with\n   * the swScope.\n   * @return {Promise<void>}\n   */\n  saveVapidDetails(swScope, vapidKey) {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));\n    }\n\n    const details = {\n      'swScope': swScope,\n      'vapidKey': vapidKey\n    };\n\n    return this.openDatabase()\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_VAPID_OBJ_STORE], this.TRANSACTION_READ_WRITE);\n          const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n          const request = objectStore.put(details);\n          request.onerror = event => {\n            reject((<IDBRequest> event.target).error);\n          };\n          request.onsuccess = event => {\n            resolve();\n          };\n        });\n      });\n  }\n\n  /**\n   * This method deletes details of the current FCM VAPID key for a SW scope.\n   * @param {string} swScope Scope to be deleted\n   * @return {Promise<string>} Resolves once the scope / vapid details have been\n   * deleted and returns the deleted vapid key.\n   */\n  deleteVapidDetails(swScope) {\n    return this.getVapidFromSWScope(swScope)\n      .then(vapidKey => {\n        if (!vapidKey) {\n          throw this.errorFactory_.create(Errors.codes.DELETE_SCOPE_NOT_FOUND);\n        }\n\n        return  this.openDatabase()\n          .then(db => {\n            return new Promise((resolve, reject) => {\n              const transaction = db.transaction(\n                [FCM_VAPID_OBJ_STORE], this.TRANSACTION_READ_WRITE);\n              const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n              const request = objectStore.delete(swScope);\n              request.onerror = event => {\n                reject((<IDBRequest> event.target).error);\n              };\n              request.onsuccess = event => {\n                if ((<IDBRequest> event.target).result === 0) {\n                  reject(\n                    this.errorFactory_.create(Errors.codes.FAILED_DELETE_VAPID_KEY)\n                  );\n                  return;\n                }\n\n                resolve(vapidKey);\n              };\n            });\n          });\n      });\n  }\n}\n"]}