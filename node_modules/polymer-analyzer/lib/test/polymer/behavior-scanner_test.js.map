{"version":3,"sources":["test/polymer/behavior-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAGH,+BAA4B;AAC5B,yBAAyB;AACzB,6BAA6B;AAK7B,0EAAoE;AACpE,qDAAkF;AAClF,qEAA+D;AAE/D,KAAK,CAAC,iBAAiB,EAAE;IAEvB,IAAI,QAA4B,CAAC;IACjC,IAAI,SAAuC,CAAC;IAC5C,IAAI,aAAgC,CAAC;IAErC,UAAU,CAAC;QACT,MAAM,MAAM,GAAG,IAAI,oCAAgB,EAAE,CAAC;QACtC,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CACxB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,2BAA2B,CAAC,EAAE,MAAM,CAAC,CAAC;QAClE,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,IAAI,kCAAe,EAAE,CAAC;QACtC,MAAM,KAAK,GAAG,CAAC,OAAgB,KAC3B,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE/C,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACvD,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,aAAa;YACU,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,0BAAe,CAAC,CAAC;QAC5E,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,aAAa,CAAC,CAAC,CAAC;YACrC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,mCAAmC,EAAE;QACxC,aAAM,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAC7D,gBAAgB;YAChB,kCAAkC;YAClC,iBAAiB;YACjB,mCAAmC;YACnC,6BAA6B;YAC7B,oBAAoB;SACrB,CAAC,IAAI,EAAE,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,yCAAyC,EAAE;QAC9C,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACxC,aAAM,CAAC,KAAK,CACR,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,EACtE,QAAQ,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uCAAuC,EAAE;QAC5C,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACzC,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAE,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE;QAC3C,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;QACrD,aAAM,CAAC,KAAK,CACR,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAE,CAAC,UAAU;aACnD,GAAG,CAAC,MAAM,CAAE,CAAC,IAAI,EACtB,MAAM,CAAC,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE;QAC3C,IAAI,YAAiB,CAAC;QACtB,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI;YACxD,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;gBACtB,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,aAAM,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4BAA4B,EAAE;QACjC,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAC5C,MAAM,cAAc,GAChB,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAE,CAAC,mBAAmB,CAAC;QAC7D,MAAM,oBAAoB,GACtB,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAE,CAAC,mBAAmB,CAAC;QACtE,aAAM,CAAC,SAAS,CACZ,cAAc,CAAC,GAAG,CAAC,CAAC,CAA4B,KAAK,CAAC,CAAC,IAAI,CAAC,EAC5D,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,6BAA6B,CAAC,CAAC,CAAC;QAC1E,aAAM,CAAC,SAAS,CACZ,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAA4B,KAAK,CAAC,CAAC,IAAI,CAAC,EAClE,CAAC,aAAa,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE;QAC3C,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QACnE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QACrE,CAAC;QACD,aAAM,CAAC,SAAS,CAAC,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3D,aAAM,CAAC,SAAS,CAAC,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"behavior-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n\nimport {Visitor} from '../../javascript/estree-visitor';\nimport {JavaScriptDocument} from '../../javascript/javascript-document';\nimport {JavaScriptParser} from '../../javascript/javascript-parser';\nimport {ScannedBehavior, ScannedBehaviorAssignment} from '../../polymer/behavior';\nimport {BehaviorScanner} from '../../polymer/behavior-scanner';\n\nsuite('BehaviorScanner', () => {\n\n  let document: JavaScriptDocument;\n  let behaviors: Map<string, ScannedBehavior>;\n  let behaviorsList: ScannedBehavior[];\n\n  suiteSetup(async() => {\n    const parser = new JavaScriptParser();\n    const file = fs.readFileSync(\n        path.resolve(__dirname, '../static/js-behaviors.js'), 'utf8');\n    document = parser.parse(file, '/static/js-behaviors.js');\n    const scanner = new BehaviorScanner();\n    const visit = (visitor: Visitor) =>\n        Promise.resolve(document.visit([visitor]));\n\n    const {features} = await scanner.scan(document, visit);\n    behaviors = new Map();\n    behaviorsList =\n        <ScannedBehavior[]>features.filter((e) => e instanceof ScannedBehavior);\n    for (const behavior of behaviorsList) {\n      behaviors.set(behavior.className, behavior);\n    }\n  });\n\n  test('Finds behavior object assignments', () => {\n    assert.deepEqual(behaviorsList.map((b) => b.className).sort(), [\n      'SimpleBehavior',\n      'Polymer.SimpleNamespacedBehavior',\n      'AwesomeBehavior',\n      'Polymer.AwesomeNamespacedBehavior',\n      'Really.Really.Deep.Behavior',\n      'CustomBehaviorList'\n    ].sort());\n  });\n\n  test('Supports behaviors at local assignments', () => {\n    assert(behaviors.has('SimpleBehavior'));\n    assert.equal(\n        behaviors.get('SimpleBehavior')!.properties.values().next().value.name,\n        'simple');\n  });\n\n  test('Supports behaviors with renamed paths', () => {\n    assert(behaviors.has('AwesomeBehavior'));\n    assert(behaviors.get('AwesomeBehavior')!.properties.has('custom'));\n  });\n\n  test('Supports behaviors On.Property.Paths', () => {\n    assert(behaviors.has('Really.Really.Deep.Behavior'));\n    assert.equal(\n        behaviors.get('Really.Really.Deep.Behavior')!.properties\n            .get('deep')!.name,\n        'deep');\n  });\n\n  test('Supports property array on behaviors', () => {\n    let defaultValue: any;\n    behaviors.get('AwesomeBehavior')!.properties.forEach((prop) => {\n      if (prop.name === 'a') {\n        defaultValue = prop.default;\n      }\n    });\n    assert.equal(defaultValue, 1);\n  });\n\n  test('Supports chained behaviors', function() {\n    assert(behaviors.has('CustomBehaviorList'));\n    const childBehaviors =\n        behaviors.get('CustomBehaviorList')!.behaviorAssignments;\n    const deepChainedBehaviors =\n        behaviors.get('Really.Really.Deep.Behavior')!.behaviorAssignments;\n    assert.deepEqual(\n        childBehaviors.map((b: ScannedBehaviorAssignment) => b.name),\n        ['SimpleBehavior', 'AwesomeBehavior', 'Really.Really.Deep.Behavior']);\n    assert.deepEqual(\n        deepChainedBehaviors.map((b: ScannedBehaviorAssignment) => b.name),\n        ['Do.Re.Mi.Fa']);\n  });\n\n  test('Does not count methods as properties', function() {\n    const behavior = behaviors.get('Polymer.SimpleNamespacedBehavior');\n    if (!behavior) {\n      throw new Error('Could not find Polymer.SimpleNamespacedBehavior');\n    }\n    assert.deepEqual([...behavior.methods.keys()], ['method']);\n    assert.deepEqual([...behavior.properties.keys()], ['simple']);\n  });\n});\n"]}