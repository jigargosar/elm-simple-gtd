var _user$project$Entity$getPathFromViewType = function (viewType) {
	var _p0 = viewType;
	switch (_p0.ctor) {
		case 'ContextsView':
			return {
				ctor: '::',
				_0: 'lists',
				_1: {
					ctor: '::',
					_0: 'contexts',
					_1: {ctor: '[]'}
				}
			};
		case 'ProjectsView':
			return {
				ctor: '::',
				_0: 'lists',
				_1: {
					ctor: '::',
					_0: 'projects',
					_1: {ctor: '[]'}
				}
			};
		case 'ProjectView':
			var _p1 = _p0._0;
			return _elm_lang$core$String$isEmpty(_p1) ? {
				ctor: '::',
				_0: 'project',
				_1: {
					ctor: '::',
					_0: 'NotAssigned',
					_1: {ctor: '[]'}
				}
			} : {
				ctor: '::',
				_0: 'project',
				_1: {
					ctor: '::',
					_0: _p1,
					_1: {ctor: '[]'}
				}
			};
		case 'ContextView':
			var _p2 = _p0._0;
			return _elm_lang$core$String$isEmpty(_p2) ? {
				ctor: '::',
				_0: 'Inbox',
				_1: {ctor: '[]'}
			} : {
				ctor: '::',
				_0: 'context',
				_1: {
					ctor: '::',
					_0: _p2,
					_1: {ctor: '[]'}
				}
			};
		case 'BinView':
			return {
				ctor: '::',
				_0: 'bin',
				_1: {ctor: '[]'}
			};
		default:
			return {
				ctor: '::',
				_0: 'done',
				_1: {ctor: '[]'}
			};
	}
};
var _user$project$Entity$equalById = F2(
	function (e1, e2) {
		var eq = _user$project$Document$equalById;
		var _p3 = {ctor: '_Tuple2', _0: e1, _1: e2};
		_v1_2:
		do {
			if (_p3.ctor === '_Tuple2') {
				if (_p3._0.ctor === 'Group') {
					if (_p3._1.ctor === 'Group') {
						var _p4 = {ctor: '_Tuple2', _0: _p3._0._0, _1: _p3._1._0};
						_v2_2:
						do {
							if (_p4.ctor === '_Tuple2') {
								if (_p4._0.ctor === 'Project') {
									if (_p4._1.ctor === 'Project') {
										return A2(eq, _p4._0._0, _p4._1._0);
									} else {
										break _v2_2;
									}
								} else {
									if (_p4._1.ctor === 'Context') {
										return A2(eq, _p4._0._0, _p4._1._0);
									} else {
										break _v2_2;
									}
								}
							} else {
								break _v2_2;
							}
						} while(false);
						return false;
					} else {
						break _v1_2;
					}
				} else {
					if (_p3._1.ctor === 'Task') {
						return A2(eq, _p3._0._0, _p3._1._0);
					} else {
						break _v1_2;
					}
				}
			} else {
				break _v1_2;
			}
		} while(false);
		return false;
	});
var _user$project$Entity$findEntityByOffsetIn = F3(
	function (offsetIndex, entityList, fromEntity) {
		return A2(
			_elm_community$maybe_extra$Maybe_Extra$orElse,
			_elm_lang$core$List$head(entityList),
			A2(
				_user$project$Ext_List$atIndexIn,
				entityList,
				A2(
					_user$project$Ext_List$clampIndexIn,
					entityList,
					A2(
						_user$project$Ext_Function$add,
						offsetIndex,
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
							A2(
								_elm_community$list_extra$List_Extra$findIndex,
								_user$project$Entity$equalById(fromEntity),
								entityList),
							0)))));
	});
var _user$project$Entity$getId = function (entity) {
	var _p5 = entity;
	if (_p5.ctor === 'Task') {
		return _user$project$Document$getId(_p5._0);
	} else {
		var _p6 = _p5._0;
		if (_p6.ctor === 'Project') {
			return _user$project$Document$getId(_p6._0);
		} else {
			return _user$project$Document$getId(_p6._0);
		}
	}
};
var _user$project$Entity$Context = function (a) {
	return {ctor: 'Context', _0: a};
};
var _user$project$Entity$Project = function (a) {
	return {ctor: 'Project', _0: a};
};
var _user$project$Entity$Task = function (a) {
	return {ctor: 'Task', _0: a};
};
var _user$project$Entity$fromTask = _user$project$Entity$Task;
var _user$project$Entity$Group = function (a) {
	return {ctor: 'Group', _0: a};
};
var _user$project$Entity$fromContext = function (_p7) {
	return _user$project$Entity$Group(
		_user$project$Entity$Context(_p7));
};
var _user$project$Entity$fromProject = function (_p8) {
	return _user$project$Entity$Group(
		_user$project$Entity$Project(_p8));
};
var _user$project$Entity$DoneView = {ctor: 'DoneView'};
var _user$project$Entity$BinView = {ctor: 'BinView'};
var _user$project$Entity$ProjectView = function (a) {
	return {ctor: 'ProjectView', _0: a};
};
var _user$project$Entity$ProjectsView = {ctor: 'ProjectsView'};
var _user$project$Entity$ContextView = function (a) {
	return {ctor: 'ContextView', _0: a};
};
var _user$project$Entity$ContextsView = {ctor: 'ContextsView'};
var _user$project$Entity$defaultListView = _user$project$Entity$ContextsView;
var _user$project$Entity$routeUrlBuilderToMaybeListViewType = function (builder) {
	var _p9 = _rgrempel$elm_route_url$RouteUrl_Builder$path(builder);
	_v5_8:
	do {
		if (_p9.ctor === '::') {
			if (_p9._1.ctor === '[]') {
				switch (_p9._0) {
					case 'bin':
						return _elm_lang$core$Maybe$Just(_user$project$Entity$BinView);
					case 'done':
						return _elm_lang$core$Maybe$Just(_user$project$Entity$DoneView);
					case 'Inbox':
						return _elm_lang$core$Maybe$Just(
							_user$project$Entity$ContextView(''));
					default:
						break _v5_8;
				}
			} else {
				if (_p9._1._1.ctor === '[]') {
					switch (_p9._0) {
						case 'lists':
							switch (_p9._1._0) {
								case 'contexts':
									return _elm_lang$core$Maybe$Just(_user$project$Entity$ContextsView);
								case 'projects':
									return _elm_lang$core$Maybe$Just(_user$project$Entity$ProjectsView);
								default:
									break _v5_8;
							}
						case 'context':
							return _elm_lang$core$Maybe$Just(
								_user$project$Entity$ContextView(_p9._1._0));
						case 'project':
							if (_p9._1._0 === 'NotAssigned') {
								return _elm_lang$core$Maybe$Just(
									_user$project$Entity$ProjectView(''));
							} else {
								return _elm_lang$core$Maybe$Just(
									_user$project$Entity$ProjectView(_p9._1._0));
							}
						default:
							break _v5_8;
					}
				} else {
					break _v5_8;
				}
			}
		} else {
			break _v5_8;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};
var _user$project$Entity$getTodoGotoGroupView = F2(
	function (todo, prevView) {
		var projectView = _user$project$Entity$ProjectView(
			_user$project$Todo$getProjectId(todo));
		var contextView = _user$project$Entity$ContextView(
			_user$project$Todo$getContextId(todo));
		var _p10 = prevView;
		switch (_p10.ctor) {
			case 'ProjectsView':
				return contextView;
			case 'ProjectView':
				return contextView;
			case 'ContextsView':
				return projectView;
			case 'ContextView':
				return projectView;
			case 'BinView':
				return _user$project$Entity$ContextsView;
			default:
				return _user$project$Entity$ContextsView;
		}
	});
var _user$project$Entity$toViewType = F2(
	function (maybePrevView, entity) {
		var _p11 = entity;
		if (_p11.ctor === 'Group') {
			var _p12 = _p11._0;
			if (_p12.ctor === 'Context') {
				return _user$project$Entity$ContextView(
					_user$project$Document$getId(_p12._0));
			} else {
				return _user$project$Entity$ProjectView(
					_user$project$Document$getId(_p12._0));
			}
		} else {
			var _p13 = _p11._0;
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					maybePrevView,
					_user$project$Entity$getTodoGotoGroupView(_p13)),
				_user$project$Entity$ContextView(
					_user$project$Todo$getContextId(_p13)));
		}
	});
var _user$project$Entity$Goto = {ctor: 'Goto'};
var _user$project$Entity$ToggleSelected = {ctor: 'ToggleSelected'};
var _user$project$Entity$OnFocusIn = {ctor: 'OnFocusIn'};
var _user$project$Entity$NameChanged = function (a) {
	return {ctor: 'NameChanged', _0: a};
};
var _user$project$Entity$Save = {ctor: 'Save'};
var _user$project$Entity$ToggleArchived = {ctor: 'ToggleArchived'};
var _user$project$Entity$ToggleDeleted = {ctor: 'ToggleDeleted'};
var _user$project$Entity$StartEditing = {ctor: 'StartEditing'};
