{"version":3,"sources":["src/messaging/models/token-details-model.ts"],"names":["FCM_TOKEN_OBJ_STORE","DB_VERSION","ValidateInput","prototype","fcmToken","swScope","vapidKey","subscription","fcmSenderId","fcmPushSet","TokenDetailsModel","dbName","db","objectStore","createObjectStore","keyPath","createIndex","unique","input","length","Promise","reject","errorFactory_","create","codes","BAD_TOKEN","BAD_SCOPE","BAD_VAPID_KEY","PushSubscription","BAD_SUBSCRIPTION","BAD_SENDER_ID","BAD_PUSH_SET","resolve","validateInputs_","then","openDatabase","transaction","index","request","get","onerror","event","target","error","onsuccess","result","scopeRequest","details","endpoint","TRANSACTION_READ_WRITE","put","token","INVALID_DELETE_TOKEN","getTokenDetailsFromToken","DELETE_TOKEN_NOT_FOUND","delete","FAILED_TO_DELETE_TOKEN"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,sBAAsB,wBAA5B;AACA,IAAMC,aAAa,CAAnB;AAEA;AACA,SAAAC,aAAA,GAAA,CAA2B;AAC3B;AACAA,cAAcC,SAAd,CAAwBC,QAAxB;AACA;AACAF,cAAcC,SAAd,CAAwBE,OAAxB;AACA;AACAH,cAAcC,SAAd,CAAwBG,QAAxB;AACA;AACAJ,cAAcC,SAAd,CAAwBI,YAAxB;AACA;AACAL,cAAcC,SAAd,CAAwBK,WAAxB;AACA;AACAN,cAAcC,SAAd,CAAwBM,UAAxB;;IAEcC,iB;;;AAEZ,iCAAA;AAAA;;AAAA,qIACQA,kBAAkBC,MAD1B,EACkCV,UADlC;AAEC;;;;;AAMD;;;oCAGYW,E,EAAE;AACZ,gBAAIC,cAAcD,GAAGE,iBAAH,CAAqBd,mBAArB,EAA0C;AAC1De,yBAAS;AADiD,aAA1C,CAAlB;AAIA;AACAF,wBAAYG,WAAZ,CAAwB,aAAxB,EAAuC,aAAvC,EAAsD;AACpDC,wBAAQ;AAD4C,aAAtD;AAIAJ,wBAAYG,WAAZ,CAAwB,UAAxB,EAAoC,UAApC,EAAgD;AAC9CC,wBAAQ;AADsC,aAAhD;AAGD;AAED;;;;;;;;;;;wCAQgBC,K,EAAK;AACnB,gBAAIA,MAAMd,QAAV,EAAoB;AAClB,oBAAI,OAAOc,MAAMd,QAAb,KAA0B,QAA1B,IAAsCc,MAAMd,QAAN,CAAee,MAAf,KAA0B,CAApE,EAAuE;AACrE,2BAAOC,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaC,SAAvC,CADK,CAAP;AAED;AACF;AAED,gBAAIP,MAAMb,OAAV,EAAmB;AACjB,oBAAI,OAAOa,MAAMb,OAAb,KAAyB,QAAzB,IAAqCa,MAAMb,OAAN,CAAcc,MAAd,KAAyB,CAAlE,EAAqE;AACnE,2BAAOC,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaE,SAAvC,CADK,CAAP;AAED;AACF;AAED,gBAAIR,MAAMZ,QAAV,EAAoB;AAClB,oBAAI,OAAOY,MAAMZ,QAAb,KAA0B,QAA1B,IAAsCY,MAAMZ,QAAN,CAAea,MAAf,KAA0B,CAApE,EAAuE;AACrE,2BAAOC,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaG,aAAvC,CADK,CAAP;AAEC;AACJ;AAED,gBAAIT,MAAMX,YAAV,EAAwB;AACtB,oBAAI,EAAEW,MAAMX,YAAN,YAA8BqB,gBAAhC,CAAJ,EAAuD;AACrD,2BAAOR,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaK,gBAAvC,CADK,CAAP;AAED;AACF;AAED,gBAAIX,MAAMV,WAAV,EAAuB;AACrB,oBAAI,OAAOU,MAAMV,WAAb,KAA6B,QAA7B,IACFU,MAAMV,WAAN,CAAkBW,MAAlB,KAA6B,CAD/B,EACkC;AAChC,2BAAOC,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaM,aAAvC,CADK,CAAP;AAED;AACF;AAED,gBAAIZ,MAAMT,UAAV,EAAsB;AACpB,oBAAI,OAAOS,MAAMT,UAAb,KAA4B,QAA5B,IACJS,MAAMT,UAAN,CAAiBU,MAAjB,KAA4B,CAD5B,EAC+B;AAC7B,2BAAOC,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaO,YAAvC,CADK,CAAP;AAED;AACF;AAED,mBAAOX,QAAQY,OAAR,EAAP;AACD;AAED;;;;;;;;iDAKyB5B,Q,EAAQ;AAAA;;AAC/B,gBAAI,CAACA,QAAL,EAAe;AACb,uBAAOgB,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaC,SAAvC,CADK,CAAP;AAED;AAED,mBAAO,KAAKQ,eAAL,CAAqB,EAAC7B,kBAAD,EAArB,EACJ8B,IADI,CACC,YAAA;AACJ,uBAAO,OAAKC,YAAL,EAAP;AACD,aAHI,EAIJD,IAJI,CAIC,cAAE;AACN,uBAAO,IAAId,OAAJ,CAAY,UAACY,OAAD,EAAUX,MAAV,EAAgB;AACjC,wBAAMe,cAAcxB,GAAGwB,WAAH,CAAe,CAACpC,mBAAD,CAAf,CAApB;AACA,wBAAMa,cAAcuB,YAAYvB,WAAZ,CAAwBb,mBAAxB,CAApB;AACA,wBAAMqC,QAAQxB,YAAYwB,KAAZ,CAAkB,UAAlB,CAAd;AACA,wBAAMC,UAAUD,MAAME,GAAN,CAAUnC,QAAV,CAAhB;AACAkC,4BAAQE,OAAR,GAAkB,UAASC,KAAT,EAAc;AAC9BpB,+BAAqBoB,MAAMC,MAAN,CAAcC,KAAnC;AACD,qBAFD;AAGAL,4BAAQM,SAAR,GAAoB,UAASH,KAAT,EAAc;AAChC,4BAAMI,SAAuBJ,MAAMC,MAAN,CAAcG,MAAd,GAAqCJ,MAAMC,MAAN,CAAcG,MAAnD,GAA4D,IAAzF;AACAb,gCAAQa,MAAR;AACD,qBAHD;AAID,iBAZM,CAAP;AAaD,aAlBI,CAAP;AAmBD;AAED;;;;;;;;;;mDAO2BxC,O,EAAO;AAAA;;AAChC,gBAAI,CAACA,OAAL,EAAc;AACZ,uBAAOe,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaE,SAAvC,CADK,CAAP;AAED;AAED,mBAAO,KAAKO,eAAL,CAAqB,EAAC5B,gBAAD,EAArB,EACJ6B,IADI,CACC,YAAA;AACJ,uBAAO,OAAKC,YAAL,EAAP;AACD,aAHI,EAIJD,IAJI,CAIC,cAAE;AACN,uBAAO,IAAId,OAAJ,CAAY,UAACY,OAAD,EAAUX,MAAV,EAAgB;AACjC,wBAAMe,cAAcxB,GAAGwB,WAAH,CAAe,CAACpC,mBAAD,CAAf,CAApB;AACA,wBAAMa,cAAcuB,YAAYvB,WAAZ,CAAwBb,mBAAxB,CAApB;AACA,wBAAM8C,eAAejC,YAAY0B,GAAZ,CAAgBlC,OAAhB,CAArB;AACAyC,iCAAaN,OAAb,GAAuB,iBAAK;AAC1BnB,+BAAqBoB,MAAMC,MAAN,CAAcC,KAAnC;AACD,qBAFD;AAIAG,iCAAaF,SAAb,GAAyB,iBAAK;AAC5B,4BAAMC,SAAuBJ,MAAMC,MAAN,CAAcG,MAAd,GAAqCJ,MAAMC,MAAN,CAAcG,MAAnD,GAA4D,IAAzF;AACAb,gCAAQa,MAAR;AACD,qBAHD;AAID,iBAZM,CAAP;AAaD,aAlBI,CAAP;AAmBD;AAED;;;;;;;;;;+CAQoC;AAAA;;AAAA,gBADlBxC,OACkB,QADlBA,OACkB;AAAA,gBADTC,QACS,QADTA,QACS;AAAA,gBADCC,YACD,QADCA,YACD;AAAA,gBAAlCC,WAAkC,QAAlCA,WAAkC;AAAA,gBAArBJ,QAAqB,QAArBA,QAAqB;AAAA,gBAAXK,UAAW,QAAXA,UAAW;;AAChC,gBAAI,CAACJ,OAAL,EAAc;AACZ,uBAAOe,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaE,SAAvC,CADK,CAAP;AAED;AAED,gBAAI,CAACpB,QAAL,EAAe;AACb,uBAAOc,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaG,aAAvC,CADK,CAAP;AAED;AAED,gBAAI,CAACpB,YAAL,EAAmB;AACjB,uBAAOa,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaK,gBAAvC,CADK,CAAP;AAED;AAED,gBAAI,CAACrB,WAAL,EAAkB;AAChB,uBAAOY,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaM,aAAvC,CADK,CAAP;AAED;AAED,gBAAI,CAAC1B,QAAL,EAAe;AACb,uBAAOgB,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaC,SAAvC,CADK,CAAP;AAED;AAED,gBAAI,CAAChB,UAAL,EAAiB;AACf,uBAAOW,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAaO,YAAvC,CADK,CAAP;AAED;AAEH,mBAAO,KAAKE,eAAL,CAAqB;AAC1B5B,gCAD0B;AAE1BC,kCAF0B;AAG1BC,0CAH0B;AAI1BC,wCAJ0B;AAK1BJ,kCAL0B;AAM1BK;AAN0B,aAArB,EAQNyB,IARM,CAQD,YAAA;AACJ,uBAAO,OAAKC,YAAL,EAAP;AACD,aAVM,EAWND,IAXM,CAWD,cAAE;AACN;;;AAGA,oBAAMa,UAAU;AACd,+BAAW1C,OADG;AAEd,gCAAYC,QAFE;AAGd,gCAAYC,aAAayC,QAHX;AAId,4BAAQ,iCAAoBzC,aAAa,QAAb,EAAuB,MAAvB,CAApB,CAJM;AAKd,8BAAU,iCAAoBA,aAAa,QAAb,EAAuB,QAAvB,CAApB,CALI;AAMd,mCAAeC,WAND;AAOd,gCAAYJ,QAPE;AAQd,kCAAcK;AARA,iBAAhB;AAWA,uBAAO,IAAIW,OAAJ,CAAY,UAACY,OAAD,EAAUX,MAAV,EAAgB;AACjC,wBAAMe,cAAcxB,GAAGwB,WAAH,CAClB,CAACpC,mBAAD,CADkB,EACK,OAAKiD,sBADV,CAApB;AAEA,wBAAMpC,cAAcuB,YAAYvB,WAAZ,CAAwBb,mBAAxB,CAApB;AACA,wBAAMsC,UAAUzB,YAAYqC,GAAZ,CAAgBH,OAAhB,CAAhB;AACAT,4BAAQE,OAAR,GAAkB,iBAAK;AACrBnB,+BAAqBoB,MAAMC,MAAN,CAAcC,KAAnC;AACD,qBAFD;AAGAL,4BAAQM,SAAR,GAAoB,YAAK;AACvBZ;AACD,qBAFD;AAGD,iBAXM,CAAP;AAYD,aAtCM,CAAP;AAuCD;AAED;;;;;;;;;;;oCAQYmB,K,EAAK;AAAA;;AACf,gBAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,MAAMhC,MAAN,KAAiB,CAAlD,EAAqD;AACnD,uBAAOC,QAAQC,MAAR,CACL,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAa4B,oBAAvC,CADK,CAAP;AAED;AAED,mBAAO,KAAKC,wBAAL,CAA8BF,KAA9B,EACNjB,IADM,CACD,mBAAO;AACX,oBAAI,CAACa,OAAL,EAAc;AACZ,0BAAM,OAAKzB,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAa8B,sBAAvC,CAAN;AACD;AAED,uBAAQ,OAAKnB,YAAL,GACPD,IADO,CACF,cAAE;AACN,2BAAO,IAAId,OAAJ,CAAY,UAACY,OAAD,EAAUX,MAAV,EAAgB;AACjC,4BAAMe,cAAcxB,GAAGwB,WAAH,CAClB,CAACpC,mBAAD,CADkB,EACK,OAAKiD,sBADV,CAApB;AAEA,4BAAMpC,cAAcuB,YAAYvB,WAAZ,CAAwBb,mBAAxB,CAApB;AACA,4BAAMsC,UAAUzB,YAAY0C,MAAZ,CAAmBR,QAAQ,SAAR,CAAnB,CAAhB;AACAT,gCAAQE,OAAR,GAAkB,iBAAK;AACrBnB,mCAAqBoB,MAAMC,MAAN,CAAcC,KAAnC;AACD,yBAFD;AAGAL,gCAAQM,SAAR,GAAoB,iBAAK;AACvB,gCAAkBH,MAAMC,MAAN,CAAcG,MAAd,KAAyB,CAA3C,EAA8C;AAC5CxB,uCAAO,OAAKC,aAAL,CAAmBC,MAAnB,CAA0B,iBAAOC,KAAP,CAAagC,sBAAvC,CAAP;AACA;AACD;AAEDxB,oCAAQe,OAAR;AACD,yBAPD;AAQD,qBAhBM,CAAP;AAiBD,iBAnBO,CAAR;AAoBD,aA1BM,CAAP;AA2BD;;;4BAzQgB;AACf,mBAAO,sBAAP;AACD;;;;;;kBARWrC,iB","file":"token-details-model.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n\nimport DBInterface from './db-interface';\nimport Errors from './errors';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\n\nconst FCM_TOKEN_OBJ_STORE = 'fcm_token_object_Store';\nconst DB_VERSION = 1;\n\n/** @record */\nfunction ValidateInput() {}\n/** @type {string|undefined} */\nValidateInput.prototype.fcmToken;\n/** @type {string|undefined} */\nValidateInput.prototype.swScope;\n/** @type {string|undefined} */\nValidateInput.prototype.vapidKey;\n/** @type {PushSubscription|undefined} */\nValidateInput.prototype.subscription;\n/** @type {string|undefined} */\nValidateInput.prototype.fcmSenderId;\n/** @type {string|undefined} */\nValidateInput.prototype.fcmPushSet;\n\nexport default class TokenDetailsModel extends DBInterface {\n\n  constructor() {\n    super(TokenDetailsModel.dbName, DB_VERSION);\n  }\n\n  static get dbName() {\n    return 'fcm_token_details_db';\n  }\n\n  /**\n   * @override\n   */\n  onDBUpgrade(db) {\n    var objectStore = db.createObjectStore(FCM_TOKEN_OBJ_STORE, {\n      keyPath: 'swScope'\n    });\n\n    // Make sure the sender ID can be searched\n    objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\n      unique: false\n    });\n\n    objectStore.createIndex('fcmToken', 'fcmToken', {\n      unique: true\n    });\n  }\n\n  /**\n   * This method takes an object and will check for known arguments and\n   * validate the input.\n   * @private\n   * @param {!ValidateInput} input\n   * @return {!Promise} Returns promise that resolves if input is valid,\n   * rejects otherwise.\n   */\n  validateInputs_(input) {\n    if (input.fcmToken) {\n      if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n      }\n    }\n\n    if (input.swScope) {\n      if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n      }\n    }\n\n    if (input.vapidKey) {\n      if (typeof input.vapidKey !== 'string' || input.vapidKey.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));\n        }\n    }\n\n    if (input.subscription) {\n      if (!(input.subscription instanceof PushSubscription)) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION));\n      }\n    }\n\n    if (input.fcmSenderId) {\n      if (typeof input.fcmSenderId !== 'string' ||\n        input.fcmSenderId.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SENDER_ID));\n      }\n    }\n\n    if (input.fcmPushSet) {\n      if (typeof input.fcmPushSet !== 'string' ||\n      input.fcmPushSet.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_PUSH_SET));\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Given a token, this method will look up the details in indexedDB.\n   * @param {string} fcmToken\n   * @return {Promise<Object>} The details associated with that token.\n   */\n  getTokenDetailsFromToken(fcmToken) {\n    if (!fcmToken) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n    }\n\n    return this.validateInputs_({fcmToken})\n      .then(() => {\n        return this.openDatabase();\n      })\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const index = objectStore.index('fcmToken');\n          const request = index.get(fcmToken);\n          request.onerror = function(event) {\n            reject((<IDBRequest> event.target).error);\n          };\n          request.onsuccess = function(event) {\n            const result = (<IDBRequest> event.target).result ? (<IDBRequest> event.target).result : null;\n            resolve(result);\n          };\n        });\n      });\n  }\n\n  /**\n   * Given a service worker scope, this method will look up the details in\n   * indexedDB.\n   * @public\n   * @param {string} swScope\n   * @return {Promise<Object>} The details associated with that token.\n   */\n  getTokenDetailsFromSWScope(swScope) {\n    if (!swScope) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.validateInputs_({swScope})\n      .then(() => {\n        return this.openDatabase();\n      })\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const scopeRequest = objectStore.get(swScope);\n          scopeRequest.onerror = event => {\n            reject((<IDBRequest> event.target).error);\n          };\n\n          scopeRequest.onsuccess = event => {\n            const result = (<IDBRequest> event.target).result ? (<IDBRequest> event.target).result : null;\n            resolve(result);\n          };\n        });\n      });\n  }\n\n  /**\n   * Save the details for the fcm token for re-use at a later date.\n   * @param {{swScope: !string, vapidKey: !string,\n   * subscription: !PushSubscription, fcmSenderId: !string, fcmToken: !string,\n   * fcmPushSet: !string}} input A plain js object containing args to save.\n   * @return {Promise<void>}\n   */\n  saveTokenDetails({swScope, vapidKey, subscription,\n    fcmSenderId, fcmToken, fcmPushSet}) {\n      if (!swScope) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n      }\n\n      if (!vapidKey) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));\n      }\n\n      if (!subscription) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION));\n      }\n\n      if (!fcmSenderId) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SENDER_ID));\n      }\n\n      if (!fcmToken) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n      }\n\n      if (!fcmPushSet) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_PUSH_SET));\n      }\n\n    return this.validateInputs_({\n      swScope,\n      vapidKey,\n      subscription,\n      fcmSenderId,\n      fcmToken,\n      fcmPushSet\n    })\n    .then(() => {\n      return this.openDatabase();\n    })\n    .then(db => {\n      /**\n       * @dict\n       */\n      const details = {\n        'swScope': swScope,\n        'vapidKey': vapidKey,\n        'endpoint': subscription.endpoint,\n        'auth': arrayBufferToBase64(subscription['getKey']('auth')),\n        'p256dh': arrayBufferToBase64(subscription['getKey']('p256dh')),\n        'fcmSenderId': fcmSenderId,\n        'fcmToken': fcmToken,\n        'fcmPushSet': fcmPushSet\n      };\n\n      return new Promise((resolve, reject) => {\n        const transaction = db.transaction(\n          [FCM_TOKEN_OBJ_STORE], this.TRANSACTION_READ_WRITE);\n        const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n        const request = objectStore.put(details);\n        request.onerror = event => {\n          reject((<IDBRequest> event.target).error);\n        };\n        request.onsuccess = event => {\n          resolve();\n        };\n      });\n    });\n  }\n\n  /**\n   * This method deletes details of the current FCM token.\n   * It's returning a promise in case we need to move to an async\n   * method for deleting at a later date.\n   * @param {string} token Token to be deleted\n   * @return {Promise<Object>} Resolves once the FCM token details have been\n   * deleted and returns the deleted details.\n   */\n  deleteToken(token) {\n    if (typeof token !== 'string' || token.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.INVALID_DELETE_TOKEN));\n    }\n\n    return this.getTokenDetailsFromToken(token)\n    .then(details => {\n      if (!details) {\n        throw this.errorFactory_.create(Errors.codes.DELETE_TOKEN_NOT_FOUND);\n      }\n\n      return  this.openDatabase()\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_TOKEN_OBJ_STORE], this.TRANSACTION_READ_WRITE);\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const request = objectStore.delete(details['swScope']);\n          request.onerror = event => {\n            reject((<IDBRequest> event.target).error);\n          };\n          request.onsuccess = event => {\n            if ((<IDBRequest> event.target).result === 0) {\n              reject(this.errorFactory_.create(Errors.codes.FAILED_TO_DELETE_TOKEN));\n              return;\n            }\n\n            resolve(details);\n          };\n        });\n      });\n    });\n  }\n}\n"]}