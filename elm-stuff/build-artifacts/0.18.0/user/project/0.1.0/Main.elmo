var _user$project$Main$startSyncWithFirebase = function (user) {
	return _user$project$Ext_Return$maybeEffect(
		A2(_user$project$Ext_Function_Infix_ops['>>?'], _user$project$Model$getMaybeUserId, _user$project$Firebase$startSyncCmd));
};
var _user$project$Main$positionScheduleMenuCmd = function (todo) {
	return _user$project$DomPorts$positionPopupMenu(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'#edit-schedule-button-',
			_user$project$Document$getId(todo)));
};
var _user$project$Main$positionProjectMenuCmd = function (todo) {
	return _user$project$DomPorts$positionPopupMenu(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'#edit-project-button-',
			_user$project$Document$getId(todo)));
};
var _user$project$Main$positionContextMenuCmd = function (todo) {
	return _user$project$DomPorts$positionPopupMenu(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'#edit-context-button-',
			_user$project$Document$getId(todo)));
};
var _user$project$Main$firebaseSetupOnDisconnectCmd = function (model) {
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
		_user$project$Model$getMaybeUserId(model),
		_user$project$Firebase$setupOnDisconnectCmd(model.firebaseClient));
};
var _user$project$Main$firebaseUpdateClientCmd = function (model) {
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
		_user$project$Model$getMaybeUserId(model),
		_user$project$Firebase$updateClientCmd(model.firebaseClient));
};
var _user$project$Main$command = _Fresheyeball$elm_return$Return$command;
var _user$project$Main$maybeMapToCmd = function (fn) {
	return A2(
		_user$project$Ext_Function_Infix_ops['>>?='],
		_elm_lang$core$Maybe$map(fn),
		_elm_lang$core$Platform_Cmd$none);
};
var _user$project$Main$setDomFocusToFocusInEntityCmd = _user$project$Model$commonMsg.focus('.entity-list > [tabindex=0]');
var _user$project$Main$updateTodoAndMaybeAlsoSelected = F2(
	function (action, todo) {
		return _Fresheyeball$elm_return$Return$andThen(
			A2(
				_user$project$Model$updateTodoAndMaybeAlsoSelected,
				action,
				_user$project$Document$getId(todo)));
	});
var _user$project$Main$persist = function (lens) {
	return _Fresheyeball$elm_return$Return$andThen(
		function (m) {
			return A2(
				_elm_lang$core$Tuple$mapFirst,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'],
					_user$project$Ext_Record$set(lens),
					m),
				_user$project$Store$persist(
					A2(_user$project$Ext_Record$get, lens, m)));
		});
};
var _user$project$Main$persistAll = function (_p0) {
	return A2(
		_user$project$Main$persist,
		_user$project$Model$contextStore,
		A2(
			_user$project$Main$persist,
			_user$project$Model$todoStore,
			A2(_user$project$Main$persist, _user$project$Model$projectStore, _p0)));
};
var _user$project$Main$modelTapLog = A2(_user$project$Ext_Function_Infix_ops['>>>'], _user$project$Ext_Debug$tapLog, _Fresheyeball$elm_return$Return$map);
var _user$project$Main$map = _Fresheyeball$elm_return$Return$map;
var _user$project$Main$withNow = function (toMsg) {
	return _user$project$Main$command(
		A2(_elm_lang$core$Task$perform, toMsg, _elm_lang$core$Time$now));
};
var _user$project$Main$set = A2(_user$project$Ext_Function_Infix_ops['>>>'], _user$project$Ext_Record$set, _user$project$Main$map);
var _user$project$Main$over = A2(_user$project$Ext_Function_Infix_ops['>>>'], _user$project$Ext_Record$over, _user$project$Main$map);
var _user$project$Main$subscriptions = function (m) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second * 1, _user$project$Model$OnNowChanged),
			_1: {
				ctor: '::',
				_0: _user$project$Ext_Keyboard$subscription(_user$project$Model$OnKeyboardMsg),
				_1: {
					ctor: '::',
					_0: _user$project$Ext_Keyboard$ups(_user$project$Model$OnGlobalKeyUp),
					_1: {
						ctor: '::',
						_0: _user$project$Store$onChange(_user$project$Model$OnPouchDBChange),
						_1: {
							ctor: '::',
							_0: _user$project$Firebase$onChange(_user$project$Model$OnFirebaseChange),
							_1: {
								ctor: '::',
								_0: _scottcorgan$keyboard_combo$Keyboard_Combo$subscriptions(m.keyComboModel),
								_1: {
									ctor: '::',
									_0: _user$project$Todo_Main$subscriptions(m),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$createTodoNotification = function (todo) {
	var id = _user$project$Document$getId(todo);
	return {
		title: _user$project$Todo$getText(todo),
		tag: id,
		data: {id: id}
	};
};
var _user$project$Main$closeNotification = _elm_lang$core$Native_Platform.outgoingPort(
	'closeNotification',
	function (v) {
		return v;
	});
var _user$project$Main$reminderOverlayAction = function (action) {
	return _Fresheyeball$elm_return$Return$andThen(
		function (model) {
			return function () {
				var _p1 = model.reminderOverlay;
				if (_p1.ctor === 'Active') {
					var _p8 = _p1._1;
					var todoId = _p8.id;
					var _p2 = action;
					switch (_p2.ctor) {
						case 'Dismiss':
							return function (_p3) {
								return A2(
									_Fresheyeball$elm_return$Return$command,
									_user$project$Main$closeNotification(todoId),
									A2(
										_elm_lang$core$Tuple$mapFirst,
										_user$project$Model$removeReminderOverlay,
										A3(_user$project$Model$updateTodo, _user$project$Todo$TurnReminderOff, todoId, _p3)));
							};
						case 'ShowSnoozeOptions':
							return function (_p4) {
								return _Fresheyeball$elm_return$Return$singleton(
									A2(_user$project$Model$setReminderOverlayToSnoozeView, _p8, _p4));
							};
						case 'SnoozeTill':
							return function (_p5) {
								return A2(
									_Fresheyeball$elm_return$Return$command,
									_user$project$Main$closeNotification(todoId),
									A2(
										_Fresheyeball$elm_return$Return$andThen,
										A2(_user$project$Model$snoozeTodoWithOffset, _p2._0, todoId),
										_Fresheyeball$elm_return$Return$singleton(_p5)));
							};
						case 'Close':
							return function (_p6) {
								return _Fresheyeball$elm_return$Return$singleton(
									_user$project$Model$removeReminderOverlay(_p6));
							};
						default:
							return function (_p7) {
								return A2(
									_Fresheyeball$elm_return$Return$command,
									_user$project$Main$closeNotification(todoId),
									A2(
										_elm_lang$core$Tuple$mapFirst,
										_user$project$Model$removeReminderOverlay,
										A3(_user$project$Model$updateTodo, _user$project$Todo$MarkDone, todoId, _p7)));
							};
					}
				} else {
					return _Fresheyeball$elm_return$Return$singleton;
				}
			}()(model);
		});
};
var _user$project$Main$syncWithRemotePouch = _elm_lang$core$Native_Platform.outgoingPort(
	'syncWithRemotePouch',
	function (v) {
		return v;
	});
var _user$project$Main$startAlarm = _elm_lang$core$Native_Platform.outgoingPort(
	'startAlarm',
	function (v) {
		return null;
	});
var _user$project$Main$showTodoNotificationCmd = function (_p9) {
	var _p10 = _p9;
	var cmds = {
		ctor: '::',
		_0: _p10._1,
		_1: {
			ctor: '::',
			_0: _user$project$Todo_Main$showTodoReminderNotification(
				_user$project$Main$createTodoNotification(_p10._0._0)),
			_1: {
				ctor: '::',
				_0: _user$project$Main$startAlarm(
					{ctor: '_Tuple0'}),
				_1: {ctor: '[]'}
			}
		}
	};
	return A2(_elm_lang$core$Platform_Cmd_ops['!'], _p10._0._1, cmds);
};
var _user$project$Main$sendNotifications = _user$project$Ext_Return$andThenMaybe(
	A2(_user$project$Ext_Function_Infix_ops['>>?'], _user$project$Model$findAndSnoozeOverDueTodo, _user$project$Main$showTodoNotificationCmd));
var _user$project$Main$onUpdateNow = function (now) {
	return function (_p11) {
		return A2(
			_user$project$Main$andThenUpdate,
			_user$project$Model$onUpdateTodoTimeTracker,
			_user$project$Main$sendNotifications(
				A2(
					_Fresheyeball$elm_return$Return$map,
					_user$project$Model$setNow(now),
					_p11)));
	};
};
var _user$project$Main$andThenUpdate = function (_p12) {
	return _Fresheyeball$elm_return$Return$andThen(
		_user$project$Main$update(_p12));
};
var _user$project$Main$update = function (msg) {
	return function (_p13) {
		return _user$project$Main$persistAll(
			function () {
				var _p14 = msg;
				switch (_p14.ctor) {
					case 'OnCommonMsg':
						return _user$project$CommonMsg$update(_p14._0);
					case 'OnPouchDBChange':
						return _user$project$Ext_Return$andThenMaybe(
							A2(
								_user$project$Ext_Function_Infix_ops['>>?'],
								A2(
									_user$project$Ext_Function_Infix_ops['>>?'],
									A2(_user$project$Model$upsertEncodedDocOnPouchDBChange, _p14._0, _p14._1),
									_elm_lang$core$Tuple$mapFirst(_user$project$Model$OnEntityUpsert)),
								_elm_lang$core$Basics$uncurry(_user$project$Main$update)));
					case 'OnEntityUpsert':
						var _p15 = _p14._0;
						if (_p15.ctor === 'TodoEntity') {
							return _user$project$Main$andThenTodoMsg(
								_user$project$Todo_Msg$Upsert(_p15._0));
						} else {
							return _elm_lang$core$Basics$identity;
						}
					case 'OnFirebaseChange':
						return _Fresheyeball$elm_return$Return$effect_(
							A2(_user$project$Model$upsertEncodedDocOnFirebaseChange, _p14._0, _p14._1));
					case 'OnSignIn':
						return function (_p16) {
							return A2(
								_user$project$Main$andThenUpdate,
								_user$project$Model$OnDeactivateEditingMode,
								A2(
									_Fresheyeball$elm_return$Return$command,
									_user$project$Firebase$signIn(
										{ctor: '_Tuple0'}),
									_p16));
						};
					case 'SignOut':
						return _Fresheyeball$elm_return$Return$command(
							_user$project$Firebase$signOut(
								{ctor: '_Tuple0'}));
					case 'OnUserChanged':
						var _p18 = _p14._0;
						return function (_p17) {
							return A2(
								_user$project$Main$startSyncWithFirebase,
								_p18,
								A2(
									_user$project$Ext_Return$maybeEffect,
									_user$project$Main$firebaseSetupOnDisconnectCmd,
									A2(
										_user$project$Ext_Return$maybeEffect,
										_user$project$Main$firebaseUpdateClientCmd,
										A2(
											_Fresheyeball$elm_return$Return$map,
											_user$project$Model$setUser(_p18),
											_p17))));
						};
					case 'OnFCMTokenChanged':
						var _p21 = _p14._0;
						var _p19 = A2(_elm_lang$core$Debug$log, 'fcm: token', _p21);
						return function (_p20) {
							return A2(
								_user$project$Ext_Return$maybeEffect,
								_user$project$Main$firebaseUpdateClientCmd,
								A2(
									_Fresheyeball$elm_return$Return$map,
									_user$project$Model$setFCMToken(_p21),
									_p20));
						};
					case 'OnFirebaseConnectionChanged':
						return function (_p22) {
							return A2(
								_user$project$Ext_Return$maybeEffect,
								_user$project$Main$firebaseUpdateClientCmd,
								A2(
									_Fresheyeball$elm_return$Return$map,
									_user$project$Model$updateFirebaseConnection(_p14._0),
									_p22));
						};
					case 'OnSetDomFocusToFocusInEntity':
						return _user$project$Main$andThenUpdate(_user$project$Main$setDomFocusToFocusInEntityCmd);
					case 'OnEntityListKeyDown':
						var _p26 = _p14._0;
						var _p23 = _p14._1.key;
						switch (_p23.ctor) {
							case 'ArrowUp':
								return function (_p24) {
									return A2(
										_user$project$Main$andThenUpdate,
										_user$project$Model$OnSetDomFocusToFocusInEntity,
										A2(
											_Fresheyeball$elm_return$Return$map,
											A2(_user$project$Model$moveFocusBy, -1, _p26),
											_p24));
								};
							case 'ArrowDown':
								return function (_p25) {
									return A2(
										_user$project$Main$andThenUpdate,
										_user$project$Model$OnSetDomFocusToFocusInEntity,
										A2(
											_Fresheyeball$elm_return$Return$map,
											A2(_user$project$Model$moveFocusBy, 1, _p26),
											_p25));
								};
							default:
								return _elm_lang$core$Basics$identity;
						}
					case 'ToggleDrawer':
						return _Fresheyeball$elm_return$Return$map(_user$project$Model$toggleLayoutForceNarrow);
					case 'OnLayoutNarrowChanged':
						return _Fresheyeball$elm_return$Return$map(
							_user$project$Model$setLayoutNarrow(_p14._0));
					case 'RemotePouchSync':
						return function (_p27) {
							return A2(
								_Fresheyeball$elm_return$Return$effect_,
								function (_p28) {
									return _user$project$Main$syncWithRemotePouch(
										function (_) {
											return _.pouchDBRemoteSyncURI;
										}(_p28));
								},
								A2(_user$project$Main$andThenUpdate, _user$project$Model$SaveCurrentForm, _p27));
						};
					case 'OnNotificationClicked':
						var todoId = _p14._0.data.id;
						return _elm_lang$core$Native_Utils.eq(_p14._0.action, 'mark-done') ? function (_p29) {
							return A2(
								_user$project$Main$command,
								_user$project$Main$closeNotification(todoId),
								A2(
									_Fresheyeball$elm_return$Return$andThen,
									A2(_user$project$Model$updateTodo, _user$project$Todo$MarkDone, todoId),
									_p29));
						} : function (_p30) {
							return _user$project$Main$andThenUpdate(
								_user$project$Model$ShowReminderOverlayForTodoId(_p30));
						}(todoId);
					case 'ToggleShowDeletedEntity':
						return _Fresheyeball$elm_return$Return$map(
							function (m) {
								return _elm_lang$core$Native_Utils.update(
									m,
									{showDeleted: !m.showDeleted});
							});
					case 'TodoAction':
						return _elm_lang$core$Basics$identity;
					case 'ReminderOverlayAction':
						return _user$project$Main$reminderOverlayAction(_p14._0);
					case 'ToggleTodoDone':
						return _Fresheyeball$elm_return$Return$andThen(
							A2(_user$project$Model$updateTodo, _user$project$Todo$ToggleDone, _p14._0));
					case 'SetTodoContext':
						return function (_p31) {
							return A2(
								_user$project$Main$andThenUpdate,
								_user$project$Model$OnDeactivateEditingMode,
								A3(
									_user$project$Main$updateTodoAndMaybeAlsoSelected,
									_user$project$Todo$SetContext(_p14._0),
									_p14._1,
									_p31));
						};
					case 'SetTodoProject':
						return function (_p32) {
							return A2(
								_user$project$Main$andThenUpdate,
								_user$project$Model$OnDeactivateEditingMode,
								A3(
									_user$project$Main$updateTodoAndMaybeAlsoSelected,
									_user$project$Todo$SetProject(_p14._0),
									_p14._1,
									_p32));
						};
					case 'NewTodoTextChanged':
						return _Fresheyeball$elm_return$Return$map(
							A2(_user$project$Model$updateNewTodoText, _p14._0, _p14._1));
					case 'OnDeactivateEditingMode':
						return function (_p33) {
							return A2(
								_user$project$Main$andThenUpdate,
								_user$project$Main$setDomFocusToFocusInEntityCmd,
								A2(_Fresheyeball$elm_return$Return$map, _user$project$Model$deactivateEditingMode, _p33));
						};
					case 'OnCreateDefaultEntities':
						return function (_p34) {
							return A2(
								_user$project$Main$andThenUpdate,
								_user$project$Model$OnDeactivateEditingMode,
								A2(
									_user$project$Main$map,
									function (_p35) {
										return A2(
											_user$project$Model$createTodo,
											'use `ArrowUp` and `ArrowDown` keys to focus item',
											A2(
												_user$project$Model$createTodo,
												'press `s` to set schedule/reminder',
												A2(
													_user$project$Model$createTodo,
													'press `p` to set project',
													A2(
														_user$project$Model$createTodo,
														'press `c` to set context',
														A2(
															_user$project$Model$createTodo,
															'press `e` to edit text',
															A2(
																_user$project$Model$createTodo,
																'press `i` to create and add to Inbox',
																A2(
																	_user$project$Model$createTodo,
																	'Click `+` or press `q` for quick add',
																	A2(
																		_user$project$Model$createContext,
																		'zz SomeDay/Maybe',
																		A2(
																			_user$project$Model$createContext,
																			'3 Waiting For',
																			A2(
																				_user$project$Model$createContext,
																				'2 Next Actions',
																				A2(
																					_user$project$Model$createContext,
																					'1 Now',
																					A2(
																						_user$project$Model$createProject,
																						'GTD: Learn',
																						A2(_user$project$Model$createProject, 'Explore SimpleGTD.com', _p35)))))))))))));
									},
									_p34));
						};
					case 'NewTodoKeyUp':
						var _p36 = _p14._0.key;
						if (_p36.ctor === 'Enter') {
							return _user$project$Main$andThenUpdate(_user$project$Model$SaveCurrentForm);
						} else {
							return _elm_lang$core$Basics$identity;
						}
					case 'StartEditingReminder':
						var _p38 = _p14._0;
						return function (_p37) {
							return A2(
								_Fresheyeball$elm_return$Return$command,
								_user$project$Main$positionScheduleMenuCmd(_p38),
								A2(
									_Fresheyeball$elm_return$Return$map,
									_user$project$Model$startEditingReminder(_p38),
									_p37));
						};
					case 'StartEditingContext':
						var _p40 = _p14._0;
						return function (_p39) {
							return A2(
								_Fresheyeball$elm_return$Return$command,
								_user$project$Main$positionContextMenuCmd(_p40),
								A2(
									_Fresheyeball$elm_return$Return$map,
									_user$project$Model$startEditingTodoContext(_p40),
									_p39));
						};
					case 'StartEditingProject':
						var _p42 = _p14._0;
						return function (_p41) {
							return A2(
								_Fresheyeball$elm_return$Return$command,
								_user$project$Main$positionProjectMenuCmd(_p42),
								A2(
									_Fresheyeball$elm_return$Return$map,
									_user$project$Model$startEditingTodoProject(_p42),
									_p41));
						};
					case 'UpdateTodoForm':
						return _Fresheyeball$elm_return$Return$map(
							function (_p43) {
								return _user$project$Model$setEditMode(
									_user$project$ExclusiveMode$EditTodo(_p43));
							}(
								A2(_user$project$Todo_Form$set, _p14._1, _p14._0)));
					case 'OnEditTodoProjectMenuStateChanged':
						return function (_p44) {
							return _user$project$DomPorts$autoFocusInputCmd(
								A2(
									_Fresheyeball$elm_return$Return$map,
									function (_p45) {
										return _user$project$Model$setEditMode(
											_user$project$ExclusiveMode$EditTodoProject(_p45));
									}(
										A2(_user$project$Todo_GroupForm$setMenuState, _p14._1, _p14._0)),
									_p44));
						};
					case 'OnEditTodoContextMenuStateChanged':
						return function (_p46) {
							return _user$project$DomPorts$autoFocusInputCmd(
								A2(
									_Fresheyeball$elm_return$Return$map,
									function (_p47) {
										return _user$project$Model$setEditMode(
											_user$project$ExclusiveMode$EditTodoContext(_p47));
									}(
										A2(_user$project$Todo_GroupForm$setMenuState, _p14._1, _p14._0)),
									_p46));
						};
					case 'UpdateRemoteSyncFormUri':
						return _Fresheyeball$elm_return$Return$map(
							function (_p48) {
								return _user$project$Model$setEditMode(
									_user$project$ExclusiveMode$EditSyncSettings(_p48));
							}(
								_elm_lang$core$Native_Utils.update(
									_p14._0,
									{uri: _p14._1})));
					case 'SwitchView':
						return _Fresheyeball$elm_return$Return$map(
							_user$project$Model$switchToView(_p14._0));
					case 'SetGroupByView':
						return _Fresheyeball$elm_return$Return$map(
							_user$project$Model$setEntityListViewType(_p14._0));
					case 'ShowReminderOverlayForTodoId':
						return _Fresheyeball$elm_return$Return$map(
							_user$project$Model$showReminderOverlayForTodoId(_p14._0));
					case 'OnNowChanged':
						return _user$project$Main$onUpdateNow(_p14._0);
					case 'OnKeyboardMsg':
						return function (_p49) {
							return A2(
								_user$project$DomPorts$focusSelectorIfNoFocusCmd,
								'.entity-list > [tabindex=0]',
								A2(
									_Fresheyeball$elm_return$Return$map,
									_user$project$Model$updateKeyboardState(
										_user$project$Ext_Keyboard$update(_p14._0)),
									_p49));
						};
					case 'SaveCurrentForm':
						return function (_p50) {
							return A2(
								_user$project$Main$andThenUpdate,
								_user$project$Model$OnDeactivateEditingMode,
								A2(_Fresheyeball$elm_return$Return$andThen, _user$project$Model$saveCurrentForm, _p50));
						};
					case 'NewTodo':
						return function (_p51) {
							return _user$project$DomPorts$autoFocusInputCmd(
								A2(_Fresheyeball$elm_return$Return$map, _user$project$Model$activateNewTodoModeWithFocusInEntityAsReference, _p51));
						};
					case 'NewTodoForInbox':
						return function (_p52) {
							return _user$project$DomPorts$autoFocusInputCmd(
								A2(_Fresheyeball$elm_return$Return$map, _user$project$Model$activateNewTodoModeWithInboxAsReference, _p52));
						};
					case 'NewProject':
						return function (_p53) {
							return _user$project$DomPorts$autoFocusInputCmd(
								A2(_Fresheyeball$elm_return$Return$map, _user$project$Model$createAndEditNewProject, _p53));
						};
					case 'NewContext':
						return function (_p54) {
							return _user$project$DomPorts$autoFocusInputCmd(
								A2(_Fresheyeball$elm_return$Return$map, _user$project$Model$createAndEditNewContext, _p54));
						};
					case 'OnEntityAction':
						var _p58 = _p14._0;
						var _p55 = _p14._1;
						switch (_p55.ctor) {
							case 'StartEditing':
								return function (_p56) {
									return _user$project$DomPorts$autoFocusInputCmd(
										A2(
											_Fresheyeball$elm_return$Return$map,
											_user$project$Model$startEditingEntity(_p58),
											_p56));
								};
							case 'NameChanged':
								return _Fresheyeball$elm_return$Return$map(
									A2(_user$project$Model$updateEditModeNameChanged, _p55._0, _p58));
							case 'Save':
								return _user$project$Main$andThenUpdate(_user$project$Model$SaveCurrentForm);
							case 'ToggleDeleted':
								return function (_p57) {
									return A2(
										_user$project$Main$andThenUpdate,
										_user$project$Model$OnDeactivateEditingMode,
										A2(
											_Fresheyeball$elm_return$Return$andThen,
											_user$project$Model$toggleDeleteEntity(_p58),
											_p57));
								};
							case 'OnFocusIn':
								return _Fresheyeball$elm_return$Return$map(
									_user$project$Model$setFocusInEntity(_p58));
							case 'ToggleSelected':
								return _Fresheyeball$elm_return$Return$map(
									_user$project$Model$toggleEntitySelection(_p58));
							default:
								return _Fresheyeball$elm_return$Return$map(
									_user$project$Model$switchToEntityListViewFromEntity(_p58));
						}
					case 'OnLaunchBarMsgWithNow':
						var _p63 = _p14._1;
						var _p59 = _p14._0;
						switch (_p59.ctor) {
							case 'OnEnter':
								return function (_p60) {
									return function () {
										var _p61 = _p59._0;
										switch (_p61.ctor) {
											case 'Project':
												return _user$project$Main$map(
													_user$project$Model$switchToProjectView(_p61._0));
											case 'Projects':
												return _user$project$Main$map(
													_user$project$Model$setEntityListViewType(_user$project$Entity$ProjectsView));
											case 'Context':
												return _user$project$Main$map(
													_user$project$Model$switchToContextView(_p61._0));
											default:
												return _user$project$Main$map(
													_user$project$Model$setEntityListViewType(_user$project$Entity$ContextsView));
										}
									}()(
										A2(_user$project$Main$andThenUpdate, _user$project$Model$OnDeactivateEditingMode, _p60));
								};
							case 'OnInputChanged':
								return _user$project$Main$map(
									A3(_user$project$Model$updateLaunchBarInput, _p63, _p59._1, _p59._0));
							default:
								return function (_p62) {
									return _user$project$DomPorts$autoFocusInputCmd(
										A2(
											_user$project$Main$map,
											_user$project$Model$activateLaunchBar(_p63),
											_p62));
								};
						}
					case 'OnLaunchBarMsg':
						return _user$project$Main$withNow(
							_user$project$Model$OnLaunchBarMsgWithNow(_p14._0));
					case 'OnCloseNotification':
						return _user$project$Main$command(
							_user$project$Main$closeNotification(_p14._0));
					case 'OnGlobalKeyUp':
						return _user$project$Main$onGlobalKeyUp(_p14._0);
					case 'OnKeyCombo':
						return _Fresheyeball$elm_return$Return$andThen(
							_user$project$Model$updateCombo(_p14._0));
					case 'OnTodoMsg':
						return _user$project$Main$withNow(
							_user$project$Model$OnTodoMsgWithTime(_p14._0));
					default:
						return A3(_user$project$Todo_Main$update, _user$project$Main$andThenUpdate, _p14._1, _p14._0);
				}
			}()(
				_Fresheyeball$elm_return$Return$singleton(_p13)));
	};
};
var _user$project$Main$andThenTodoMsg = function (_p64) {
	return _user$project$Main$andThenUpdate(
		_user$project$Model$OnTodoMsg(_p64));
};
var _user$project$Main$onGlobalKeyUp = function (key) {
	return A2(
		_user$project$Ext_Return$with,
		_user$project$Model$getEditMode,
		function (editMode) {
			var _p65 = {ctor: '_Tuple2', _0: key, _1: editMode};
			_v10_2:
			do {
				if (_p65.ctor === '_Tuple2') {
					if (_p65._1.ctor === 'None') {
						var _p66 = _p65._0;
						switch (_p66.ctor) {
							case 'Escape':
								return _Fresheyeball$elm_return$Return$map(_user$project$Model$clearSelection);
							case 'CharQ':
								return _user$project$Main$andThenUpdate(_user$project$Model$NewTodo);
							case 'CharI':
								return _user$project$Main$andThenUpdate(_user$project$Model$NewTodoForInbox);
							case 'Slash':
								return _user$project$Main$andThenUpdate(
									_user$project$Model$OnLaunchBarMsg(_user$project$LaunchBar$Open));
							default:
								return _elm_lang$core$Basics$identity;
						}
					} else {
						if (_p65._0.ctor === 'Escape') {
							return _user$project$Main$andThenUpdate(_user$project$Model$OnDeactivateEditingMode);
						} else {
							break _v10_2;
						}
					}
				} else {
					break _v10_2;
				}
			} while(false);
			return _elm_lang$core$Basics$identity;
		});
};
var _user$project$Main$main = _rgrempel$elm_route_url$RouteUrl$programWithFlags(
	{delta2url: _user$project$Routes$delta2hash, location2messages: _user$project$Routes$hash2messages, init: _user$project$Model$init, update: _user$project$Main$update, view: _user$project$View$init, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (appVersion) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (config) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (developmentMode) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (deviceId) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (encodedContextList) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (encodedProjectList) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (encodedTodoList) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (now) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (pouchDBRemoteSyncURI) {
																			return _elm_lang$core$Json_Decode$succeed(
																				{appVersion: appVersion, config: config, developmentMode: developmentMode, deviceId: deviceId, encodedContextList: encodedContextList, encodedProjectList: encodedProjectList, encodedTodoList: encodedTodoList, now: now, pouchDBRemoteSyncURI: pouchDBRemoteSyncURI});
																		},
																		A2(_elm_lang$core$Json_Decode$field, 'pouchDBRemoteSyncURI', _elm_lang$core$Json_Decode$string));
																},
																A2(_elm_lang$core$Json_Decode$field, 'now', _elm_lang$core$Json_Decode$float));
														},
														A2(
															_elm_lang$core$Json_Decode$field,
															'encodedTodoList',
															_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value)));
												},
												A2(
													_elm_lang$core$Json_Decode$field,
													'encodedProjectList',
													_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value)));
										},
										A2(
											_elm_lang$core$Json_Decode$field,
											'encodedContextList',
											_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value)));
								},
								A2(_elm_lang$core$Json_Decode$field, 'deviceId', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'developmentMode', _elm_lang$core$Json_Decode$bool));
				},
				A2(
					_elm_lang$core$Json_Decode$field,
					'config',
					A2(
						_elm_lang$core$Json_Decode$andThen,
						function (isFirstVisit) {
							return _elm_lang$core$Json_Decode$succeed(
								{isFirstVisit: isFirstVisit});
						},
						A2(_elm_lang$core$Json_Decode$field, 'isFirstVisit', _elm_lang$core$Json_Decode$bool))));
		},
		A2(_elm_lang$core$Json_Decode$field, 'appVersion', _elm_lang$core$Json_Decode$string)));
var _user$project$Main$onMsgList = _elm_lang$core$Basics$flip(
	_elm_lang$core$List$foldl(
		function (_p67) {
			return _Fresheyeball$elm_return$Return$andThen(
				_user$project$Main$update(_p67));
		}));
var _user$project$Main$triggerAlarmCmd = function (bool) {
	return bool ? _user$project$Main$startAlarm(
		{ctor: '_Tuple0'}) : _elm_lang$core$Platform_Cmd$none;
};
var _user$project$Main$stopAlarm = _elm_lang$core$Native_Platform.outgoingPort(
	'stopAlarm',
	function (v) {
		return null;
	});
