var _ydschneider$regex_builder$RegexBuilder$toRegexString = function (f) {
	return _ydschneider$regex_builder$Internal$internalToString(
		f(_ydschneider$regex_builder$Internal$Empty));
};
var _ydschneider$regex_builder$RegexBuilder$toRegex = function (_p0) {
	return _elm_lang$core$Regex$regex(
		_ydschneider$regex_builder$RegexBuilder$toRegexString(_p0));
};
var _ydschneider$regex_builder$RegexBuilder$anyChar = _ydschneider$regex_builder$Internal$Raw('.');
var _ydschneider$regex_builder$RegexBuilder$noWhiteSpace = _ydschneider$regex_builder$Internal$Raw('\\S');
var _ydschneider$regex_builder$RegexBuilder$whiteSpace = _ydschneider$regex_builder$Internal$Raw('\\s');
var _ydschneider$regex_builder$RegexBuilder$noDigit = _ydschneider$regex_builder$Internal$Raw('\\D');
var _ydschneider$regex_builder$RegexBuilder$digit = _ydschneider$regex_builder$Internal$Raw('\\d');
var _ydschneider$regex_builder$RegexBuilder$many = F2(
	function (f, i) {
		var _p1 = f(_ydschneider$regex_builder$Internal$Empty);
		_v0_3:
		do {
			switch (_p1.ctor) {
				case 'Postfix':
					if (_p1._2.ctor === 'Empty') {
						if (_p1._0.ctor === 'OnePlus') {
							return A3(_ydschneider$regex_builder$Internal$Postfix, _ydschneider$regex_builder$Internal$OnePlus, _p1._1, i);
						} else {
							return A3(_ydschneider$regex_builder$Internal$Postfix, _ydschneider$regex_builder$Internal$ZeroPlus, _p1._1, i);
						}
					} else {
						break _v0_3;
					}
				case 'Empty':
					return i;
				default:
					break _v0_3;
			}
		} while(false);
		return A3(
			_ydschneider$regex_builder$Internal$Postfix,
			_ydschneider$regex_builder$Internal$OnePlus,
			f(_ydschneider$regex_builder$Internal$Empty),
			i);
	});
var _ydschneider$regex_builder$RegexBuilder$maybe = F2(
	function (f, i) {
		var _p2 = f(_ydschneider$regex_builder$Internal$Empty);
		_v1_3:
		do {
			switch (_p2.ctor) {
				case 'Postfix':
					if (_p2._2.ctor === 'Empty') {
						if (_p2._0.ctor === 'ZeroOrOne') {
							return A3(_ydschneider$regex_builder$Internal$Postfix, _ydschneider$regex_builder$Internal$ZeroOrOne, _p2._1, i);
						} else {
							return A3(_ydschneider$regex_builder$Internal$Postfix, _ydschneider$regex_builder$Internal$ZeroPlus, _p2._1, i);
						}
					} else {
						break _v1_3;
					}
				case 'Empty':
					return i;
				default:
					break _v1_3;
			}
		} while(false);
		return A3(
			_ydschneider$regex_builder$Internal$Postfix,
			_ydschneider$regex_builder$Internal$ZeroOrOne,
			f(_ydschneider$regex_builder$Internal$Empty),
			i);
	});
var _ydschneider$regex_builder$RegexBuilder$noneOf = _ydschneider$regex_builder$Internal$NoneOf;
var _ydschneider$regex_builder$RegexBuilder$oneOf = function (cs) {
	var _p3 = cs;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Basics$identity;
	} else {
		return _ydschneider$regex_builder$Internal$OneOf(cs);
	}
};
var _ydschneider$regex_builder$RegexBuilder$either = function (fs) {
	var flatten = F2(
		function (x, rs) {
			var _p4 = x(_ydschneider$regex_builder$Internal$Empty);
			if ((_p4.ctor === 'Choice') && (_p4._1.ctor === 'Empty')) {
				return A2(
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					rs,
					A2(
						_elm_lang$core$List$filter,
						A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, rs),
						_p4._0));
			} else {
				var _p5 = _p4;
				return A2(_elm_lang$core$List$member, _p5, rs) ? rs : {ctor: '::', _0: _p5, _1: rs};
			}
		});
	return _ydschneider$regex_builder$Internal$Choice(
		A3(
			_elm_lang$core$List$foldr,
			flatten,
			{ctor: '[]'},
			fs));
};
var _ydschneider$regex_builder$RegexBuilder$remember = function (f) {
	var _p6 = f(_ydschneider$regex_builder$Internal$Empty);
	if (_p6.ctor === 'Empty') {
		return _elm_lang$core$Basics$identity;
	} else {
		return _ydschneider$regex_builder$Internal$Remember(_p6);
	}
};
var _ydschneider$regex_builder$RegexBuilder$exactly = function (s) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (x, y) {
				return function (_p7) {
					return y(
						x(_p7));
				};
			}),
		_elm_lang$core$Basics$identity,
		A2(
			_elm_lang$core$List$map,
			_ydschneider$regex_builder$Internal$Unescaped,
			_elm_lang$core$String$toList(s)));
};
var _ydschneider$regex_builder$RegexBuilder$char = _ydschneider$regex_builder$Internal$Unescaped;
