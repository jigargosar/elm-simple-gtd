{"version":3,"sources":["test/typescript/typescript-import-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAG5B,0FAAmF;AACnF,gFAA0E;AAE1E,KAAK,CAAC,yBAAyB,EAAE;IAE/B,KAAK,CAAC,QAAQ,EAAE;QAEd,IAAI,OAAgC,CAAC;QAErC,KAAK,CAAC;YACJ,OAAO,GAAG,IAAI,mDAAuB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE;YACvB,MAAM,MAAM,GAAG,EAAE,CAAC;YAClB,MAAM,MAAM,GAAG,IAAI,0CAAmB,EAAE,CAAC;YACzC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACjD,MAAM,KAAK,GAAG,CAAM,OAAgB,oDAAK,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YACnE,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACvD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,uBAAuB,EAAE;YAC5B,MAAM,MAAM,GAAG;;;;OAId,CAAC;YACF,MAAM,MAAM,GAAG,IAAI,0CAAmB,EAAE,CAAC;YACzC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACjD,MAAM,KAAK,GAAG,CAAM,OAAgB,oDAAK,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YACnE,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACvD,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;gBACrD,CAAC,WAAW,EAAE,MAAM,CAAC;gBACrB,CAAC,WAAW,EAAE,OAAO,CAAC;gBACtB,CAAC,WAAW,EAAE,SAAS,CAAC;aACzB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"typescript-import-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {Visitor} from '../../typescript/typescript-document';\nimport {TypeScriptImportScanner} from '../../typescript/typescript-import-scanner';\nimport {TypeScriptPreparser} from '../../typescript/typescript-preparser';\n\nsuite('TypeScriptImportScanner', () => {\n\n  suite('scan()', () => {\n\n    let scanner: TypeScriptImportScanner;\n\n    setup(() => {\n      scanner = new TypeScriptImportScanner();\n    });\n\n    test('finds no imports', async() => {\n      const source = ``;\n      const parser = new TypeScriptPreparser();\n      const document = parser.parse(source, 'test.ts');\n      const visit = async(visitor: Visitor) => document.visit([visitor]);\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 0);\n    });\n\n    test('finds multiple import', async() => {\n      const source = `\n        import * as x from './x.ts';\n        import * as y from '/y.ts';\n        import * as z from '../z.ts';\n      `;\n      const parser = new TypeScriptPreparser();\n      const document = parser.parse(source, 'test.ts');\n      const visit = async(visitor: Visitor) => document.visit([visitor]);\n      const {features} = await scanner.scan(document, visit);\n      assert.deepEqual(features.map((f) => [f.type, f.url]), [\n        ['js-import', 'x.ts'],\n        ['js-import', '/y.ts'],\n        ['js-import', '../z.ts'],\n      ]);\n    });\n\n  });\n\n});\n"]}