"use strict";
/// <reference path="../../node_modules/@types/mocha/index.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const path = require("path");
const polymer_project_1 = require("../polymer-project");
const testProjectRoot = path.resolve('test-fixtures/custom-elements-es5-adapter');
suite('Custom Elements ES5 Adapter', () => {
    let defaultProject;
    const unroot = ((p) => p.substring(testProjectRoot.length + 1));
    setup(() => {
        defaultProject = new polymer_project_1.PolymerProject({
            root: 'test-fixtures/custom-elements-es5-adapter/',
            entrypoint: 'index.html',
            shell: 'shell.html',
            sources: [
                'source-dir/**',
            ],
        });
    });
    test('injects the custom elements es5 adapter in index', (done) => {
        const injectedAdapter = '<div id="autogenerated-ce-es5-shim">';
        const files = new Map();
        defaultProject.sources()
            .pipe(defaultProject.addCustomElementsEs5Adapter())
            .on('data', (f) => files.set(unroot(f.path), f))
            .on('data', () => { })
            .on('end', () => {
            const expectedFiles = [
                'index.html',
                'shell.html',
            ];
            chai_1.assert.deepEqual(Array.from(files.keys()).sort(), expectedFiles);
            const index = files.get('index.html').contents.toString();
            const shell = files.get('shell.html').contents.toString();
            chai_1.assert.include(index, injectedAdapter);
            chai_1.assert.notInclude(shell, injectedAdapter);
            chai_1.assert.notInclude(index, '<html', 'html element was added');
            chai_1.assert.notInclude(index, '<head', 'head element was added');
            // The following assertions demonstrate that `<body` does not
            // appears in the file, except in the case where it is part of
            // the string `<body> so that` which appears in a comment in
            // the adapter shim.
            chai_1.assert.notMatch(index, /<body(?!> so that)/, 'body element was added');
            chai_1.assert.include(index, '<body> so that');
            done();
        });
    });
});
