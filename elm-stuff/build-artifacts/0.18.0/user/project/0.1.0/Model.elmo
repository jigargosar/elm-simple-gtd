var _user$project$Model$getProjectsAsIdDict = function (_p0) {
	return _user$project$Store$asIdDict(
		function (_) {
			return _.projectStore;
		}(_p0));
};
var _user$project$Model$getContextsAsIdDict = function (_p1) {
	return _user$project$Store$asIdDict(
		function (_) {
			return _.contextStore;
		}(_p1));
};
var _user$project$Model$getMaybeFocusInEntity = F2(
	function (entityList, model) {
		return A2(
			_elm_community$maybe_extra$Maybe_Extra$orElse,
			_elm_lang$core$List$head(entityList),
			A2(
				_elm_community$list_extra$List_Extra$find,
				_user$project$Entity$equalById(model.focusInEntity),
				entityList));
	});
var _user$project$Model$getMaybeFocusInEntityIndex = F2(
	function (entityList, model) {
		return A2(
			_elm_community$list_extra$List_Extra$findIndex,
			_user$project$Entity$equalById(model.focusInEntity),
			entityList);
	});
var _user$project$Model$setKeyboardState = F2(
	function (keyboardState, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{keyboardState: keyboardState});
	});
var _user$project$Model$updateKeyboardStateM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setKeyboardState,
			updater(model),
			model);
	});
var _user$project$Model$getKeyboardState = function (_) {
	return _.keyboardState;
};
var _user$project$Model$updateKeyboardState = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setKeyboardState,
			updater(
				_user$project$Model$getKeyboardState(model)),
			model);
	});
var _user$project$Model$updateNowM = F2(
	function (updater, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				now: updater(model)
			});
	});
var _user$project$Model$setNow = F2(
	function (now, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{now: now});
	});
var _user$project$Model$getNow = function (_) {
	return _.now;
};
var _user$project$Model$setContextStore = F2(
	function (contextStore, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{contextStore: contextStore});
	});
var _user$project$Model$setContextStoreIn = _elm_lang$core$Basics$flip(_user$project$Model$setContextStore);
var _user$project$Model$updateContextStoreM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setContextStore,
			updater(model),
			model);
	});
var _user$project$Model$getContextStore = function (_) {
	return _.contextStore;
};
var _user$project$Model$setProjectStore = F2(
	function (projectStore, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{projectStore: projectStore});
	});
var _user$project$Model$setProjectStoreIn = _elm_lang$core$Basics$flip(_user$project$Model$setProjectStore);
var _user$project$Model$updateProjectStoreM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setProjectStore,
			updater(model),
			model);
	});
var _user$project$Model$getProjectStore = function (_) {
	return _.projectStore;
};
var _user$project$Model$updateProjectStore = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setProjectStore,
			updater(
				_user$project$Model$getProjectStore(model)),
			model);
	});
var _user$project$Model$setTodoStore = F2(
	function (todoStore, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{todoStore: todoStore});
	});
var _user$project$Model$getTodoStore = function (_) {
	return _.todoStore;
};
var _user$project$Model$updateTodoStore = F2(
	function (updater, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				todoStore: updater(
					_user$project$Model$getTodoStore(model))
			});
	});
var _user$project$Model$setSelectedEntityIdSet = F2(
	function (selectedEntityIdSet, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{selectedEntityIdSet: selectedEntityIdSet});
	});
var _user$project$Model$updateSelectedEntityIdSetM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setSelectedEntityIdSet,
			updater(model),
			model);
	});
var _user$project$Model$getSelectedEntityIdSet = function (_) {
	return _.selectedEntityIdSet;
};
var _user$project$Model$updateSelectedEntityIdSet = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setSelectedEntityIdSet,
			updater(
				_user$project$Model$getSelectedEntityIdSet(model)),
			model);
	});
var _user$project$Model$toggleSetMember = F2(
	function (item, set) {
		return A2(_elm_lang$core$Set$member, item, set) ? A2(_elm_lang$core$Set$remove, item, set) : A2(_elm_lang$core$Set$insert, item, set);
	});
var _user$project$Model$setLayout = F2(
	function (layout, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{layout: layout});
	});
var _user$project$Model$updateLayoutM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setLayout,
			updater(model),
			model);
	});
var _user$project$Model$getLayout = function (_) {
	return _.layout;
};
var _user$project$Model$updateLayout = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setLayout,
			updater(
				_user$project$Model$getLayout(model)),
			model);
	});
var _user$project$Model$maybeGetCurrentEntityListViewType = function (model) {
	var _p2 = model.mainViewType;
	if (_p2.ctor === 'EntityListView') {
		return _elm_lang$core$Maybe$Just(_p2._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Model$getEntityId = _user$project$Entity$getId;
var _user$project$Model$toggleEntitySelection = function (entity) {
	return _user$project$Model$updateSelectedEntityIdSet(
		_user$project$Model$toggleSetMember(
			_user$project$Model$getEntityId(entity)));
};
var _user$project$Model$getMainViewType = function (_) {
	return _.mainViewType;
};
var _user$project$Model$upsertEncodedDocOnFirebaseChange = F2(
	function (dbName, encodedEntity) {
		var _p3 = dbName;
		switch (_p3) {
			case 'todo-db':
				return function (_p4) {
					return A2(
						_user$project$Store$upsertInPouchDbOnFirebaseChange,
						encodedEntity,
						_user$project$Model$getTodoStore(_p4));
				};
			case 'project-db':
				return function (_p5) {
					return A2(
						_user$project$Store$upsertInPouchDbOnFirebaseChange,
						encodedEntity,
						_user$project$Model$getProjectStore(_p5));
				};
			case 'context-db':
				return function (_p6) {
					return A2(
						_user$project$Store$upsertInPouchDbOnFirebaseChange,
						encodedEntity,
						_user$project$Model$getContextStore(_p6));
				};
			default:
				return function (_p7) {
					return _elm_lang$core$Platform_Cmd$none;
				};
		}
	});
var _user$project$Model$setTodoStoreFromTuple = F2(
	function (tuple, model) {
		return A2(
			_elm_lang$core$Tuple$mapSecond,
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$setTodoStore, model),
			tuple);
	});
var _user$project$Model$findContextById = function (id) {
	return function (_p8) {
		return A2(
			_elm_community$maybe_extra$Maybe_Extra$orElseLazy,
			function (_p9) {
				return A2(
					_elm_community$list_extra$List_Extra$find,
					_user$project$Document$hasId(id),
					{
						ctor: '::',
						_0: _user$project$Context$null,
						_1: {ctor: '[]'}
					});
			},
			A2(
				_user$project$Store$findById,
				id,
				function (_) {
					return _.contextStore;
				}(_p8)));
	};
};
var _user$project$Model$findProjectById = function (id) {
	return function (_p10) {
		return A2(
			_elm_community$maybe_extra$Maybe_Extra$orElseLazy,
			function (_p11) {
				return A2(
					_elm_community$list_extra$List_Extra$find,
					_user$project$Document$hasId(id),
					{
						ctor: '::',
						_0: _user$project$Project$null,
						_1: {ctor: '[]'}
					});
			},
			A2(
				_user$project$Store$findById,
				id,
				function (_) {
					return _.projectStore;
				}(_p10)));
	};
};
var _user$project$Model$findTodoById = function (id) {
	return function (_p12) {
		return A2(
			_user$project$Store$findById,
			id,
			_user$project$Model$getTodoStore(_p12));
	};
};
var _user$project$Model$clearSelection = _user$project$Model$setSelectedEntityIdSet(_elm_lang$core$Set$empty);
var _user$project$Model$switchToView = F2(
	function (mainViewType, model) {
		return _user$project$Model$clearSelection(
			_elm_lang$core$Native_Utils.update(
				model,
				{mainViewType: mainViewType}));
	});
var _user$project$Model$setEditMode = F2(
	function (editMode, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{editMode: editMode});
	});
var _user$project$Model$updateEditModeM = F2(
	function (updater, model) {
		return A2(
			_user$project$Model$setEditMode,
			updater(model),
			model);
	});
var _user$project$Model$getEditMode = function (_) {
	return _.editMode;
};
var _user$project$Model$deactivateEditingMode = _user$project$Model$setEditMode(_user$project$ExclusiveMode$none);
var _user$project$Model$createEntityEditForm = F2(
	function (entity, model) {
		var _p13 = entity;
		switch (_p13.ctor) {
			case 'ContextEntity':
				return _user$project$ExclusiveMode$editContextMode(_p13._0);
			case 'ProjectEntity':
				return _user$project$ExclusiveMode$editProjectMode(_p13._0);
			default:
				return _user$project$ExclusiveMode$EditTodo(
					_user$project$Todo_Form$create(_p13._0));
		}
	});
var _user$project$Model$createRemoteSyncForm = function (model) {
	return {uri: model.pouchDBRemoteSyncURI};
};
var _user$project$Model$getRemoteSyncForm = function (model) {
	var maybeForm = function () {
		var _p14 = model.editMode;
		if (_p14.ctor === 'EditSyncSettings') {
			return _elm_lang$core$Maybe$Just(_p14._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}();
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
		maybeForm,
		_user$project$Model$createRemoteSyncForm(model));
};
var _user$project$Model$getMaybeEditTodoReminderForm = function (model) {
	var _p15 = model.editMode;
	if (_p15.ctor === 'EditTodoReminder') {
		return _elm_lang$core$Maybe$Just(_p15._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Model$updateEditModeNameChanged = F3(
	function (newName, entity, model) {
		var _p16 = model.editMode;
		switch (_p16.ctor) {
			case 'EditContext':
				return A2(
					_user$project$Model$setEditMode,
					A2(_user$project$ExclusiveMode$editContextSetName, newName, _p16._0),
					model);
			case 'EditProject':
				return A2(
					_user$project$Model$setEditMode,
					A2(_user$project$ExclusiveMode$editProjectSetName, newName, _p16._0),
					model);
			default:
				return model;
		}
	});
var _user$project$Model$startEditingEntity = F2(
	function (entity, model) {
		return A2(
			_user$project$Model$setEditMode,
			A2(_user$project$Model$createEntityEditForm, entity, model),
			model);
	});
var _user$project$Model$startEditingTodoContext = function (todo) {
	return _user$project$Model$setEditMode(
		_user$project$ExclusiveMode$EditTodoContext(
			_user$project$Todo_GroupForm$init(todo)));
};
var _user$project$Model$startEditingTodoProject = function (todo) {
	return _user$project$Model$setEditMode(
		_user$project$ExclusiveMode$EditTodoProject(
			_user$project$Todo_GroupForm$init(todo)));
};
var _user$project$Model$startEditingReminder = function (todo) {
	return _user$project$Model$updateEditModeM(
		function (_p17) {
			return _user$project$ExclusiveMode$EditTodoReminder(
				A2(
					_user$project$Todo_ReminderForm$create,
					todo,
					function (_) {
						return _.now;
					}(_p17)));
		});
};
var _user$project$Model$isShowDetailsKeyPressed = function (_p18) {
	return !_user$project$Ext_Keyboard$isAltDown(
		function (_) {
			return _.keyboardState;
		}(_p18));
};
var _user$project$Model$setReminderOverlayToSnoozeView = F2(
	function (details, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				reminderOverlay: _user$project$ReminderOverlay$snoozeView(details)
			});
	});
var _user$project$Model$removeReminderOverlay = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{reminderOverlay: _user$project$ReminderOverlay$none});
};
var _user$project$Model$setReminderOverlayToInitialView = F2(
	function (todo, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				reminderOverlay: _user$project$ReminderOverlay$initialView(todo)
			});
	});
var _user$project$Model$showReminderOverlayForTodoId = function (todoId) {
	return A2(
		_user$project$Ext_Function$applyMaybeWith,
		_user$project$Model$findTodoById(todoId),
		_user$project$Model$setReminderOverlayToInitialView);
};
var _user$project$Model$findTodoWithOverDueReminder = function (model) {
	return A2(
		_user$project$Store$findBy,
		_user$project$Todo$isReminderOverdue(model.now),
		model.todoStore);
};
var _user$project$Model$getActiveTodoListWithReminderTime = function (model) {
	return A2(
		_user$project$Store$filterDocs,
		_user$project$Todo$isReminderOverdue(model.now),
		model.todoStore);
};
var _user$project$Model$getActiveTodoList = function (_p19) {
	return A2(
		_user$project$Store$rejectDocs,
		_user$project$Ext_Function$anyPass(
			{
				ctor: '::',
				_0: _user$project$Todo$isDeleted,
				_1: {
					ctor: '::',
					_0: _user$project$Todo$isDone,
					_1: {ctor: '[]'}
				}
			}),
		function (_) {
			return _.todoStore;
		}(_p19));
};
var _user$project$Model$getActiveTodoListGroupedBy = function (fn) {
	return function (_p20) {
		return A2(
			_elm_community$dict_extra$Dict_Extra$groupBy,
			fn,
			_user$project$Model$getActiveTodoList(_p20));
	};
};
var _user$project$Model$currentDocPredicate = function (model) {
	return model.showDeleted ? _user$project$Document$isDeleted : _user$project$Document$isNotDeleted;
};
var _user$project$Model$filterProjects = F2(
	function (pred, model) {
		return _user$project$Project$sort(
			A2(
				_elm_lang$core$List$append,
				_user$project$Project$filterNull(pred),
				A2(_user$project$Store$filterDocs, pred, model.projectStore)));
	});
var _user$project$Model$filterCurrentProjects = function (model) {
	return A2(
		_user$project$Model$filterProjects,
		_user$project$Model$currentDocPredicate(model),
		model);
};
var _user$project$Model$getActiveProjects = _user$project$Model$filterProjects(_user$project$Document$isNotDeleted);
var _user$project$Model$filterContexts = F2(
	function (pred, model) {
		return _user$project$Context$sort(
			A2(
				_elm_lang$core$List$append,
				_user$project$Context$filterNull(pred),
				A2(_user$project$Store$filterDocs, pred, model.contextStore)));
	});
var _user$project$Model$filterCurrentContexts = function (model) {
	return A2(
		_user$project$Model$filterContexts,
		_user$project$Model$currentDocPredicate(model),
		model);
};
var _user$project$Model$getActiveContexts = _user$project$Model$filterContexts(_user$project$Document$isNotDeleted);
var _user$project$Model$filterTodosAndSortBy = F3(
	function (pred, sortBy, model) {
		return A2(
			_elm_lang$core$List$sortBy,
			sortBy,
			A2(_user$project$Store$filterDocs, pred, model.todoStore));
	});
var _user$project$Model$filterTodosAndSortByLatestCreated = function (pred) {
	return A2(
		_user$project$Model$filterTodosAndSortBy,
		pred,
		function (_p21) {
			return _elm_lang$core$Basics$negate(
				_user$project$Todo$getCreatedAt(_p21));
		});
};
var _user$project$Model$filterTodosAndSortByLatestModified = function (pred) {
	return A2(
		_user$project$Model$filterTodosAndSortBy,
		pred,
		function (_p22) {
			return _elm_lang$core$Basics$negate(
				_user$project$Todo$getModifiedAt(_p22));
		});
};
var _user$project$Model$createGrouping = F2(
	function (viewType, model) {
		var findContextByIdHelp = function (id) {
			return A2(_user$project$Model$findContextById, id, model);
		};
		var findProjectByIdHelp = function (id) {
			return A2(_user$project$Model$findProjectById, id, model);
		};
		var todoFilter = model.showDeleted ? _user$project$Document$isDeleted : _user$project$Ext_Predicate$all(
			{
				ctor: '::',
				_0: _user$project$Todo$isNotDeleted,
				_1: {
					ctor: '::',
					_0: _user$project$Todo$isNotDone,
					_1: {ctor: '[]'}
				}
			});
		var filterTodosForContext = function (context) {
			return A2(
				_user$project$Model$filterTodosAndSortByLatestCreated,
				_user$project$Ext_Predicate$all(
					{
						ctor: '::',
						_0: todoFilter,
						_1: {
							ctor: '::',
							_0: _user$project$Todo$contextFilter(context),
							_1: {ctor: '[]'}
						}
					}),
				model);
		};
		var filterTodosForProject = function (project) {
			return A2(
				_user$project$Model$filterTodosAndSortByLatestCreated,
				_user$project$Ext_Predicate$all(
					{
						ctor: '::',
						_0: todoFilter,
						_1: {
							ctor: '::',
							_0: _user$project$Todo$projectFilter(project),
							_1: {ctor: '[]'}
						}
					}),
				model);
		};
		var deletedFilter = model.showDeleted ? _user$project$Document$isDeleted : function (_p23) {
			return !_user$project$Document$isDeleted(_p23);
		};
		var _p24 = viewType;
		switch (_p24.ctor) {
			case 'ContextsView':
				return A2(
					_user$project$Entity$createGroupingForContexts,
					filterTodosForContext,
					_user$project$Model$filterCurrentContexts(model));
			case 'ProjectsView':
				return A2(
					_user$project$Entity$createGroupingForProjects,
					filterTodosForProject,
					_user$project$Model$filterCurrentProjects(model));
			case 'ContextView':
				return A3(
					_user$project$Entity$createGroupingForContext,
					filterTodosForContext,
					findProjectByIdHelp,
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
						A2(_user$project$Model$findContextById, _p24._0, model),
						_user$project$Context$null));
			case 'ProjectView':
				return A3(
					_user$project$Entity$createGroupingForProject,
					filterTodosForProject,
					findContextByIdHelp,
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
						A2(_user$project$Model$findProjectById, _p24._0, model),
						_user$project$Project$null));
			case 'BinView':
				return _user$project$Entity$createGroupingForTodoList(
					A2(_user$project$Model$filterTodosAndSortByLatestModified, _user$project$Document$isDeleted, model));
			default:
				return _user$project$Entity$createGroupingForTodoList(
					A2(
						_user$project$Model$filterTodosAndSortByLatestModified,
						_user$project$Ext_Predicate$all(
							{
								ctor: '::',
								_0: _user$project$Document$isNotDeleted,
								_1: {
									ctor: '::',
									_0: _user$project$Todo$isDone,
									_1: {ctor: '[]'}
								}
							}),
						model));
		}
	});
var _user$project$Model$getCurrentViewEntityList = function (model) {
	var _p25 = model.mainViewType;
	if (_p25.ctor === 'EntityListView') {
		return _user$project$Entity$flattenGrouping(
			A2(_user$project$Model$createGrouping, _p25._0, model));
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Model$isLayoutAutoNarrow = function (_p26) {
	return A2(
		_elm_lang$core$Basics$uncurry,
		_user$project$Ext_Function$and,
		A2(
			_danielnarey$elm_toolkit$Toolkit_Helpers$apply2,
			{
				ctor: '_Tuple2',
				_0: function (_p27) {
					return !function (_) {
						return _.forceNarrow;
					}(_p27);
				},
				_1: function (_) {
					return _.narrow;
				}
			},
			_user$project$Model$getLayout(_p26)));
};
var _user$project$Model$getLayoutForceNarrow = function (_p28) {
	return function (_) {
		return _.forceNarrow;
	}(
		function (_) {
			return _.layout;
		}(_p28));
};
var _user$project$Model$setLayoutNarrow = function (narrow) {
	return _user$project$Model$updateLayout(
		function (layout) {
			return _elm_lang$core$Native_Utils.update(
				layout,
				{narrow: narrow});
		});
};
var _user$project$Model$toggleLayoutForceNarrow = _user$project$Model$updateLayout(
	function (layout) {
		return _elm_lang$core$Native_Utils.update(
			layout,
			{forceNarrow: !layout.forceNarrow});
	});
var _user$project$Model$getMaybeUserId = function (_p29) {
	return _user$project$Firebase$getMaybeUserId(
		function (_) {
			return _.user;
		}(_p29));
};
var _user$project$Model$getMaybeUserProfile = function (_p30) {
	return _user$project$Firebase$getMaybeUserProfile(
		function (_) {
			return _.user;
		}(_p30));
};
var _user$project$Model$inboxEntity = _user$project$Entity$ContextEntity(_user$project$Context$null);
var _user$project$Model$keyComboModel = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.keyComboModel;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{keyComboModel: s});
		}));
var _user$project$Model$updateCombo = function (comboMsg) {
	return A2(
		_user$project$Ext_Record$overReturn,
		_user$project$Model$keyComboModel,
		_scottcorgan$keyboard_combo$Keyboard_Combo$update(comboMsg));
};
var _user$project$Model$focusInEntity = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.focusInEntity;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{focusInEntity: s});
		}));
var _user$project$Model$setFocusInEntity = function (entity) {
	return A2(_user$project$Ext_Record$set, _user$project$Model$focusInEntity, entity);
};
var _user$project$Model$setFocusInEntityFromTodoId = F2(
	function (todoId, model) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				_danielnarey$elm_toolkit$Toolkit_Helpers$maybe2Tuple(
					{
						ctor: '_Tuple2',
						_0: A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
							A2(_user$project$Model$findTodoById, todoId, model),
							_user$project$Entity$TodoEntity),
						_1: _elm_lang$core$Maybe$Just(model)
					}),
				_elm_lang$core$Basics$uncurry(_user$project$Model$setFocusInEntity)),
			model);
	});
var _user$project$Model$moveFocusBy = A2(
	_user$project$Ext_Function_Infix_ops['>>>'],
	_user$project$Entity$findEntityByOffsetIn,
	_user$project$Ext_Record$maybeOver(_user$project$Model$focusInEntity));
var _user$project$Model$updateEntityListCursorFromEntityIndexTuple = F2(
	function (model, indexTuple) {
		var setFocusInEntityByIndex = F3(
			function (index, entityList, model) {
				return A3(
					_user$project$Ext_Record$maybeSetIn,
					model,
					_user$project$Model$focusInEntity,
					A2(
						_elm_community$maybe_extra$Maybe_Extra$orElse,
						_elm_lang$core$List$head(entityList),
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _elm_community$list_extra$List_Extra$getAt, entityList)(
							A2(_user$project$Ext_List$clampIndex, index, entityList))));
			});
		var setFocusInIndex = function (index) {
			return A2(
				setFocusInEntityByIndex,
				index,
				_user$project$Model$getCurrentViewEntityList(model));
		};
		return function () {
			var _p31 = indexTuple;
			if (((_p31.ctor === '_Tuple2') && (_p31._0.ctor === 'Just')) && (_p31._1.ctor === 'Nothing')) {
				return setFocusInIndex(_p31._0._0);
			} else {
				return _elm_lang$core$Basics$identity;
			}
		}()(model);
	});
var _user$project$Model$updateEntityListCursor = F2(
	function (oldModel, newModel) {
		return A2(
			_user$project$Model$updateEntityListCursorFromEntityIndexTuple,
			newModel,
			A2(
				_Fresheyeball$elm_tuple_extra$Tuple2$mapBoth,
				function (_p32) {
					return A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$getMaybeFocusInEntityIndex, oldModel)(
						_user$project$Model$getCurrentViewEntityList(_p32));
				},
				{ctor: '_Tuple2', _0: oldModel, _1: newModel}));
	});
var _user$project$Model$updateAllNamedDocsDocs = F4(
	function (idSet, updateFn, store, model) {
		return A2(
			_Fresheyeball$elm_return$Return$map,
			_user$project$Model$updateEntityListCursor(model),
			A2(
				_danielnarey$elm_toolkit$Toolkit_Helpers$apply2,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$Tuple$second,
					_1: function (changes) {
						return _elm_lang$core$Platform_Cmd$none;
					}
				},
				A3(
					_user$project$Ext_Record$overT2,
					store,
					A3(_user$project$Store$updateAll, idSet, model.now, updateFn),
					model)));
	});
var _user$project$Model$user = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.user;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{user: s});
		}));
var _user$project$Model$setUser = _user$project$Ext_Record$set(_user$project$Model$user);
var _user$project$Model$editMode = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.editMode;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{editMode: s});
		}));
var _user$project$Model$activateLaunchBar = function (now) {
	return A2(
		_user$project$Ext_Record$set,
		_user$project$Model$editMode,
		_user$project$ExclusiveMode$LaunchBar(
			_user$project$LaunchBar_Form$create(now)));
};
var _user$project$Model$updateLaunchBarInput = F3(
	function (now, text, form) {
		return A2(
			_user$project$Ext_Record$set,
			_user$project$Model$editMode,
			_user$project$ExclusiveMode$LaunchBar(
				A3(_user$project$LaunchBar_Form$updateInput, now, text, form)));
	});
var _user$project$Model$activateNewTodoModeWithFocusInEntityAsReference = function (model) {
	return A3(
		_user$project$Ext_Record$set,
		_user$project$Model$editMode,
		_user$project$ExclusiveMode$NewTodo(
			A2(_user$project$Todo_NewForm$create, model.focusInEntity, '')),
		model);
};
var _user$project$Model$activateNewTodoModeWithInboxAsReference = A2(
	_user$project$Ext_Record$set,
	_user$project$Model$editMode,
	_user$project$ExclusiveMode$NewTodo(
		A2(_user$project$Todo_NewForm$create, _user$project$Model$inboxEntity, '')));
var _user$project$Model$updateNewTodoText = F2(
	function (form, text) {
		return A2(
			_user$project$Ext_Record$set,
			_user$project$Model$editMode,
			_user$project$ExclusiveMode$NewTodo(
				A2(_user$project$Todo_NewForm$setText, text, form)));
	});
var _user$project$Model$firebaseClient = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.firebaseClient;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{firebaseClient: s});
		}));
var _user$project$Model$setFCMToken = F2(
	function (fcmToken, model) {
		return A3(
			_user$project$Ext_Record$over,
			_user$project$Model$firebaseClient,
			_user$project$Firebase$updateToken(fcmToken),
			_elm_lang$core$Native_Utils.update(
				model,
				{fcmToken: fcmToken}));
	});
var _user$project$Model$updateFirebaseConnection = function (connected) {
	return A2(
		_user$project$Ext_Record$over,
		_user$project$Model$firebaseClient,
		_user$project$Firebase$updateConnection(connected));
};
var _user$project$Model$now = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.now;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{now: s});
		}));
var _user$project$Model$keyboardState = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.keyboardState;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{keyboardState: s});
		}));
var _user$project$Model$todoStore = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.todoStore;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{todoStore: s});
		}));
var _user$project$Model$insertTodo = function (constructWithId) {
	return A2(
		_user$project$Ext_Record$overT2,
		_user$project$Model$todoStore,
		_user$project$Store$insert(constructWithId));
};
var _user$project$Model$createTodo = F2(
	function (text, model) {
		return _elm_lang$core$Tuple$second(
			A2(
				_user$project$Model$insertTodo,
				A2(_user$project$Todo$init, model.now, text),
				model));
	});
var _user$project$Model$findAndUpdateAllTodos = F3(
	function (findFn, action, model) {
		var updateFn = _user$project$Todo$update(action);
		return A2(
			_Fresheyeball$elm_return$Return$map,
			_user$project$Model$updateEntityListCursor(model),
			_Fresheyeball$elm_tuple_extra$Tuple2$swap(
				A3(
					_user$project$Ext_Record$overT2,
					_user$project$Model$todoStore,
					A3(_user$project$Store$updateAndPersist, findFn, model.now, updateFn),
					model)));
	});
var _user$project$Model$updateTodo = F2(
	function (action, todoId) {
		return A2(
			_user$project$Model$findAndUpdateAllTodos,
			_user$project$Document$hasId(todoId),
			action);
	});
var _user$project$Model$snoozeTodoWithOffset = F3(
	function (snoozeOffset, todoId, model) {
		var time = A2(_user$project$ReminderOverlay$addSnoozeOffset, model.now, snoozeOffset);
		return function (_p33) {
			return A2(
				_elm_lang$core$Tuple$mapFirst,
				_user$project$Model$removeReminderOverlay,
				A3(
					_user$project$Model$updateTodo,
					_user$project$Todo$SnoozeTill(time),
					todoId,
					_p33));
		}(model);
	});
var _user$project$Model$findAndSnoozeOverDueTodo = function (model) {
	var snooze = function (todoId) {
		return function (_p34) {
			var _p35 = _p34;
			var _p36 = _p35._0;
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				A2(_user$project$Model$findTodoById, todoId, _p36),
				function (todo) {
					return {
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: todo, _1: _p36},
						_1: _p35._1
					};
				});
		}(
			A3(
				_user$project$Model$updateTodo,
				_user$project$Todo$AutoSnooze(model.now),
				todoId,
				model));
	};
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?+>'],
		A2(
			_user$project$Store$findBy,
			_user$project$Todo$isReminderOverdue(model.now),
			model.todoStore),
		function (_p37) {
			return snooze(
				_user$project$Document$getId(_p37));
		});
};
var _user$project$Model$updateAllTodos = F3(
	function (action, idSet, model) {
		return A3(
			_user$project$Model$findAndUpdateAllTodos,
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'],
				function (_p38) {
					return _elm_lang$core$Set$member(
						_user$project$Document$getId(_p38));
				},
				idSet),
			action,
			model);
	});
var _user$project$Model$updateTodoAndMaybeAlsoSelected = F3(
	function (action, todoId, model) {
		var idSet = A2(_elm_lang$core$Set$member, todoId, model.selectedEntityIdSet) ? model.selectedEntityIdSet : _elm_lang$core$Set$singleton(todoId);
		return A3(_user$project$Model$updateAllTodos, action, idSet, model);
	});
var _user$project$Model$projectStore = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.projectStore;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{projectStore: s});
		}));
var _user$project$Model$createProject = F2(
	function (text, model) {
		return _elm_lang$core$Tuple$second(
			A3(
				_user$project$Ext_Record$overT2,
				_user$project$Model$projectStore,
				_user$project$Store$insert(
					A2(_user$project$Project$init, text, model.now)),
				model));
	});
var _user$project$Model$updateProject = F2(
	function (id, updateFn) {
		return A3(
			_user$project$Model$updateAllNamedDocsDocs,
			_elm_lang$core$Set$singleton(id),
			updateFn,
			_user$project$Model$projectStore);
	});
var _user$project$Model$contextStore = A2(
	_user$project$Ext_Record$init,
	function (_) {
		return _.contextStore;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{contextStore: s});
		}));
var _user$project$Model$createContext = F2(
	function (text, model) {
		return _elm_lang$core$Tuple$second(
			A3(
				_user$project$Ext_Record$overT2,
				_user$project$Model$contextStore,
				_user$project$Store$insert(
					A2(_user$project$Context$init, text, model.now)),
				model));
	});
var _user$project$Model$upsertEncodedDocOnPouchDBChange = F2(
	function (dbName, encodedEntity) {
		var _p39 = dbName;
		switch (_p39) {
			case 'todo-db':
				return A2(
					_user$project$Ext_Function_Infix_ops['>>?'],
					A2(
						_user$project$Ext_Record$maybeOverT2,
						_user$project$Model$todoStore,
						_user$project$Store$upsertOnPouchDBChange(encodedEntity)),
					_elm_lang$core$Tuple$mapFirst(_user$project$Entity$TodoEntity));
			case 'project-db':
				return A2(
					_user$project$Ext_Function_Infix_ops['>>?'],
					A2(
						_user$project$Ext_Record$maybeOverT2,
						_user$project$Model$projectStore,
						_user$project$Store$upsertOnPouchDBChange(encodedEntity)),
					_elm_lang$core$Tuple$mapFirst(_user$project$Entity$ProjectEntity));
			case 'context-db':
				return A2(
					_user$project$Ext_Function_Infix_ops['>>?'],
					A2(
						_user$project$Ext_Record$maybeOverT2,
						_user$project$Model$contextStore,
						_user$project$Store$upsertOnPouchDBChange(encodedEntity)),
					_elm_lang$core$Tuple$mapFirst(_user$project$Entity$ContextEntity));
			default:
				return function (_p40) {
					return _elm_lang$core$Maybe$Nothing;
				};
		}
	});
var _user$project$Model$updateContext = F2(
	function (id, updateFn) {
		return A3(
			_user$project$Model$updateAllNamedDocsDocs,
			_elm_lang$core$Set$singleton(id),
			updateFn,
			_user$project$Model$contextStore);
	});
var _user$project$Model$saveCurrentForm = function (model) {
	var _p41 = model.editMode;
	switch (_p41.ctor) {
		case 'EditContext':
			var _p42 = _p41._0;
			return A3(
				_user$project$Model$updateContext,
				_p42.id,
				_user$project$Context$setName(_p42.name),
				model);
		case 'EditProject':
			var _p43 = _p41._0;
			return A3(
				_user$project$Model$updateProject,
				_p43.id,
				_user$project$Project$setName(_p43.name),
				model);
		case 'EditTodo':
			var _p44 = _p41._0;
			return A3(
				_user$project$Model$updateTodo,
				_user$project$Todo$SetText(_p44.todoText),
				_p44.id,
				model);
		case 'EditTodoReminder':
			var _p45 = _p41._0;
			return A3(
				_user$project$Model$updateTodo,
				_user$project$Todo$SetScheduleFromMaybeTime(
					_user$project$Todo_ReminderForm$getMaybeTime(_p45)),
				_p45.id,
				model);
		case 'EditTodoContext':
			return _Fresheyeball$elm_return$Return$singleton(model);
		case 'EditTodoProject':
			return _Fresheyeball$elm_return$Return$singleton(model);
		case 'NewTodo':
			var _p48 = _p41._0;
			return A2(
				_elm_lang$core$Basics$uncurry,
				function (todoId) {
					return function (_p46) {
						return A2(
							_elm_lang$core$Tuple$mapFirst,
							_user$project$Model$setFocusInEntityFromTodoId(todoId),
							A3(
								_user$project$Model$updateTodo,
								function () {
									var _p47 = _p48.referenceEntity;
									switch (_p47.ctor) {
										case 'TodoEntity':
											return _user$project$Todo$CopyProjectAndContextId(_p47._0);
										case 'ContextEntity':
											return _user$project$Todo$SetContext(_p47._0);
										default:
											return _user$project$Todo$SetProject(_p47._0);
									}
								}(),
								todoId,
								_p46));
					};
				},
				A2(
					_elm_lang$core$Tuple$mapFirst,
					_user$project$Document$getId,
					A2(
						_user$project$Model$insertTodo,
						A2(
							_user$project$Todo$init,
							model.now,
							_user$project$Todo_NewForm$getText(_p48)),
						model)));
		case 'EditSyncSettings':
			return _Fresheyeball$elm_return$Return$singleton(
				_elm_lang$core$Native_Utils.update(
					model,
					{pouchDBRemoteSyncURI: _p41._0.uri}));
		case 'LaunchBar':
			return _Fresheyeball$elm_return$Return$singleton(model);
		case 'ActionList':
			return _Fresheyeball$elm_return$Return$singleton(model);
		case 'None':
			return _Fresheyeball$elm_return$Return$singleton(model);
		default:
			return _Fresheyeball$elm_return$Return$singleton(model);
	}
};
var _user$project$Model$toggleDeleteEntity = F2(
	function (entity, model) {
		var entityId = _user$project$Model$getEntityId(entity);
		return function () {
			var _p49 = entity;
			switch (_p49.ctor) {
				case 'ContextEntity':
					return A2(_user$project$Model$updateContext, entityId, _user$project$Document$toggleDeleted);
				case 'ProjectEntity':
					return A2(_user$project$Model$updateProject, entityId, _user$project$Document$toggleDeleted);
				default:
					return A2(_user$project$Model$updateTodo, _user$project$Todo$ToggleDeleted, entityId);
			}
		}()(model);
	});
var _user$project$Model$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return {now: a, todoStore: b, projectStore: c, contextStore: d, editMode: e, mainViewType: f, keyboardState: g, showDeleted: h, reminderOverlay: i, pouchDBRemoteSyncURI: j, user: k, fcmToken: l, developmentMode: m, selectedEntityIdSet: n, layout: o, appVersion: p, deviceId: q, firebaseClient: r, focusInEntity: s, timeTracker: t, keyComboModel: u, config: v};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Model$Layout = F2(
	function (a, b) {
		return {narrow: a, forceNarrow: b};
	});
var _user$project$Model$Config = function (a) {
	return {isFirstVisit: a};
};
var _user$project$Model$Flags = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {now: a, encodedTodoList: b, encodedProjectList: c, encodedContextList: d, pouchDBRemoteSyncURI: e, developmentMode: f, appVersion: g, deviceId: h, config: i};
	});
var _user$project$Model$TodoNotification = F3(
	function (a, b, c) {
		return {title: a, tag: b, data: c};
	});
var _user$project$Model$TodoNotificationData = function (a) {
	return {id: a};
};
var _user$project$Model$TodoNotificationEvent = F2(
	function (a, b) {
		return {action: a, data: b};
	});
var _user$project$Model$OnSetDomFocusToFocusInEntity = {ctor: 'OnSetDomFocusToFocusInEntity'};
var _user$project$Model$OnCloseNotification = function (a) {
	return {ctor: 'OnCloseNotification', _0: a};
};
var _user$project$Model$OnKeyCombo = function (a) {
	return {ctor: 'OnKeyCombo', _0: a};
};
var _user$project$Model$OnTodoMsgWithTime = F2(
	function (a, b) {
		return {ctor: 'OnTodoMsgWithTime', _0: a, _1: b};
	});
var _user$project$Model$OnTodoMsg = function (a) {
	return {ctor: 'OnTodoMsg', _0: a};
};
var _user$project$Model$onTodoToggleRunning = function (_p50) {
	return _user$project$Model$OnTodoMsg(
		_user$project$Todo_Msg$ToggleRunning(_p50));
};
var _user$project$Model$onTodoInitRunning = function (_p51) {
	return _user$project$Model$OnTodoMsg(
		_user$project$Todo_Msg$InitRunning(_p51));
};
var _user$project$Model$onRunningTodoNotificationClicked = function (_p52) {
	return _user$project$Model$OnTodoMsg(
		_user$project$Todo_Msg$RunningNotificationResponse(_p52));
};
var _user$project$Model$onTodoStopRunning = _user$project$Model$OnTodoMsg(_user$project$Todo_Msg$StopRunning);
var _user$project$Model$onTodoTogglePaused = _user$project$Model$OnTodoMsg(_user$project$Todo_Msg$TogglePaused);
var _user$project$Model$onGotoRunningTodo = _user$project$Model$OnTodoMsg(_user$project$Todo_Msg$GotoRunning);
var _user$project$Model$keyboardCombos = {
	ctor: '::',
	_0: A2(
		_scottcorgan$keyboard_combo$Keyboard_Combo$combo2,
		{ctor: '_Tuple2', _0: _scottcorgan$keyboard_combo$Keyboard_Combo$shift, _1: _scottcorgan$keyboard_combo$Keyboard_Combo$s},
		_user$project$Model$onTodoStopRunning),
	_1: {
		ctor: '::',
		_0: A2(
			_scottcorgan$keyboard_combo$Keyboard_Combo$combo2,
			{ctor: '_Tuple2', _0: _scottcorgan$keyboard_combo$Keyboard_Combo$shift, _1: _scottcorgan$keyboard_combo$Keyboard_Combo$p},
			_user$project$Model$onTodoTogglePaused),
		_1: {
			ctor: '::',
			_0: A2(
				_scottcorgan$keyboard_combo$Keyboard_Combo$combo2,
				{ctor: '_Tuple2', _0: _scottcorgan$keyboard_combo$Keyboard_Combo$shift, _1: _scottcorgan$keyboard_combo$Keyboard_Combo$r},
				_user$project$Model$onGotoRunningTodo),
			_1: {ctor: '[]'}
		}
	}
};
var _user$project$Model$onUpdateTodoTimeTracker = _user$project$Model$OnTodoMsg(_user$project$Todo_Msg$UpdateTimeTracker);
var _user$project$Model$OnLaunchBarMsgWithNow = F2(
	function (a, b) {
		return {ctor: 'OnLaunchBarMsgWithNow', _0: a, _1: b};
	});
var _user$project$Model$OnLaunchBarMsg = function (a) {
	return {ctor: 'OnLaunchBarMsg', _0: a};
};
var _user$project$Model$OnEntityAction = F2(
	function (a, b) {
		return {ctor: 'OnEntityAction', _0: a, _1: b};
	});
var _user$project$Model$OnGlobalKeyUp = function (a) {
	return {ctor: 'OnGlobalKeyUp', _0: a};
};
var _user$project$Model$OnKeyboardMsg = function (a) {
	return {ctor: 'OnKeyboardMsg', _0: a};
};
var _user$project$Model$OnNowChanged = function (a) {
	return {ctor: 'OnNowChanged', _0: a};
};
var _user$project$Model$ShowReminderOverlayForTodoId = function (a) {
	return {ctor: 'ShowReminderOverlayForTodoId', _0: a};
};
var _user$project$Model$OnSetEntityListView = function (a) {
	return {ctor: 'OnSetEntityListView', _0: a};
};
var _user$project$Model$SwitchView = function (a) {
	return {ctor: 'SwitchView', _0: a};
};
var _user$project$Model$OnEntityListKeyDown = F2(
	function (a, b) {
		return {ctor: 'OnEntityListKeyDown', _0: a, _1: b};
	});
var _user$project$Model$UpdateTodoForm = F2(
	function (a, b) {
		return {ctor: 'UpdateTodoForm', _0: a, _1: b};
	});
var _user$project$Model$OnEditTodoContextMenuStateChanged = F2(
	function (a, b) {
		return {ctor: 'OnEditTodoContextMenuStateChanged', _0: a, _1: b};
	});
var _user$project$Model$OnEditTodoProjectMenuStateChanged = F2(
	function (a, b) {
		return {ctor: 'OnEditTodoProjectMenuStateChanged', _0: a, _1: b};
	});
var _user$project$Model$UpdateRemoteSyncFormUri = F2(
	function (a, b) {
		return {ctor: 'UpdateRemoteSyncFormUri', _0: a, _1: b};
	});
var _user$project$Model$SaveCurrentForm = {ctor: 'SaveCurrentForm'};
var _user$project$Model$StartEditingProject = function (a) {
	return {ctor: 'StartEditingProject', _0: a};
};
var _user$project$Model$StartEditingContext = function (a) {
	return {ctor: 'StartEditingContext', _0: a};
};
var _user$project$Model$StartEditingReminder = function (a) {
	return {ctor: 'StartEditingReminder', _0: a};
};
var _user$project$Model$NewTodoKeyDown = function (a) {
	return {ctor: 'NewTodoKeyDown', _0: a};
};
var _user$project$Model$OnCreateDefaultEntities = {ctor: 'OnCreateDefaultEntities'};
var _user$project$Model$OnDeactivateEditingMode = {ctor: 'OnDeactivateEditingMode'};
var _user$project$Model$NewTodoTextChanged = F2(
	function (a, b) {
		return {ctor: 'NewTodoTextChanged', _0: a, _1: b};
	});
var _user$project$Model$NewContext = {ctor: 'NewContext'};
var _user$project$Model$NewProject = {ctor: 'NewProject'};
var _user$project$Model$NewTodoForInbox = {ctor: 'NewTodoForInbox'};
var _user$project$Model$NewTodo = {ctor: 'NewTodo'};
var _user$project$Model$SetTodoProject = F2(
	function (a, b) {
		return {ctor: 'SetTodoProject', _0: a, _1: b};
	});
var _user$project$Model$SetTodoContext = F2(
	function (a, b) {
		return {ctor: 'SetTodoContext', _0: a, _1: b};
	});
var _user$project$Model$ToggleTodoDone = function (a) {
	return {ctor: 'ToggleTodoDone', _0: a};
};
var _user$project$Model$OnLayoutNarrowChanged = function (a) {
	return {ctor: 'OnLayoutNarrowChanged', _0: a};
};
var _user$project$Model$ToggleDrawer = {ctor: 'ToggleDrawer'};
var _user$project$Model$ToggleShowDeletedEntity = {ctor: 'ToggleShowDeletedEntity'};
var _user$project$Model$OnNotificationClicked = function (a) {
	return {ctor: 'OnNotificationClicked', _0: a};
};
var _user$project$Model$ReminderOverlayAction = function (a) {
	return {ctor: 'ReminderOverlayAction', _0: a};
};
var _user$project$Model$TodoAction = F2(
	function (a, b) {
		return {ctor: 'TodoAction', _0: a, _1: b};
	});
var _user$project$Model$RemotePouchSync = function (a) {
	return {ctor: 'RemotePouchSync', _0: a};
};
var _user$project$Model$SignOut = {ctor: 'SignOut'};
var _user$project$Model$OnSignIn = {ctor: 'OnSignIn'};
var _user$project$Model$OnFirebaseConnectionChanged = function (a) {
	return {ctor: 'OnFirebaseConnectionChanged', _0: a};
};
var _user$project$Model$OnFCMTokenChanged = function (a) {
	return {ctor: 'OnFCMTokenChanged', _0: a};
};
var _user$project$Model$OnUserChanged = function (a) {
	return {ctor: 'OnUserChanged', _0: a};
};
var _user$project$Model$OnFirebaseChange = F2(
	function (a, b) {
		return {ctor: 'OnFirebaseChange', _0: a, _1: b};
	});
var _user$project$Model$OnEntityUpsert = function (a) {
	return {ctor: 'OnEntityUpsert', _0: a};
};
var _user$project$Model$OnPouchDBChange = F2(
	function (a, b) {
		return {ctor: 'OnPouchDBChange', _0: a, _1: b};
	});
var _user$project$Model$OnCommonMsg = function (a) {
	return {ctor: 'OnCommonMsg', _0: a};
};
var _user$project$Model$commonMsg = _user$project$CommonMsg$createHelper(_user$project$Model$OnCommonMsg);
var _user$project$Model$noop = _user$project$Model$commonMsg.noOp;
var _user$project$Model$NOOP = {ctor: 'NOOP'};
var _user$project$Model$SyncView = {ctor: 'SyncView'};
var _user$project$Model$EntityListView = function (a) {
	return {ctor: 'EntityListView', _0: a};
};
var _user$project$Model$init = function (flags) {
	var firebaseClient = _user$project$Firebase$initClient(flags.deviceId);
	var _p53 = flags;
	var now = _p53.now;
	var encodedTodoList = _p53.encodedTodoList;
	var encodedProjectList = _p53.encodedProjectList;
	var encodedContextList = _p53.encodedContextList;
	var pouchDBRemoteSyncURI = _p53.pouchDBRemoteSyncURI;
	var storeGenerator = A4(
		_mgold$elm_random_pcg$Random_Pcg$map3,
		F3(
			function (v0, v1, v2) {
				return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
			}),
		A2(_user$project$Todo_Store$generator, flags.deviceId, encodedTodoList),
		A2(_user$project$Project$storeGenerator, flags.deviceId, encodedProjectList),
		A2(_user$project$Context$storeGenerator, flags.deviceId, encodedContextList));
	var _p54 = A2(
		_mgold$elm_random_pcg$Random_Pcg$step,
		storeGenerator,
		_user$project$Ext_Random$seedFromTime(now));
	var todoStore = _p54._0._0;
	var projectStore = _p54._0._1;
	var contextStore = _p54._0._2;
	var seed = _p54._1;
	var editMode = (_user$project$Store$isEmpty(todoStore) || (_user$project$Store$isEmpty(contextStore) || _user$project$Store$isEmpty(projectStore))) ? _user$project$ExclusiveMode$firstVisit : _user$project$ExclusiveMode$none;
	var model = {
		now: now,
		todoStore: todoStore,
		projectStore: projectStore,
		contextStore: contextStore,
		editMode: editMode,
		mainViewType: _user$project$Model$EntityListView(_user$project$Entity$defaultListView),
		keyboardState: _user$project$Ext_Keyboard$init,
		showDeleted: false,
		reminderOverlay: _user$project$ReminderOverlay$none,
		pouchDBRemoteSyncURI: pouchDBRemoteSyncURI,
		user: _user$project$Firebase$NotLoggedIn,
		fcmToken: _elm_lang$core$Maybe$Nothing,
		developmentMode: flags.developmentMode,
		selectedEntityIdSet: _elm_lang$core$Set$empty,
		layout: {narrow: false, forceNarrow: false},
		appVersion: flags.appVersion,
		deviceId: flags.deviceId,
		focusInEntity: _user$project$Model$inboxEntity,
		timeTracker: _user$project$Todo_TimeTracker$none,
		firebaseClient: firebaseClient,
		keyComboModel: _scottcorgan$keyboard_combo$Keyboard_Combo$init(
			{toMsg: _user$project$Model$OnKeyCombo, combos: _user$project$Model$keyboardCombos}),
		config: flags.config
	};
	return _Fresheyeball$elm_return$Return$singleton(model);
};
var _user$project$Model$projectView = function (_p55) {
	return _user$project$Model$EntityListView(
		_user$project$Entity$ProjectView(
			_user$project$Document$getId(_p55)));
};
var _user$project$Model$switchToProjectView = function (_p56) {
	return _user$project$Model$switchToView(
		_user$project$Model$projectView(_p56));
};
var _user$project$Model$createAndEditNewProject = function (model) {
	return function (_p57) {
		var _p58 = _p57;
		var _p59 = _p58._0;
		return A2(
			_user$project$Model$startEditingEntity,
			_user$project$Entity$ProjectEntity(_p59),
			A2(_user$project$Model$switchToProjectView, _p59, _p58._1));
	}(
		A2(
			_Fresheyeball$elm_tuple_extra$Tuple2$mapSecond,
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$setProjectStore, model),
			A2(
				_user$project$Store$insert,
				A2(_user$project$Project$init, '<New Project>', model.now),
				model.projectStore)));
};
var _user$project$Model$contextView = function (_p60) {
	return _user$project$Model$EntityListView(
		_user$project$Entity$ContextView(
			_user$project$Document$getId(_p60)));
};
var _user$project$Model$switchToContextView = function (_p61) {
	return _user$project$Model$switchToView(
		_user$project$Model$contextView(_p61));
};
var _user$project$Model$createAndEditNewContext = function (model) {
	return function (_p62) {
		var _p63 = _p62;
		var _p64 = _p63._0;
		return A2(
			_user$project$Model$startEditingEntity,
			_user$project$Entity$ContextEntity(_p64),
			A2(_user$project$Model$switchToContextView, _p64, _p63._1));
	}(
		A2(
			_Fresheyeball$elm_tuple_extra$Tuple2$mapSecond,
			A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$setContextStore, model),
			A2(
				_user$project$Store$insert,
				A2(_user$project$Context$init, '<New Context>', model.now),
				model.contextStore)));
};
var _user$project$Model$switchToContextsView = _user$project$Model$switchToView(
	_user$project$Model$EntityListView(_user$project$Entity$ContextsView));
var _user$project$Model$setEntityListViewType = function (_p65) {
	return _user$project$Model$switchToView(
		_user$project$Model$EntityListView(_p65));
};
var _user$project$Model$switchToEntityListViewFromEntity = F2(
	function (entity, model) {
		var maybeEntityListViewType = _user$project$Model$maybeGetCurrentEntityListViewType(model);
		return A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _user$project$Model$setEntityListViewType, model)(
			A2(_user$project$Entity$getGotoEntityViewType, maybeEntityListViewType, entity));
	});
