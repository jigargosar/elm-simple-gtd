{"version":3,"sources":["test/javascript/namespace-scanner_test.ts"],"names":[],"mappings":"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","file":"namespace-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\nimport * as path from 'path';\n\nimport {Visitor} from '../../javascript/estree-visitor';\nimport {JavaScriptParser} from '../../javascript/javascript-parser';\nimport {ScannedNamespace} from '../../javascript/namespace';\nimport {NamespaceScanner} from '../../javascript/namespace-scanner';\nimport {FSUrlLoader} from '../../url-loader/fs-url-loader';\nimport {CodeUnderliner} from '../test-utils';\n\nsuite('NamespaceScanner', () => {\n  const testFilesDir = path.resolve(__dirname, '../static/namespaces/');\n  const urlLoader = new FSUrlLoader(testFilesDir);\n  const underliner = new CodeUnderliner(urlLoader);\n\n  async function getNamespaces(filename: string): Promise<any[]> {\n    const file = await urlLoader.load(filename);\n    const parser = new JavaScriptParser();\n    const document = parser.parse(file, filename);\n    const scanner = new NamespaceScanner();\n    const visit = (visitor: Visitor) =>\n        Promise.resolve(document.visit([visitor]));\n    const {features} = await scanner.scan(document, visit);\n    return <ScannedNamespace[]>features.filter(\n        (e) => e instanceof ScannedNamespace);\n  };\n\n  test('scans named namespaces', async() => {\n    const namespaces = await getNamespaces('namespace-named.js');\n    assert.equal(namespaces.length, 2);\n\n    assert.equal(namespaces[0].name, 'ExplicitlyNamedNamespace');\n    assert.equal(namespaces[0].description, '');\n    assert.deepEqual(namespaces[0].warnings, []);\n    assert.equal(await underliner.underline(namespaces[0].sourceRange), `\nvar ExplicitlyNamedNamespace = {};\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n\n    assert.equal(\n        namespaces[1].name, 'ExplicitlyNamedNamespace.NestedNamespace');\n    assert.equal(namespaces[1].description, '');\n    assert.deepEqual(namespaces[1].warnings, []);\n    assert.equal(await underliner.underline(namespaces[1].sourceRange), `\nExplicitlyNamedNamespace.NestedNamespace = {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  foo: \\'bar\\'\n~~~~~~~~~~~~\n};\n~~`);\n  });\n\n  test('scans unnamed namespaces', async() => {\n    const namespaces = await getNamespaces('namespace-unnamed.js');\n    assert.equal(namespaces.length, 4);\n\n    assert.equal(namespaces[0].name, 'ImplicitlyNamedNamespace');\n    assert.equal(namespaces[0].description, 'A namespace description');\n    assert.equal(namespaces[0].summary, 'A namespace summary');\n    assert.deepEqual(namespaces[0].warnings, []);\n    assert.equal(await underliner.underline(namespaces[0].sourceRange), `\nvar ImplicitlyNamedNamespace = {};\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n\n    assert.equal(\n        namespaces[1].name, 'ImplicitlyNamedNamespace.NestedNamespace');\n    assert.equal(namespaces[1].description, '');\n    assert.deepEqual(namespaces[1].warnings, []);\n    assert.equal(await underliner.underline(namespaces[1].sourceRange), `\nImplicitlyNamedNamespace.NestedNamespace = {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  foo: \\'bar\\'\n~~~~~~~~~~~~\n};\n~~`);\n\n    assert.equal(namespaces[2].name, 'ParentNamespace.FooNamespace');\n    assert.equal(namespaces[2].description, '');\n    assert.deepEqual(namespaces[2].warnings, []);\n    assert.equal(await underliner.underline(namespaces[2].sourceRange), `\nFooNamespace = {\n~~~~~~~~~~~~~~~~\n  foo: \\'bar\\'\n~~~~~~~~~~~~\n};\n~~`);\n\n    assert.equal(namespaces[3].name, 'ParentNamespace.BarNamespace');\n    assert.equal(namespaces[3].description, '');\n    assert.deepEqual(namespaces[3].warnings, []);\n    assert.equal(await underliner.underline(namespaces[3].sourceRange), `\nParentNamespace.BarNamespace = {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  foo: \\'bar\\'\n~~~~~~~~~~~~\n};\n~~`);\n  });\n\n  test('scans named, dynamic namespaces', async() => {\n    const namespaces = await getNamespaces('namespace-dynamic-named.js');\n    assert.equal(namespaces.length, 3);\n\n    assert.equal(namespaces[0].name, 'DynamicNamespace.ComputedProperty');\n    assert.equal(namespaces[0].description, '');\n    assert.deepEqual(namespaces[0].warnings, []);\n    assert.equal(await underliner.underline(namespaces[0].sourceRange), `\nDynamicNamespace['ComputedProperty'] = {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  foo: 'bar'\n~~~~~~~~~~~~\n};\n~~`);\n\n    assert.equal(\n        namespaces[1].name, 'DynamicNamespace.UnanalyzableComputedProperty');\n    assert.equal(namespaces[1].description, '');\n    assert.deepEqual(namespaces[1].warnings, []);\n    assert.equal(await underliner.underline(namespaces[1].sourceRange), `\nDynamicNamespace[baz] = {\n~~~~~~~~~~~~~~~~~~~~~~~~~\n  foo: 'bar'\n~~~~~~~~~~~~\n};\n~~`);\n\n    assert.equal(namespaces[2].name, 'DynamicNamespace.Aliased');\n    assert.equal(namespaces[2].description, '');\n    assert.deepEqual(namespaces[2].warnings, []);\n    assert.equal(await underliner.underline(namespaces[2].sourceRange), `\naliasToNamespace = {\n~~~~~~~~~~~~~~~~~~~~\n  foo: 'bar'\n~~~~~~~~~~~~\n};\n~~`);\n  });\n\n  test('scans unnamed, dynamic namespaces', async() => {\n    const namespaces = await getNamespaces('namespace-dynamic-unnamed.js');\n    assert.equal(namespaces.length, 1);\n\n    assert.equal(\n        namespaces[0].name, 'DynamicNamespace.InferredComputedProperty');\n    assert.equal(namespaces[0].description, '');\n    assert.deepEqual(namespaces[0].warnings, []);\n    assert.equal(await underliner.underline(namespaces[0].sourceRange), `\nDynamicNamespace['InferredComputedProperty'] = {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  foo: 'bar'\n~~~~~~~~~~~~\n};\n~~`);\n\n  });\n\n});\n"]}