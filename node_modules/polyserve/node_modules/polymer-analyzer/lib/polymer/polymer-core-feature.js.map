{"version":3,"sources":["polymer/polymer-core-feature.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,0CAAqC;AACrC,0CAAwI;AAExI;;GAEG;AACH,+BAAuC,SAAQ,sBAAc;IAA7D;;QAEE,aAAQ,GAAc,EAAE,CAAC;QACzB,eAAU,GAAsB,EAAE,CAAC;QACnC,YAAO,GAAoB,EAAE,CAAC;IAwDhC,CAAC;IAtDC,OAAO,CAAC,QAAkB;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC;QACT,CAAC;QAED,0EAA0E;QAC1E,sEAAsE;QACtE,MAAM,oBAAoB,GACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,yBAAyB,CAAC,CAAC;QAEnE,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC1B,oEAAoE;YACpE,wCAAwC;YACxC,MAAM,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/D,CAAC;QAED,yEAAyE;QACzE,oEAAoE;QACpE,2EAA2E;QAC3E,mBAAmB;QACnB,MAAM,aAAa,GAAe,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QAC1D,MAAM,UAAU,GAAa,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAClD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,WAAW,CAAC;YAC7C,IAAI,EAAE,sBAAsB;YAC5B,QAAQ,EAAE,IAAI;YACd,gBAAgB,EAAE,IAAI;SACvB,CAAC,CAAC;QACH,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC;YACxC,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC1C,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,CAAC;YACD,GAAG,CAAC,CAAC,MAAM,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,aAAK,CACZ;YACE,IAAI,EAAE,cAAc;YACpB,SAAS,EAAE,cAAc;YACzB,UAAU,EAAE,aAAa;YACzB,OAAO,EAAE,UAAU;YACnB,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,QAAQ;YACjB,4DAA4D;YAC5D,iEAAiE;YACjE,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,EAAE;YACnC,OAAO,EAAE,EAAE;YACX,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,EACD,QAAQ,CAAC,CAAC;IAChB,CAAC;CACF;AA5DD,8DA4DC;AAQD;;GAEG;AACH;IAKE,YAAmB,UAAsB,EAAS,OAAiB;QAAhD,eAAU,GAAV,UAAU,CAAY;QAAS,YAAO,GAAP,OAAO,CAAU;QAJnE,UAAK,GAAG,IAAI,GAAG,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAC1C,gBAAW,GAAG,IAAI,GAAG,EAAU,CAAC;QAChC,aAAQ,GAAc,EAAE,CAAC;IAGzB,CAAC;CACF;AAPD,gDAOC","file":"polymer-core-feature.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Class} from '../model/class';\nimport {Document, Feature, Method, Property, Resolvable, ScannedFeature, ScannedMethod, ScannedProperty, Warning} from '../model/model';\n\n/**\n * A scanned Polymer 1.x core \"feature\".\n */\nexport class ScannedPolymerCoreFeature extends ScannedFeature implements\n    Resolvable {\n  warnings: Warning[] = [];\n  properties: ScannedProperty[] = [];\n  methods: ScannedMethod[] = [];\n\n  resolve(document: Document): Feature|undefined {\n    if (this.warnings.length > 0) {\n      return;\n    }\n\n    // Sniff for the root `_addFeatures` call by presence of this method. This\n    // method must only appear once (in the root `polymer.html` document).\n    const isRootAddFeatureCall =\n        this.methods.some((p) => p.name === '_finishRegisterFeatures');\n\n    if (!isRootAddFeatureCall) {\n      // We're at the `Polymer.Base` assignment or a regular `_addFeature`\n      // call. We'll merge all of these below.\n      return new PolymerCoreFeature(this.properties, this.methods);\n    }\n\n    // Otherwise we're at the root of the `_addFeatures` tree. Thanks to HTML\n    // imports, we can be sure that this is the final core feature we'll\n    // resolve. Now we'll emit a \"fake\" class representing the union of all the\n    // feature objects.\n    const allProperties: Property[] = this.properties.slice();\n    const allMethods: Method[] = this.methods.slice();\n    const otherCoreFeatures = document.getFeatures({\n      kind: 'polymer-core-feature',\n      imported: true,\n      externalPackages: true,\n    });\n    for (const feature of otherCoreFeatures) {\n      for (const property of feature.properties) {\n        allProperties.push(property);\n      }\n      for (const method of feature.methods) {\n        allMethods.push(method);\n      }\n    }\n\n    return new Class(\n        {\n          name: 'Polymer.Base',\n          className: 'Polymer.Base',\n          properties: allProperties,\n          methods: allMethods,\n          abstract: true,\n          privacy: 'public',\n          // TODO(aomarks) The following should probably come from the\n          // Polymer.Base assignment instead of this final addFeature call.\n          jsdoc: this.jsdoc,\n          description: this.description || '',\n          summary: '',\n          sourceRange: this.sourceRange,\n          astNode: this.astNode,\n        },\n        document);\n  }\n}\n\ndeclare module '../model/queryable' {\n  interface FeatureKindMap {\n    'polymer-core-feature': PolymerCoreFeature;\n  }\n}\n\n/**\n * A resolved Polymer 1.x core \"feature\".\n */\nexport class PolymerCoreFeature implements Feature {\n  kinds = new Set(['polymer-core-feature']);\n  identifiers = new Set<string>();\n  warnings: Warning[] = [];\n\n  constructor(public properties: Property[], public methods: Method[]) {\n  }\n}\n"]}