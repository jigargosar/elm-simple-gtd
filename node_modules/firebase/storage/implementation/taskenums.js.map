{"version":3,"sources":["src/storage/implementation/taskenums.ts"],"names":["taskStateFromInternalTaskState","TaskEvent","STATE_CHANGED","InternalTaskState","RUNNING","PAUSING","PAUSED","SUCCESS","CANCELING","CANCELED","ERROR","TaskState","state"],"mappings":";;;;;QA+DMA,8B,GAAAA,8B;AA/DN;;;;;;;;;;;;;;;AAyBO,IAAMC,gCAAY;AACvB;AACAC,mBAAe;AAFQ,CAAlB;AAUA,IAAMC,gDAAoB;AAC/BC,aAAS,SADsB;AAE/BC,aAAS,SAFsB;AAG/BC,YAAQ,QAHuB;AAI/BC,aAAS,SAJsB;AAK/BC,eAAW,WALoB;AAM/BC,cAAU,UANqB;AAO/BC,WAAO;AAPwB,CAA1B;AAeA,IAAMC,gCAAY;AACvB;AACAP,aAAS,SAFc;AAGvB;AACAE,YAAQ,QAJe;AAKvB;AACAC,aAAS,SANc;AAOvB;AACAE,cAAU,UARa;AASvB;AACAC,WAAO;AAVgB,CAAlB;AAaD,SAAAV,8BAAA,CAAyCY,KAAzC,EAAiE;AAErE,YAAQA,KAAR;AACE,aAAKT,kBAAkBC,OAAvB;AACA,aAAKD,kBAAkBE,OAAvB;AACA,aAAKF,kBAAkBK,SAAvB;AACE,mBAAOG,UAAUP,OAAjB;AACF,aAAKD,kBAAkBG,MAAvB;AACE,mBAAOK,UAAUL,MAAjB;AACF,aAAKH,kBAAkBI,OAAvB;AACE,mBAAOI,UAAUJ,OAAjB;AACF,aAAKJ,kBAAkBM,QAAvB;AACE,mBAAOE,UAAUF,QAAjB;AACF,aAAKN,kBAAkBO,KAAvB;AACE,mBAAOC,UAAUD,KAAjB;AACF;AAEE;AACA,mBAAOC,UAAUD,KAAjB;AAhBJ;AAkBD","file":"taskenums.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n * @enum {string}\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n * @enum {string}\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n * @enum {string}\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(state: InternalTaskState):\n    TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n"]}