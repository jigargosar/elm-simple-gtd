var _user$project$Todo_View$createReminderMenuConfig = F2(
	function (form, model) {
		return {
			onSelect: function (_p0) {
				return _user$project$Model$commonMsg.noOp;
			},
			isSelected: function (_p1) {
				return false;
			},
			itemKey: _elm_lang$core$Basics$identity,
			itemSearchText: _elm_lang$core$Basics$identity,
			itemView: _elm_lang$html$Html$text,
			onStateChanged: function (_p2) {
				return _user$project$Model$OnTodoMsg(
					A2(
						_user$project$Todo_Msg$UpdateReminderForm,
						form,
						_user$project$Todo_ReminderForm$SetMenuState(_p2)));
			},
			noOp: _user$project$Model$commonMsg.noOp,
			onOutsideMouseDown: _user$project$Model$OnDeactivateEditingMode
		};
	});
var _user$project$Todo_View$reminderPopup = function (form) {
	var updateReminderForm = function (_p3) {
		return _user$project$Model$OnTodoMsg(
			A2(_user$project$Todo_Msg$UpdateReminderForm, form, _p3));
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('overlay'),
			_1: {
				ctor: '::',
				_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(_user$project$Model$OnDeactivateEditingMode),
				_1: {
					ctor: '::',
					_0: _user$project$Ext_Keyboard$onKeyDownStopPropagation(
						function (_p4) {
							return _user$project$Model$NOOP;
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('popup-menu'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('z-depth-4 static'),
						_1: {
							ctor: '::',
							_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(_user$project$Model$commonMsg.noOp),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('font-subhead'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Select date and time'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('input-field'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('date'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('auto-focus'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(form.date),
												_1: {
													ctor: '::',
													_0: _user$project$WebComponents$onChange(
														function (_p5) {
															return updateReminderForm(
																_user$project$Todo_ReminderForm$SetDate(_p5));
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$label,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('active'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Date'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('input-field'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('time'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(form.time),
												_1: {
													ctor: '::',
													_0: _user$project$WebComponents$onChange(
														function (_p6) {
															return updateReminderForm(
																_user$project$Todo_ReminderForm$SetTime(_p6));
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$label,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('active'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Time'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _user$project$View_Shared$defaultOkCancelButtons,
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Todo_View$contextMenu = _user$project$Todo_View_Menu$context;
var _user$project$Todo_View$projectMenu = _user$project$Todo_View_Menu$project;
var _user$project$Todo_View$edit = F2(
	function (form, appModel) {
		var fireCancel = _user$project$Model$OnDeactivateEditingMode;
		var fireToggleDelete = A2(_user$project$Model$OnEntityAction, form.entity, _user$project$Entity$ToggleDeleted);
		var fireTextChanged = function (_p7) {
			return A2(
				_user$project$Model$UpdateTodoForm,
				form,
				_user$project$Todo_Form$SetText(_p7));
		};
		var todoText = form.todoText;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('overlay'),
				_1: {
					ctor: '::',
					_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(_user$project$Model$OnDeactivateEditingMode),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('modal fixed-center'),
						_1: {
							ctor: '::',
							_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(fireCancel),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('modal-content'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('input-field'),
										_1: {
											ctor: '::',
											_0: _user$project$Ext_Keyboard$onKeyDownStopPropagation(
												function (_p8) {
													return _user$project$Model$NOOP;
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$textarea,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('materialize-textarea auto-focus'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$defaultValue(todoText),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(fireTextChanged),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$label,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Todo'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$View_Shared$defaultOkCancelDeleteButtons(fireToggleDelete),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Todo_View$createReminderViewModel = F2(
	function (now, todo) {
		var overDueText = 'Overdue';
		var formatReminderTime = function (time) {
			var nowDate = _elm_lang$core$Date$fromTime(now);
			var dueDate = _elm_lang$core$Date$fromTime(time);
			return (_elm_lang$core$Native_Utils.cmp(time, now) < 0) ? overDueText : A2(_user$project$Ext_Time$smartFormat, now, time);
		};
		var displayText = A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				_user$project$Todo$getMaybeTime(todo),
				formatReminderTime),
			'');
		return {
			displayText: displayText,
			isOverDue: _elm_lang$core$Native_Utils.eq(displayText, overDueText),
			startEditingMsg: _user$project$Model$StartEditingReminder(todo)
		};
	});
var _user$project$Todo_View$editScheduleButton = function (vm) {
	var reminderVM = vm.reminder;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id(
				A2(_elm_lang$core$Basics_ops['++'], 'edit-schedule-button-', vm.key)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('layout horizontal center-center'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(reminderVM.startEditingMsg),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'overdue', reminderVM.isOverDue),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'reminder-text', true),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(reminderVM.displayText),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$Material$smallIconButton,
					'schedule',
					{
						ctor: '::',
						_0: vm.tabindexAV,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Todo_View$projectProjectButton = function (vm) {
	return A2(
		_edvail$elm_polymer$Polymer_Paper$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id(
				A2(_elm_lang$core$Basics_ops['++'], 'edit-project-button-', vm.key)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'height', '24px'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('small padding-0 margin-0 shrink'),
					_1: {
						ctor: '::',
						_0: vm.tabindexAV,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(vm.showProjectDropdownMsg),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('title primary-text-color'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(vm.projectDisplayName),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Todo_View$editContextButton = function (vm) {
	return A2(
		_edvail$elm_polymer$Polymer_Paper$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id(
				A2(_elm_lang$core$Basics_ops['++'], 'edit-context-button-', vm.key)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'height', '24px'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('small padding-0 margin-0 shrink'),
					_1: {
						ctor: '::',
						_0: vm.tabindexAV,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(vm.showContextDropdownMsg),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('title primary-text-color'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(vm.contextDisplayName),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Todo_View$doneIconButton = function (vm) {
	return A2(
		_edvail$elm_polymer$Polymer_Paper$iconButton,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'done-icon done-',
					_elm_lang$core$Basics$toString(vm.isDone))),
			_1: {
				ctor: '::',
				_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(vm.toggleDoneMsg),
				_1: {
					ctor: '::',
					_0: _user$project$WebComponents$iconA('done'),
					_1: {
						ctor: '::',
						_0: vm.tabindexAV,
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Todo_View$defaultView = function (vm) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(''),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(vm.startEditingMsg),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _user$project$Todo_View$doneIconButton(vm),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('display-text'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(vm.displayText),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('layout horizontal end-justified'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'margin', '0 8px'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _user$project$Todo_View$editScheduleButton(vm),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'padding', '0 8px'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$Todo_View$editContextButton(vm),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'padding', '0 8px'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$Todo_View$projectProjectButton(vm),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	};
};
var _user$project$Todo_View$getDisplayText = function (todo) {
	var trimAndReplaceEmptyWithDefault = A2(
		_user$project$Ext_Function_Infix_ops['>>?='],
		function (_p9) {
			return _elm_community$string_extra$String_Extra$nonEmpty(
				_elm_lang$core$String$trim(_p9));
		},
		'< empty >');
	var tripleNewLineAndRestRegex = _elm_lang$core$Regex$regex('\\n\\n\\n(.|\n)*');
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$AtMost(1),
		tripleNewLineAndRestRegex,
		function (match) {
			return '\n...';
		},
		trimAndReplaceEmptyWithDefault(
			_user$project$Todo$getText(todo)));
};
var _user$project$Todo_View$createTodoViewModel = F3(
	function (appVM, tabindexAV, todo) {
		var onTodoMsg = _user$project$Model$OnTodoMsg;
		var createEntityActionMsg = _user$project$Model$OnEntityAction(
			_user$project$Entity$TodoEntity(todo));
		var startEditingMsg = createEntityActionMsg(_user$project$Entity$StartEditing);
		var toggleDeleteMsg = createEntityActionMsg(_user$project$Entity$ToggleDeleted);
		var contextId = _user$project$Todo$getContextId(todo);
		var projectId = _user$project$Todo$getProjectId(todo);
		var truncateName = _elm_community$string_extra$String_Extra$ellipsis(15);
		var projectDisplayName = A2(
			_elm_lang$core$String$append,
			'#',
			truncateName(
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_user$project$Ext_Function_Infix_ops['>>?'],
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _elm_lang$core$Dict$get, appVM.projectByIdDict),
						_user$project$Project$getName)(projectId),
					'')));
		var contextDisplayName = truncateName(
			A2(
				_elm_lang$core$String$append,
				'@',
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
					A2(
						_user$project$Ext_Function_Infix_ops['>>?'],
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _elm_lang$core$Dict$get, appVM.contextByIdDict),
						_user$project$Context$getName)(contextId),
					'Inbox')));
		var todoId = _user$project$Document$getId(todo);
		var toggleDoneMsg = _user$project$Model$ToggleTodoDone(todoId);
		var onKeyDownMsg = function (_p10) {
			var _p11 = _p10;
			if (_user$project$Ext_Keyboard$isNoSoftKeyDown(_p11)) {
				var _p12 = _p11.key;
				switch (_p12.ctor) {
					case 'Space':
						return createEntityActionMsg(_user$project$Entity$ToggleSelected);
					case 'CharE':
						return startEditingMsg;
					case 'CharD':
						return toggleDoneMsg;
					case 'Delete':
						return toggleDeleteMsg;
					case 'CharP':
						return _user$project$Model$StartEditingProject(todo);
					case 'CharC':
						return _user$project$Model$StartEditingContext(todo);
					case 'CharR':
						return _user$project$Model$StartEditingReminder(todo);
					case 'CharG':
						return createEntityActionMsg(_user$project$Entity$Goto);
					case 'CharS':
						return onTodoMsg(
							_user$project$Todo_Msg$SwitchOrStartRunning(todoId));
					default:
						return _user$project$Model$commonMsg.noOp;
				}
			} else {
				return _user$project$Model$commonMsg.noOp;
			}
		};
		var now = appVM.now;
		return {
			isDone: _user$project$Todo$isDone(todo),
			key: todoId,
			isDeleted: _user$project$Todo$getDeleted(todo),
			onKeyDownMsg: onKeyDownMsg,
			displayText: _user$project$Todo_View$getDisplayText(todo),
			projectDisplayName: projectDisplayName,
			contextDisplayName: contextDisplayName,
			showContextDropdownMsg: _user$project$Model$StartEditingContext(todo),
			showProjectDropdownMsg: _user$project$Model$StartEditingProject(todo),
			startEditingMsg: startEditingMsg,
			toggleDoneMsg: toggleDoneMsg,
			reminder: A2(_user$project$Todo_View$createReminderViewModel, now, todo),
			onFocusIn: createEntityActionMsg(_user$project$Entity$OnFocusIn),
			tabindexAV: tabindexAV,
			isSelected: A2(_elm_lang$core$Set$member, todoId, appVM.selectedEntityIdSet)
		};
	});
var _user$project$Todo_View$dropdownTrigger = F2(
	function (_p13, content) {
		var _p14 = _p13;
		return A2(
			_edvail$elm_polymer$Polymer_Paper$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'height', '24px'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _user$project$WebComponents$slotDropdownTrigger,
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('small padding-0 margin-0 shrink'),
						_1: {
							ctor: '::',
							_0: _p14.tabindexAV,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('title primary-text-color'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: content,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Todo_View$init = function (vm) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'todo-item focusable-list-item collection-item', true),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'selected', vm.isSelected),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Events$onFocusIn(vm.onFocusIn),
				_1: {
					ctor: '::',
					_0: vm.tabindexAV,
					_1: {
						ctor: '::',
						_0: _user$project$Ext_Keyboard$onKeyDown(vm.onKeyDownMsg),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-key', vm.key),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		_user$project$Todo_View$defaultView(vm));
};
var _user$project$Todo_View$initKeyed = function (vm) {
	return {
		ctor: '_Tuple2',
		_0: vm.key,
		_1: _user$project$Todo_View$init(vm)
	};
};
var _user$project$Todo_View$TodoViewModel = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {key: a, displayText: b, isDone: c, isDeleted: d, onKeyDownMsg: e, projectDisplayName: f, contextDisplayName: g, startEditingMsg: h, toggleDoneMsg: i, showContextDropdownMsg: j, showProjectDropdownMsg: k, reminder: l, onFocusIn: m, tabindexAV: n, isSelected: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Todo_View$ReminderViewModel = F3(
	function (a, b, c) {
		return {displayText: a, isOverDue: b, startEditingMsg: c};
	});
