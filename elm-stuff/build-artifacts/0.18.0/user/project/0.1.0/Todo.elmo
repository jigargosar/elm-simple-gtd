var _user$project$Todo$toAnyPassPredicate = function (predicateList) {
	return function (_p0) {
		return A2(
			_elm_lang$core$List$any,
			_elm_lang$core$Basics$identity,
			A2(_danielnarey$elm_toolkit$Toolkit_Helpers$applyList, predicateList, _p0));
	};
};
var _user$project$Todo$toAllPassPredicate = function (predicateList) {
	return function (_p1) {
		return A2(
			_elm_lang$core$List$all,
			_elm_lang$core$Basics$identity,
			A2(_danielnarey$elm_toolkit$Toolkit_Helpers$applyList, predicateList, _p1));
	};
};
var _user$project$Todo$rejectAnyPass = function (_p2) {
	return _elm_community$list_extra$List_Extra$filterNot(
		_user$project$Todo$toAnyPassPredicate(_p2));
};
var _user$project$Todo$filterAllPass = function (_p3) {
	return _elm_lang$core$List$filter(
		_user$project$Todo$toAllPassPredicate(_p3));
};
var _user$project$Todo$getContextId = function (_) {
	return _.contextId;
};
var _user$project$Todo$isDone = function (_) {
	return _.done;
};
var _user$project$Todo$getText = function (_) {
	return _.text;
};
var _user$project$Todo$encodeReminder = function (reminder) {
	var _p4 = reminder;
	if (_p4.ctor === 'None') {
		return _elm_lang$core$Json_Encode$null;
	} else {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: A2(
					_user$project$Ext_Function_Infix_ops['=>'],
					'at',
					_elm_lang$core$Json_Encode$float(_p4._0)),
				_1: {ctor: '[]'}
			});
	}
};
var _user$project$Todo$todoConstructor = function (id) {
	return function (rev) {
		return function (createdAt) {
			return function (modifiedAt) {
				return function (deleted) {
					return function (deviceId) {
						return function (deletedAt) {
							return function (done) {
								return function (text) {
									return function (dueAt) {
										return function (projectId) {
											return function (contextId) {
												return function (reminder) {
													return {id: id, rev: rev, dirty: false, createdAt: createdAt, modifiedAt: modifiedAt, deviceId: deviceId, deleted: deleted, deletedAt: deletedAt, done: done, text: text, dueAt: dueAt, projectId: projectId, contextId: contextId, reminder: reminder};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Todo$defaultContextId = '';
var _user$project$Todo$defaultProjectId = '';
var _user$project$Todo$defaultDone = false;
var _user$project$Todo$defaultDeletedAt = 0;
var _user$project$Todo$defaultDeleted = false;
var _user$project$Todo$defaultDueAt = _elm_lang$core$Maybe$Nothing;
var _user$project$Todo$getMaybeReminderTime = function (model) {
	if (_elm_community$maybe_extra$Maybe_Extra$isNothing(model.dueAt)) {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		var _p5 = model.reminder;
		if (_p5.ctor === 'None') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(_p5._0);
		}
	}
};
var _user$project$Todo$isReminderOverdue = function (now) {
	return function (_p6) {
		return A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			false,
			function (time) {
				return _elm_lang$core$Native_Utils.cmp(time, now) < 1;
			},
			_user$project$Todo$getMaybeReminderTime(_p6));
	};
};
var _user$project$Todo$hasReminderChanged = function (_p7) {
	var _p8 = _p7;
	return !_elm_lang$core$Native_Utils.eq(_p8._0.reminder, _p8._1.reminder);
};
var _user$project$Todo$getModifiedAt = function (_) {
	return _.modifiedAt;
};
var _user$project$Todo$modifiedAtInWords = function (now) {
	return function (_p9) {
		return A3(
			_alpacaaa$elm_date_distance$Date_Distance$inWordsWithConfig,
			_elm_lang$core$Native_Utils.update(
				_alpacaaa$elm_date_distance$Date_Distance$defaultConfig,
				{includeSeconds: true}),
			_elm_lang$core$Date$fromTime(now),
			_elm_lang$core$Date$fromTime(
				_user$project$Todo$getModifiedAt(_p9)));
	};
};
var _user$project$Todo$getCreatedAt = function (_) {
	return _.createdAt;
};
var _user$project$Todo$createdAtInWords = function (now) {
	return function (_p10) {
		return A3(
			_alpacaaa$elm_date_distance$Date_Distance$inWordsWithConfig,
			_elm_lang$core$Native_Utils.update(
				_alpacaaa$elm_date_distance$Date_Distance$defaultConfig,
				{includeSeconds: true}),
			_elm_lang$core$Date$fromTime(now),
			_elm_lang$core$Date$fromTime(
				_user$project$Todo$getCreatedAt(_p10)));
	};
};
var _user$project$Todo$getProjectId = function (_) {
	return _.projectId;
};
var _user$project$Todo$hasProjectId = function (projectId) {
	return function (_p11) {
		return A2(
			_user$project$Ext_Function$equals,
			projectId,
			_user$project$Todo$getProjectId(_p11));
	};
};
var _user$project$Todo$getDeleted = function (_) {
	return _.deleted;
};
var _user$project$Todo$isDeleted = _user$project$Todo$getDeleted;
var _user$project$Todo$getDeletedAt = function (todo) {
	return (_user$project$Todo$getDeleted(todo) && _elm_lang$core$Native_Utils.eq(todo.deletedAt, _user$project$Todo$defaultDeletedAt)) ? _user$project$Todo$getModifiedAt(todo) : todo.deletedAt;
};
var _user$project$Todo$isNotDeleted = function (_p12) {
	return !_user$project$Todo$getDeleted(_p12);
};
var _user$project$Todo$doneFilter = _user$project$Todo$toAllPassPredicate(
	{
		ctor: '::',
		_0: _user$project$Todo$isNotDeleted,
		_1: {
			ctor: '::',
			_0: _user$project$Todo$isDone,
			_1: {ctor: '[]'}
		}
	});
var _user$project$Todo$projectIdFilter = function (projectId) {
	return _user$project$Todo$toAllPassPredicate(
		{
			ctor: '::',
			_0: _user$project$Todo$hasProjectId(projectId),
			_1: {
				ctor: '::',
				_0: _user$project$Todo$isNotDeleted,
				_1: {
					ctor: '::',
					_0: function (_p13) {
						return !_user$project$Todo$isDone(_p13);
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Todo$binFilter = _user$project$Todo$toAllPassPredicate(
	{
		ctor: '::',
		_0: _user$project$Todo$getDeleted,
		_1: {ctor: '[]'}
	});
var _user$project$Todo$getDone = function (_) {
	return _.done;
};
var _user$project$Todo$getDueAt = function (_) {
	return _.dueAt;
};
var _user$project$Todo$getMaybeTime = function (model) {
	return A2(
		_elm_community$maybe_extra$Maybe_Extra$orElse,
		_user$project$Todo$getDueAt(model),
		_user$project$Todo$getMaybeReminderTime(model));
};
var _user$project$Todo$isSnoozed = function (todo) {
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
		A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
			_danielnarey$elm_toolkit$Toolkit_Helpers$maybe2Tuple(
				{
					ctor: '_Tuple2',
					_0: _user$project$Todo$getMaybeReminderTime(todo),
					_1: _user$project$Todo$getDueAt(todo)
				}),
			_elm_lang$core$Basics$uncurry(_user$project$Ext_Function$notEquals)),
		false);
};
var _user$project$Todo$encodeOtherFields = function (todo) {
	return {
		ctor: '::',
		_0: A2(
			_user$project$Ext_Function_Infix_ops['=>'],
			'done',
			_elm_lang$core$Json_Encode$bool(
				_user$project$Todo$isDone(todo))),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Ext_Function_Infix_ops['=>'],
				'text',
				_elm_lang$core$Json_Encode$string(
					_user$project$Todo$getText(todo))),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$Ext_Function_Infix_ops['=>'],
					'dueAt',
					A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
						A2(
							_elm_lang$core$Maybe$map,
							_elm_lang$core$Json_Encode$float,
							_user$project$Todo$getDueAt(todo)),
						_elm_lang$core$Json_Encode$null)),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Ext_Function_Infix_ops['=>'],
						'projectId',
						_elm_lang$core$Json_Encode$string(todo.projectId)),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Ext_Function_Infix_ops['=>'],
							'contextId',
							_elm_lang$core$Json_Encode$string(todo.contextId)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Ext_Function_Infix_ops['=>'],
								'reminder',
								_user$project$Todo$encodeReminder(todo.reminder)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$Ext_Function_Infix_ops['=>'],
									'deletedAt',
									_elm_lang$core$Json_Encode$float(
										_user$project$Todo$getDeletedAt(todo))),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Todo$Record = F7(
	function (a, b, c, d, e, f, g) {
		return {done: a, text: b, dueAt: c, projectId: d, contextId: e, reminder: f, deletedAt: g};
	});
var _user$project$Todo$At = function (a) {
	return {ctor: 'At', _0: a};
};
var _user$project$Todo$reminderDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'at',
	_elm_lang$core$Json_Decode$float,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
		function (time) {
			return _user$project$Todo$At(time);
		}));
var _user$project$Todo$None = {ctor: 'None'};
var _user$project$Todo$defaultReminder = _user$project$Todo$None;
var _user$project$Todo$todoRecordDecoder = function (_p14) {
	return A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'reminder',
		_user$project$Todo$reminderDecoder,
		_user$project$Todo$defaultReminder,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'contextId',
			_elm_lang$core$Json_Decode$string,
			_user$project$Todo$defaultContextId,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'projectId',
				_elm_lang$core$Json_Decode$string,
				_user$project$Todo$defaultProjectId,
				A4(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
					'dueAt',
					_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$float),
					_user$project$Todo$defaultDueAt,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'text',
						_elm_lang$core$Json_Decode$string,
						A4(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
							'done',
							_elm_lang$core$Json_Decode$bool,
							_user$project$Todo$defaultDone,
							A4(_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional, 'deletedAt', _elm_lang$core$Json_Decode$float, _user$project$Todo$defaultDeletedAt, _p14)))))));
};
var _user$project$Todo$decoder = _user$project$Todo$todoRecordDecoder(
	_user$project$Document$documentFieldsDecoder(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Todo$todoConstructor)));
var _user$project$Todo$init = F4(
	function (createdAt, text, deviceId, id) {
		return _user$project$Todo$todoConstructor(id)(_user$project$Document$defaultRevision)(createdAt)(createdAt)(_user$project$Todo$defaultDeleted)(deviceId)(_user$project$Todo$defaultDeletedAt)(_user$project$Todo$defaultDone)(text)(_user$project$Todo$defaultDueAt)(_user$project$Todo$defaultProjectId)(_user$project$Todo$defaultContextId)(_user$project$Todo$defaultReminder);
	});
var _user$project$Todo$maybeTimeToReminder = function (maybeTime) {
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
		A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'], maybeTime, _user$project$Todo$At),
		_user$project$Todo$None);
};
var _user$project$Todo$SnoozeTill = function (a) {
	return {ctor: 'SnoozeTill', _0: a};
};
var _user$project$Todo$TurnReminderOff = {ctor: 'TurnReminderOff'};
var _user$project$Todo$ToggleDeleted = {ctor: 'ToggleDeleted'};
var _user$project$Todo$ToggleDone = {ctor: 'ToggleDone'};
var _user$project$Todo$SetProject = function (a) {
	return {ctor: 'SetProject', _0: a};
};
var _user$project$Todo$CopyProjectAndContextId = function (a) {
	return {ctor: 'CopyProjectAndContextId', _0: a};
};
var _user$project$Todo$SetProjectId = function (a) {
	return {ctor: 'SetProjectId', _0: a};
};
var _user$project$Todo$SetContext = function (a) {
	return {ctor: 'SetContext', _0: a};
};
var _user$project$Todo$SetTime = function (a) {
	return {ctor: 'SetTime', _0: a};
};
var _user$project$Todo$SetContextId = function (a) {
	return {ctor: 'SetContextId', _0: a};
};
var _user$project$Todo$SetDeleted = function (a) {
	return {ctor: 'SetDeleted', _0: a};
};
var _user$project$Todo$SetText = function (a) {
	return {ctor: 'SetText', _0: a};
};
var _user$project$Todo$MarkDone = {ctor: 'MarkDone'};
var _user$project$Todo$SetDone = function (a) {
	return {ctor: 'SetDone', _0: a};
};
var _user$project$Todo$update = F2(
	function (actions, now) {
		var innerUpdate = F2(
			function (action, model) {
				innerUpdate:
				while (true) {
					var _p15 = action;
					switch (_p15.ctor) {
						case 'SetDone':
							var _p16 = _p15._0;
							var reminder = _p16 ? _user$project$Todo$None : model.reminder;
							return _elm_lang$core$Native_Utils.update(
								model,
								{done: _p16, reminder: reminder});
						case 'SetDeleted':
							return _elm_lang$core$Native_Utils.update(
								model,
								{deleted: _p15._0, deletedAt: now, reminder: _user$project$Todo$None});
						case 'SetText':
							return _elm_lang$core$Native_Utils.update(
								model,
								{text: _p15._0});
						case 'SetContextId':
							return _elm_lang$core$Native_Utils.update(
								model,
								{contextId: _p15._0});
						case 'SetProjectId':
							return _elm_lang$core$Native_Utils.update(
								model,
								{projectId: _p15._0});
						case 'CopyProjectAndContextId':
							var _p18 = _p15._0;
							return function (_p17) {
								return A2(
									innerUpdate,
									_user$project$Todo$SetProjectId(_p18.projectId),
									A2(
										innerUpdate,
										_user$project$Todo$SetContextId(_p18.contextId),
										_p17));
							}(model);
						case 'SetContext':
							var _v4 = _user$project$Todo$SetContextId(
								_user$project$Document$getId(_p15._0)),
								_v5 = model;
							action = _v4;
							model = _v5;
							continue innerUpdate;
						case 'SetProject':
							var _v6 = _user$project$Todo$SetProjectId(
								_user$project$Document$getId(_p15._0)),
								_v7 = model;
							action = _v6;
							model = _v7;
							continue innerUpdate;
						case 'ToggleDone':
							var _v8 = _user$project$Todo$SetDone(!model.done),
								_v9 = model;
							action = _v8;
							model = _v9;
							continue innerUpdate;
						case 'MarkDone':
							var _v10 = _user$project$Todo$SetDone(true),
								_v11 = model;
							action = _v10;
							model = _v11;
							continue innerUpdate;
						case 'ToggleDeleted':
							var _v12 = _user$project$Todo$SetDeleted(!model.deleted),
								_v13 = model;
							action = _v12;
							model = _v13;
							continue innerUpdate;
						case 'SetTime':
							var _p19 = _p15._0;
							var reminder = _user$project$Todo$maybeTimeToReminder(_p19);
							return _elm_lang$core$Native_Utils.update(
								model,
								{dueAt: _p19, reminder: reminder});
						case 'TurnReminderOff':
							return _elm_lang$core$Native_Utils.update(
								model,
								{reminder: _user$project$Todo$None});
						default:
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									reminder: _user$project$Todo$At(_p15._0)
								});
					}
				}
			});
		return function (_p20) {
			return function (model) {
				return _elm_lang$core$Native_Utils.update(
					model,
					{modifiedAt: now});
			}(
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'],
					_elm_lang$core$List$foldl(innerUpdate),
					actions)(_p20));
		};
	});
