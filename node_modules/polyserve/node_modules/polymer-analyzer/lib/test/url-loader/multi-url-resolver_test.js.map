{"version":3,"sources":["test/url-loader/multi-url-resolver_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAA4B;AAE5B,4EAAqE;AAGrE;IAGE,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAC1C,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IACxB,CAAC;IACD,UAAU;QACR,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC;IAClC,CAAC;IACD,OAAO;QACL,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;CACF;AAED,MAAM,iBAAiB,GAAG,CAAC,WAA+B;IACxD,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU;QAChC,MAAM,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAGF,KAAK,CAAC,kBAAkB,EAAE;IAExB,KAAK,CAAC,YAAY,EAAE;QAElB,IAAI,CAAC,kDAAkD,EAAE;YACvD,MAAM,SAAS,GAAG,iBAAiB,CAAC,CAAC,eAAe,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACnE,MAAM,QAAQ,GAAG,IAAI,qCAAgB,CAAC,SAAS,CAAC,CAAC;YACjD,aAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;YAChD,2CAA2C;YAC3C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE;YACtD,MAAM,SAAS,GAAG,iBAAiB,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;YACnE,MAAM,QAAQ,GAAG,IAAI,qCAAgB,CAAC,SAAS,CAAC,CAAC;YACjD,aAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;YAChD,kCAAkC;YAClC,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8CAA8C,EAAE;YACnD,MAAM,SAAS,GAAG,iBAAiB,CAC/B,CAAC,eAAe,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,CAAC;YAC3D,MAAM,QAAQ,GAAG,IAAI,qCAAgB,CAAC,SAAS,CAAC,CAAC;YACjD,aAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;YAChD,2CAA2C;YAC3C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gDAAgD,EAAE;YACrD,MAAM,SAAS,GAAG,iBAAiB,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACxD,MAAM,QAAQ,GAAG,IAAI,qCAAgB,CAAC,SAAS,CAAC,CAAC;YACjD,aAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;YACjD,2CAA2C;YAC3C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,SAAS,EAAE;QACf,IAAI,CAAC,uCAAuC,EAAE;YAC5C,MAAM,SAAS,GAAG,iBAAiB,CAC/B,CAAC,eAAe,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,CAAC;YAC3D,MAAM,QAAQ,GAAG,IAAI,qCAAgB,CAAC,SAAS,CAAC,CAAC;YACjD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,eAAe,CAAC,CAAC;YAC7D,2CAA2C;YAC3C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9C,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"multi-url-resolver_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {MultiUrlResolver} from '../../url-loader/multi-url-resolver';\nimport {UrlResolver} from '../../url-loader/url-resolver';\n\nclass MockResolver implements UrlResolver {\n  canResolveCount: number;\n  resolveCount: number;\n  constructor(private _resolution: string|null) {\n    this.resetCounts();\n  }\n\n  resetCounts() {\n    this.canResolveCount = 0;\n    this.resolveCount = 0;\n  }\n  canResolve(): boolean {\n    this.canResolveCount++;\n    return this._resolution != null;\n  }\n  resolve(): string {\n    if (this._resolution == null) {\n      throw new Error('tried to resolve to a null resolution!');\n    }\n    this.resolveCount++;\n    return this._resolution;\n  }\n}\n\nconst mockResolverArray = (resolutions: Array<string|null>) => {\n  return resolutions.map((resolution): MockResolver => {\n    return new MockResolver(resolution);\n  });\n};\n\n\nsuite('MultiUrlResolver', function() {\n\n  suite('canResolve', () => {\n\n    test('canResolve is true if the first resolver is true', () => {\n      const resolvers = mockResolverArray(['resolved.html', null, null]);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.isTrue(resolver.canResolve('test.html'));\n      // Verify only the first resolver is called\n      assert.equal(resolvers[0].canResolveCount, 1);\n      assert.equal(resolvers[1].canResolveCount, 0);\n      assert.equal(resolvers[2].canResolveCount, 0);\n    });\n\n    test('canResolve is true if the last resolver is true', () => {\n      const resolvers = mockResolverArray([null, null, 'resolved.html']);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.isTrue(resolver.canResolve('test.html'));\n      // Verify all resolvers are called\n      assert.equal(resolvers[0].canResolveCount, 1);\n      assert.equal(resolvers[1].canResolveCount, 1);\n      assert.equal(resolvers[2].canResolveCount, 1);\n    });\n\n    test('canResolve is true if all resolvers are true', () => {\n      const resolvers = mockResolverArray(\n          ['resolved.html', 'resolved2.html', 'resolved3.html']);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.isTrue(resolver.canResolve('test.html'));\n      // Verify only the first resolver is called\n      assert.equal(resolvers[0].canResolveCount, 1);\n      assert.equal(resolvers[1].canResolveCount, 0);\n      assert.equal(resolvers[2].canResolveCount, 0);\n    });\n\n    test('canResolve is false if all resolvers are false', () => {\n      const resolvers = mockResolverArray([null, null, null]);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.isFalse(resolver.canResolve('test.html'));\n      // Verify only the first resolver is called\n      assert.equal(resolvers[0].canResolveCount, 1);\n      assert.equal(resolvers[1].canResolveCount, 1);\n      assert.equal(resolvers[2].canResolveCount, 1);\n    });\n\n  });\n\n  suite('resolve', () => {\n    test('only the first resolution is returned', () => {\n      const resolvers = mockResolverArray(\n          ['resolved.html', 'resolved2.html', 'resolved3.html']);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.equal(resolver.resolve('test.html'), 'resolved.html');\n      // Verify only the first resolver is called\n      assert.equal(resolvers[0].canResolveCount, 1);\n      assert.equal(resolvers[1].canResolveCount, 0);\n      assert.equal(resolvers[2].canResolveCount, 0);\n    });\n  });\n});\n"]}