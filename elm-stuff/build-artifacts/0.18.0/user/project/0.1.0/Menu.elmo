var _user$project$Menu$menuItem = function (vm) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(vm.onClick),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$tabindex(vm.tabIndexValue),
				_1: {
					ctor: '::',
					_0: _user$project$Ext_Keyboard$onKeyDown(vm.onKeyDown),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: A2(_user$project$Ext_Function_Infix_ops['=>'], 'auto-focus', vm.shouldAutoFocus),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: vm.view,
			_1: {ctor: '[]'}
		});
};
var _user$project$Menu$findMaybeFocusedIndex = function (vm) {
	var findIndexOfItemWithKey = function (key) {
		return A2(
			_elm_community$list_extra$List_Extra$findIndex,
			function (_p0) {
				return A2(
					_user$project$Ext_Function$equals,
					key,
					vm.itemKey(_p0));
			},
			vm.items);
	};
	return A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?+>'],
		vm.maybeFocusKey,
		A2(
			_user$project$Ext_Function_Infix_ops['>>?'],
			findIndexOfItemWithKey,
			_user$project$Ext_List$clampIndexIn(vm.items)));
};
var _user$project$Menu$boolToTabIndexValue = function (bool) {
	return bool ? 0 : -1;
};
var _user$project$Menu$createItemViewModel = F5(
	function (selectedIndex, focusedIndex, config, index, item) {
		var isFocused = _elm_lang$core$Native_Utils.eq(focusedIndex, index);
		var onSelect = config.onSelect(item);
		var onKeyDown = function (_p1) {
			var _p2 = _p1;
			var _p3 = _p2.key;
			if (_p3.ctor === 'Enter') {
				return onSelect;
			} else {
				return config.noOp;
			}
		};
		var clampIndex = _user$project$Ext_List$clampIndexIn(config.items);
		return {
			isSelected: _elm_lang$core$Native_Utils.eq(selectedIndex, index),
			shouldAutoFocus: isFocused,
			tabIndexValue: _user$project$Menu$boolToTabIndexValue(isFocused),
			onClick: onSelect,
			view: config.itemView(item),
			onKeyDown: onKeyDown
		};
	});
var _user$project$Menu$view = function (vm) {
	var clampIndex = _user$project$Ext_List$clampIndexIn(vm.items);
	var selectedIndex = clampIndex(
		A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(_elm_community$list_extra$List_Extra$findIndex, vm.isSelected, vm.items),
			0));
	var focusedIndex = A2(
		_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
		_user$project$Menu$findMaybeFocusedIndex(vm),
		selectedIndex);
	var itemViewList = A2(
		_user$project$Ext_Function_Infix_ops['.#|>'],
		vm.items,
		A2(
			_user$project$Ext_Function_Infix_ops['>>>'],
			A3(_user$project$Menu$createItemViewModel, selectedIndex, focusedIndex, vm),
			_user$project$Menu$menuItem));
	var onKeyDown = function (_p4) {
		var _p5 = _p4;
		var indexToFocusKey = function (index) {
			return A2(
				_elm_community$maybe_extra$Maybe_Extra$orElse,
				vm.maybeFocusKey,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					A2(_elm_community$list_extra$List_Extra$getAt, index, vm.items),
					vm.itemKey));
		};
		var onFocusIndexChange = function (_p6) {
			return vm.onFocusIndexChanged(
				indexToFocusKey(
					clampIndex(
						A2(_user$project$Ext_Function$add, focusedIndex, _p6))));
		};
		var _p7 = _p5.key;
		switch (_p7.ctor) {
			case 'ArrowUp':
				return onFocusIndexChange(-1);
			case 'ArrowDown':
				return onFocusIndexChange(1);
			default:
				return vm.noOp;
		}
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('modal-background'),
			_1: {
				ctor: '::',
				_0: _user$project$Ext_Keyboard$onKeyDownStopPropagation(onKeyDown),
				_1: {
					ctor: '::',
					_0: _elm_community$html_extra$Html_Events_Extra$onClickStopPropagation(vm.onOutsideClick),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id(vm.domId),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('menu'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-prevent-default-keys', 'Tab'),
							_1: {ctor: '[]'}
						}
					}
				},
				itemViewList),
			_1: {ctor: '[]'}
		});
};
var _user$project$Menu$Config = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {items: a, onSelect: b, itemKey: c, domId: d, itemView: e, isSelected: f, maybeFocusKey: g, onFocusIndexChanged: h, noOp: i, onOutsideClick: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Menu$ItemViewModel = F6(
	function (a, b, c, d, e, f) {
		return {shouldAutoFocus: a, tabIndexValue: b, isSelected: c, onClick: d, onKeyDown: e, view: f};
	});
