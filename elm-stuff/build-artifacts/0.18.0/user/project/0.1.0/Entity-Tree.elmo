var _user$project$Entity_Tree$initGroupDocNode = F2(
	function (getTodoList, groupDoc) {
		return {
			groupDoc: groupDoc,
			todoList: getTodoList(groupDoc),
			groupEntity: _user$project$Entity$initContextGroupEntity(groupDoc)
		};
	});
var _user$project$Entity_Tree$initGroupDocNodeList = F2(
	function (getTodoList, groupDocList) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			groupDocList,
			_user$project$Entity_Tree$initGroupDocNode(getTodoList));
	});
var _user$project$Entity_Tree$createProjectSubGroups = F2(
	function (findProjectById, tcg) {
		var filterTodoForProject = function (project) {
			return A2(
				_elm_lang$core$List$filter,
				_user$project$Todo$hasProject(project),
				tcg.todoList);
		};
		var projects = _user$project$Project$sort(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
					_elm_community$list_extra$List_Extra$unique(
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], tcg.todoList, _user$project$Todo$getProjectId)),
					findProjectById)));
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			projects,
			_user$project$Entity_Tree$initGroupDocNode(filterTodoForProject));
	});
var _user$project$Entity_Tree$createContextSubGroups = F2(
	function (findContextById, tcg) {
		var filterTodoForContext = function (context) {
			return A2(
				_elm_lang$core$List$filter,
				_user$project$Todo$contextFilter(context),
				tcg.todoList);
		};
		var contexts = _user$project$Context$sort(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
					_elm_community$list_extra$List_Extra$unique(
						A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], tcg.todoList, _user$project$Todo$getContextId)),
					findContextById)));
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'],
			contexts,
			_user$project$Entity_Tree$initGroupDocNode(filterTodoForContext));
	});
var _user$project$Entity_Tree$GroupDocNode = F3(
	function (a, b, c) {
		return {groupDoc: a, todoList: b, groupEntity: c};
	});
var _user$project$Entity_Tree$TodoForest = F2(
	function (a, b) {
		return {ctor: 'TodoForest', _0: a, _1: b};
	});
var _user$project$Entity_Tree$initTodoForest = _user$project$Entity_Tree$TodoForest;
var _user$project$Entity_Tree$ProjectForest = function (a) {
	return {ctor: 'ProjectForest', _0: a};
};
var _user$project$Entity_Tree$initProjectForest = A2(_user$project$Ext_Function_Infix_ops['>>>'], _user$project$Entity_Tree$initGroupDocNodeList, _user$project$Entity_Tree$ProjectForest);
var _user$project$Entity_Tree$ContextForest = function (a) {
	return {ctor: 'ContextForest', _0: a};
};
var _user$project$Entity_Tree$initContextForest = A2(_user$project$Ext_Function_Infix_ops['>>>'], _user$project$Entity_Tree$initGroupDocNodeList, _user$project$Entity_Tree$ContextForest);
var _user$project$Entity_Tree$flatten = function (tree) {
	var _p0 = tree;
	switch (_p0.ctor) {
		case 'ContextRoot':
			return {
				ctor: '::',
				_0: _user$project$Entity$fromGroupEntity(_p0._0.groupEntity),
				_1: _user$project$Entity_Tree$flatten(
					_user$project$Entity_Tree$ProjectForest(_p0._1))
			};
		case 'ProjectRoot':
			return {
				ctor: '::',
				_0: _user$project$Entity$fromGroupEntity(_p0._0.groupEntity),
				_1: _user$project$Entity_Tree$flatten(
					_user$project$Entity_Tree$ContextForest(_p0._1))
			};
		case 'ContextForest':
			return A2(
				_elm_lang$core$List$concatMap,
				function (node) {
					return {
						ctor: '::',
						_0: _user$project$Entity$fromGroupEntity(node.groupEntity),
						_1: A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], node.todoList, _user$project$Entity$fromTask)
					};
				},
				_p0._0);
		case 'ProjectForest':
			return A2(
				_elm_lang$core$List$concatMap,
				function (node) {
					return {
						ctor: '::',
						_0: _user$project$Entity$fromGroupEntity(node.groupEntity),
						_1: A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], node.todoList, _user$project$Entity$fromTask)
					};
				},
				_p0._0);
		default:
			return A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['.|>'], _p0._1, _user$project$Entity$fromTask);
	}
};
var _user$project$Entity_Tree$ProjectRoot = F2(
	function (a, b) {
		return {ctor: 'ProjectRoot', _0: a, _1: b};
	});
var _user$project$Entity_Tree$initProjectRoot = F3(
	function (getTodoList, findProjectById, project) {
		return function (tcg) {
			return A2(
				_user$project$Entity_Tree$ProjectRoot,
				tcg,
				A2(_user$project$Entity_Tree$createContextSubGroups, findProjectById, tcg));
		}(
			A2(_user$project$Entity_Tree$initGroupDocNode, getTodoList, project));
	});
var _user$project$Entity_Tree$ContextRoot = F2(
	function (a, b) {
		return {ctor: 'ContextRoot', _0: a, _1: b};
	});
var _user$project$Entity_Tree$initContextRoot = F3(
	function (getTodoList, findContextById, context) {
		return function (tcg) {
			return A2(
				_user$project$Entity_Tree$ContextRoot,
				tcg,
				A2(_user$project$Entity_Tree$createProjectSubGroups, findContextById, tcg));
		}(
			A2(_user$project$Entity_Tree$initGroupDocNode, getTodoList, context));
	});
