var _gampleman$elm_visualization$Visualization_Shape$slope2 = F3(
	function (_p1, _p0, t) {
		var _p2 = _p1;
		var _p3 = _p0;
		var h = _p3._0 - _p2._0;
		return _elm_lang$core$Native_Utils.eq(h, 0) ? t : (((3 * (_p3._1 - _p2._1)) / h) - (t / 2));
	});
var _gampleman$elm_visualization$Visualization_Shape$sign = function (x) {
	return (_elm_lang$core$Native_Utils.cmp(x, 0) < 0) ? -1 : 1;
};
var _gampleman$elm_visualization$Visualization_Shape$slope3 = F3(
	function (_p6, _p5, _p4) {
		var _p7 = _p6;
		var _p8 = _p5;
		var _p11 = _p8._1;
		var _p10 = _p8._0;
		var _p9 = _p4;
		var h1 = _p9._0 - _p10;
		var h0 = _p10 - _p7._0;
		var h = _elm_lang$core$Native_Utils.eq(h1, 0) ? ((_elm_lang$core$Native_Utils.cmp(h0, 0) < 0) ? 0 : h0) : h1;
		var s0 = (_p11 - _p7._1) / h;
		var s1 = (_p9._1 - _p11) / h;
		var p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);
		return (_gampleman$elm_visualization$Visualization_Shape$sign(s0) + _gampleman$elm_visualization$Visualization_Shape$sign(s1)) * A2(
			_elm_lang$core$Basics$min,
			A2(
				_elm_lang$core$Basics$min,
				_elm_lang$core$Basics$abs(s0),
				_elm_lang$core$Basics$abs(s1)),
			0.5 * _elm_lang$core$Basics$abs(p));
	});
var _gampleman$elm_visualization$Visualization_Shape$pie = F2(
	function (settings, data) {
		var unsafeGet = F2(
			function (index, array) {
				var _p12 = A2(_elm_lang$core$Array$get, index, array);
				if (_p12.ctor === 'Just') {
					return _p12._0;
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Visualization.Shape',
						{
							start: {line: 642, column: 13},
							end: {line: 647, column: 59}
						},
						_p12)('This should never happen');
				}
			});
		var dataArray = _elm_lang$core$Array$fromList(data);
		var sortedIndices = function (_p14) {
			return A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(
					_elm_lang$core$List$sortWith,
					F2(
						function (_p16, _p15) {
							var _p17 = _p16;
							var _p18 = _p15;
							return A2(settings.sortingFn, _p17._1, _p18._1);
						}),
					A2(
						_elm_lang$core$List$indexedMap,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						_p14)));
		};
		var da = A2(
			_elm_lang$core$Basics$min,
			2 * _elm_lang$core$Basics$pi,
			A2(_elm_lang$core$Basics$max, -2 * _elm_lang$core$Basics$pi, settings.endAngle - settings.startAngle));
		var p = A2(
			_elm_lang$core$Basics$min,
			_elm_lang$core$Basics$abs(da) / _elm_lang$core$Basics$toFloat(
				_elm_lang$core$List$length(data)),
			settings.padAngle);
		var pa = p * ((_elm_lang$core$Native_Utils.cmp(da, 0) < 0) ? -1 : 1);
		var summer = F2(
			function (a, b) {
				var v = settings.valueFn(a);
				return (_elm_lang$core$Native_Utils.cmp(v, 0) > 0) ? (v + b) : b;
			});
		var sum = A3(_elm_lang$core$List$foldr, summer, 0, data);
		var k = _elm_lang$core$Native_Utils.eq(sum, 0) ? 0 : ((da - (_elm_lang$core$Basics$toFloat(
			_elm_lang$core$List$length(data)) * pa)) / sum);
		var computeValue = F2(
			function (el, angle) {
				var value = settings.valueFn(el);
				return {
					innerRadius: settings.innerRadius,
					outerRadius: settings.outerRadius,
					cornerRadius: settings.cornerRadius,
					startAngle: angle,
					endAngle: (angle + ((_elm_lang$core$Native_Utils.cmp(value, 0) > 0) ? (value * k) : 0)) + pa,
					padAngle: p,
					padRadius: settings.padRadius
				};
			});
		var helper = F2(
			function (index, _p19) {
				var _p20 = _p19;
				var r = A2(
					computeValue,
					A2(unsafeGet, index, dataArray),
					_p20._0);
				return {
					ctor: '_Tuple2',
					_0: r.endAngle,
					_1: A3(_elm_lang$core$Dict$insert, index, r, _p20._1)
				};
			});
		return _elm_lang$core$Dict$values(
			_elm_lang$core$Tuple$second(
				A3(
					_elm_lang$core$List$foldl,
					helper,
					{ctor: '_Tuple2', _0: settings.startAngle, _1: _elm_lang$core$Dict$empty},
					sortedIndices(data))));
	});
var _gampleman$elm_visualization$Visualization_Shape$defaultPieConfig = {startAngle: 0, endAngle: 2 * _elm_lang$core$Basics$pi, padAngle: 0, sortingFn: _elm_lang$core$Basics$compare, valueFn: _elm_lang$core$Basics$identity, innerRadius: 0, outerRadius: 100, cornerRadius: 0, padRadius: 0};
var _gampleman$elm_visualization$Visualization_Shape$centroid = function (arcData) {
	var a = ((arcData.startAngle + arcData.endAngle) / 2) - (_elm_lang$core$Basics$pi / 2);
	var r = (arcData.innerRadius + arcData.outerRadius) / 2;
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Basics$cos(a) * r,
		_1: _elm_lang$core$Basics$sin(a) * r
	};
};
var _gampleman$elm_visualization$Visualization_Shape$myAsin = function (x) {
	return (_elm_lang$core$Native_Utils.cmp(x, 1) > -1) ? (_elm_lang$core$Basics$pi / 2) : ((_elm_lang$core$Native_Utils.cmp(x, -1) < 1) ? ((0 - _elm_lang$core$Basics$pi) / 2) : _elm_lang$core$Basics$asin(x));
};
var _gampleman$elm_visualization$Visualization_Shape$cornerTangents = F7(
	function (x0, y0, x1, y1, r1, rc, cw) {
		var r = r1 - rc;
		var y01 = y0 - y1;
		var x01 = x0 - x1;
		var lo = (cw ? rc : (0 - rc)) / _elm_lang$core$Basics$sqrt(
			Math.pow(x01, 2) + Math.pow(y01, 2));
		var ox = lo * y01;
		var x11 = x0 + ox;
		var x10 = x1 + ox;
		var x00 = (x11 + x10) / 2;
		var dx = x10 - x11;
		var oy = (0 - lo) * x01;
		var y11 = y0 + oy;
		var y10 = y1 + oy;
		var y00 = (y11 + y10) / 2;
		var dy = y10 - y11;
		var d2 = Math.pow(dx, 2) + Math.pow(dy, 2);
		var dd = (x11 * y10) - (x10 * y11);
		var d = ((_elm_lang$core$Native_Utils.cmp(dy, 0) < 0) ? -1 : 1) * _elm_lang$core$Basics$sqrt(
			A2(
				_elm_lang$core$Basics$max,
				0,
				(Math.pow(r, 2) * d2) - Math.pow(dd, 2)));
		var cx0 = ((dd * dy) - (dx * d)) / d2;
		var dx0 = cx0 - x00;
		var cy0 = (((0 - dd) * dx) - (dy * d)) / d2;
		var dy0 = cy0 - y00;
		var cx1 = ((dd * dy) + (dx * d)) / d2;
		var dx1 = cx1 - x00;
		var cy1 = (((0 - dd) * dx) + (dy * d)) / d2;
		var dy1 = cy1 - y00;
		var _p21 = (_elm_lang$core$Native_Utils.cmp(
			Math.pow(dx0, 2) + Math.pow(dy0, 2),
			Math.pow(dx1, 2) + Math.pow(dy1, 2)) > 0) ? {ctor: '_Tuple2', _0: cx1, _1: cy1} : {ctor: '_Tuple2', _0: cx0, _1: cy0};
		var fcx = _p21._0;
		var fxy = _p21._1;
		return {cx: fcx, cy: fxy, x01: 0 - ox, y01: 0 - oy, x11: fcx * ((r1 / r) - 1), y11: fxy * ((r1 / r) - 1)};
	});
var _gampleman$elm_visualization$Visualization_Shape$intersect = F8(
	function (x0, y0, x1, y1, x2, y2, x3, y3) {
		var y32 = y3 - y2;
		var x32 = x3 - x2;
		var y10 = y1 - y0;
		var x10 = x1 - x0;
		var t = ((x32 * (y0 - y2)) - (y32 * (x0 - x2))) / ((y32 * x10) - (x32 * y10));
		return {ctor: '_Tuple2', _0: x0 + (t * x10), _1: y0 + (t * y10)};
	});
var _gampleman$elm_visualization$Visualization_Shape$epsilon = 1.0e-12;
var _gampleman$elm_visualization$Visualization_Shape$arc = function (arcData) {
	var a1 = arcData.endAngle - (_elm_lang$core$Basics$pi / 2);
	var a0 = arcData.startAngle - (_elm_lang$core$Basics$pi / 2);
	var da = _elm_lang$core$Basics$abs(a1 - a0);
	var cw = _elm_lang$core$Native_Utils.cmp(a1, a0) > 0;
	var _p22 = (_elm_lang$core$Native_Utils.cmp(arcData.innerRadius, arcData.outerRadius) > 0) ? {ctor: '_Tuple2', _0: arcData.outerRadius, _1: arcData.innerRadius} : {ctor: '_Tuple2', _0: arcData.innerRadius, _1: arcData.outerRadius};
	var r0 = _p22._0;
	var r1 = _p22._1;
	var path = function () {
		if (_elm_lang$core$Native_Utils.cmp(r1, _gampleman$elm_visualization$Visualization_Shape$epsilon) < 1) {
			return A3(_gampleman$elm_visualization$Visualization_Path$moveTo, 0, 0, _gampleman$elm_visualization$Visualization_Path$begin);
		} else {
			if (_elm_lang$core$Native_Utils.cmp(da, (2 * _elm_lang$core$Basics$pi) - _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) {
				var p = A7(
					_gampleman$elm_visualization$Visualization_Path$arc,
					0,
					0,
					r1,
					a0,
					a1,
					!cw,
					A3(
						_gampleman$elm_visualization$Visualization_Path$moveTo,
						r1 * _elm_lang$core$Basics$cos(a0),
						r1 * _elm_lang$core$Basics$sin(a0),
						_gampleman$elm_visualization$Visualization_Path$begin));
				return (_elm_lang$core$Native_Utils.cmp(r0, _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) ? A7(
					_gampleman$elm_visualization$Visualization_Path$arc,
					0,
					0,
					r0,
					a1,
					a0,
					cw,
					A3(
						_gampleman$elm_visualization$Visualization_Path$moveTo,
						r0 * _elm_lang$core$Basics$cos(a1),
						r0 * _elm_lang$core$Basics$sin(a1),
						p)) : p;
			} else {
				var rc = A2(
					_elm_lang$core$Basics$min,
					_elm_lang$core$Basics$abs(r1 - r0) / 2,
					arcData.cornerRadius);
				var ap = arcData.padAngle / 2;
				var rp = (_elm_lang$core$Native_Utils.cmp(ap, _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) ? ((_elm_lang$core$Native_Utils.cmp(arcData.padRadius, 0) > 0) ? arcData.padRadius : _elm_lang$core$Basics$sqrt(
					Math.pow(r0, 2) + Math.pow(r1, 2))) : 0;
				var p0 = _gampleman$elm_visualization$Visualization_Shape$myAsin(
					(rp / r0) * _elm_lang$core$Basics$sin(ap));
				var _p23 = (_elm_lang$core$Native_Utils.cmp(rp, _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) ? ((_elm_lang$core$Native_Utils.cmp(da - (p0 * 2), _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) ? (cw ? {ctor: '_Tuple3', _0: a0 + p0, _1: a1 - p0, _2: da - (p0 * 2)} : {ctor: '_Tuple3', _0: a0 - p0, _1: a1 + p0, _2: da - (p0 * 2)}) : {ctor: '_Tuple3', _0: (a0 + a1) / 2, _1: (a0 + a1) / 2, _2: 0}) : {ctor: '_Tuple3', _0: a0, _1: a1, _2: da};
				var a00 = _p23._0;
				var a10 = _p23._1;
				var da0 = _p23._2;
				var x10 = r0 * _elm_lang$core$Basics$cos(a10);
				var y10 = r0 * _elm_lang$core$Basics$sin(a10);
				var x00 = r0 * _elm_lang$core$Basics$cos(a00);
				var y00 = r0 * _elm_lang$core$Basics$sin(a00);
				var p1 = _gampleman$elm_visualization$Visualization_Shape$myAsin(
					(rp / r1) * _elm_lang$core$Basics$sin(ap));
				var _p24 = (_elm_lang$core$Native_Utils.cmp(rp, _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) ? ((_elm_lang$core$Native_Utils.cmp(da - (p1 * 2), _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) ? (cw ? {ctor: '_Tuple3', _0: a0 + p1, _1: a1 - p1, _2: da - (p1 * 2)} : {ctor: '_Tuple3', _0: a0 - p1, _1: a1 + p1, _2: da - (p1 * 2)}) : {ctor: '_Tuple3', _0: (a0 + a1) / 2, _1: (a0 + a1) / 2, _2: 0}) : {ctor: '_Tuple3', _0: a0, _1: a1, _2: da};
				var a01 = _p24._0;
				var a11 = _p24._1;
				var da1 = _p24._2;
				var x01 = r1 * _elm_lang$core$Basics$cos(a01);
				var y01 = r1 * _elm_lang$core$Basics$sin(a01);
				var x11 = r1 * _elm_lang$core$Basics$cos(a11);
				var y11 = r1 * _elm_lang$core$Basics$sin(a11);
				var _p25 = (_elm_lang$core$Native_Utils.cmp(da0, _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) ? A8(_gampleman$elm_visualization$Visualization_Shape$intersect, x01, y01, x00, y00, x11, y11, x10, y10) : {ctor: '_Tuple2', _0: x10, _1: y10};
				var ocx = _p25._0;
				var ocy = _p25._1;
				var lc = _elm_lang$core$Basics$sqrt(
					Math.pow(ocx, 2) + Math.pow(ocy, 2));
				var _p26 = {ctor: '_Tuple4', _0: x01 - ocx, _1: y01 - ocy, _2: x11 - ocx, _3: y11 - ocy};
				var ax = _p26._0;
				var ay = _p26._1;
				var bx = _p26._2;
				var by = _p26._3;
				var kc = 1 / _elm_lang$core$Basics$sin(
					_elm_lang$core$Basics$acos(
						((ax * bx) + (ay * by)) / (_elm_lang$core$Basics$sqrt(
							Math.pow(ax, 2) + Math.pow(ay, 2)) * _elm_lang$core$Basics$sqrt(
							Math.pow(bx, 2) + Math.pow(by, 2)))) / 2);
				var _p27 = ((_elm_lang$core$Native_Utils.cmp(rc, _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) && (_elm_lang$core$Native_Utils.cmp(da, _elm_lang$core$Basics$pi) < 0)) ? {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Basics$min, rc, (r0 - lc) / (kc - 1)),
					_1: A2(_elm_lang$core$Basics$min, rc, (r1 - lc) / (kc + 1))
				} : {ctor: '_Tuple2', _0: rc, _1: rc};
				var rc0 = _p27._0;
				var rc1 = _p27._1;
				var outerRing = function () {
					if (_elm_lang$core$Native_Utils.cmp(da1, _gampleman$elm_visualization$Visualization_Shape$epsilon) < 1) {
						return A3(_gampleman$elm_visualization$Visualization_Path$moveTo, x01, y01, _gampleman$elm_visualization$Visualization_Path$begin);
					} else {
						if (_elm_lang$core$Native_Utils.cmp(rc1, _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) {
							var t1 = A7(_gampleman$elm_visualization$Visualization_Shape$cornerTangents, x11, y11, x10, y10, r1, rc1, cw);
							var t0 = A7(_gampleman$elm_visualization$Visualization_Shape$cornerTangents, x00, y00, x01, y01, r1, rc1, cw);
							var p = A3(_gampleman$elm_visualization$Visualization_Path$moveTo, t0.cx + t0.x01, t0.cy + t0.y01, _gampleman$elm_visualization$Visualization_Path$begin);
							return (_elm_lang$core$Native_Utils.cmp(rc1, rc) < 0) ? A7(
								_gampleman$elm_visualization$Visualization_Path$arc,
								t0.cx,
								t0.cy,
								rc1,
								A2(_elm_lang$core$Basics$atan2, t0.y01, t0.x01),
								A2(_elm_lang$core$Basics$atan2, t1.y01, t1.x01),
								!cw,
								p) : A7(
								_gampleman$elm_visualization$Visualization_Path$arc,
								t1.cx,
								t1.cy,
								rc1,
								A2(_elm_lang$core$Basics$atan2, t1.y11, t1.x11),
								A2(_elm_lang$core$Basics$atan2, t1.y01, t1.x01),
								!cw,
								A7(
									_gampleman$elm_visualization$Visualization_Path$arc,
									0,
									0,
									r1,
									A2(_elm_lang$core$Basics$atan2, t0.cy + t0.y11, t0.cx + t0.x11),
									A2(_elm_lang$core$Basics$atan2, t1.cy + t1.y11, t1.cx + t1.x11),
									!cw,
									A7(
										_gampleman$elm_visualization$Visualization_Path$arc,
										t0.cx,
										t0.cy,
										rc1,
										A2(_elm_lang$core$Basics$atan2, t0.y01, t0.x01),
										A2(_elm_lang$core$Basics$atan2, t0.y11, t0.x11),
										!cw,
										p)));
						} else {
							return A7(
								_gampleman$elm_visualization$Visualization_Path$arc,
								0,
								0,
								r1,
								a01,
								a11,
								!cw,
								A3(_gampleman$elm_visualization$Visualization_Path$moveTo, x01, y01, _gampleman$elm_visualization$Visualization_Path$begin));
						}
					}
				}();
				if ((_elm_lang$core$Native_Utils.cmp(r0, _gampleman$elm_visualization$Visualization_Shape$epsilon) < 1) || (_elm_lang$core$Native_Utils.cmp(da0, _gampleman$elm_visualization$Visualization_Shape$epsilon) < 1)) {
					return A3(_gampleman$elm_visualization$Visualization_Path$lineTo, x10, y10, outerRing);
				} else {
					if (_elm_lang$core$Native_Utils.cmp(rc0, _gampleman$elm_visualization$Visualization_Shape$epsilon) > 0) {
						var t1 = A7(_gampleman$elm_visualization$Visualization_Shape$cornerTangents, x01, y01, x00, y00, r0, 0 - rc0, cw);
						var t0 = A7(_gampleman$elm_visualization$Visualization_Shape$cornerTangents, x10, y10, x11, y11, r0, 0 - rc0, cw);
						var p = A3(_gampleman$elm_visualization$Visualization_Path$lineTo, t0.cx + t0.x01, t0.cy + t0.y01, outerRing);
						return (_elm_lang$core$Native_Utils.cmp(rc0, rc) < 0) ? A7(
							_gampleman$elm_visualization$Visualization_Path$arc,
							t0.cx,
							t0.cy,
							rc0,
							A2(_elm_lang$core$Basics$atan2, t0.y01, t0.x01),
							A2(_elm_lang$core$Basics$atan2, t1.y01, t1.x01),
							!cw,
							p) : A7(
							_gampleman$elm_visualization$Visualization_Path$arc,
							t1.cx,
							t1.cy,
							rc0,
							A2(_elm_lang$core$Basics$atan2, t1.y11, t1.x11),
							A2(_elm_lang$core$Basics$atan2, t1.y01, t1.x01),
							!cw,
							A7(
								_gampleman$elm_visualization$Visualization_Path$arc,
								0,
								0,
								r0,
								A2(_elm_lang$core$Basics$atan2, t0.cy + t0.y11, t0.cx + t0.x11),
								A2(_elm_lang$core$Basics$atan2, t1.cy + t1.y11, t1.cx + t1.x11),
								cw,
								A7(
									_gampleman$elm_visualization$Visualization_Path$arc,
									t0.cx,
									t0.cy,
									rc0,
									A2(_elm_lang$core$Basics$atan2, t0.y01, t0.x01),
									A2(_elm_lang$core$Basics$atan2, t0.y11, t0.x11),
									!cw,
									p)));
					} else {
						return A7(_gampleman$elm_visualization$Visualization_Path$arc, 0, 0, r0, a10, a00, cw, outerRing);
					}
				}
			}
		}
	}();
	return _gampleman$elm_visualization$Visualization_Path$toAttrString(
		_gampleman$elm_visualization$Visualization_Path$close(path));
};
var _gampleman$elm_visualization$Visualization_Shape$Arc = F7(
	function (a, b, c, d, e, f, g) {
		return {innerRadius: a, outerRadius: b, cornerRadius: c, startAngle: d, endAngle: e, padAngle: f, padRadius: g};
	});
var _gampleman$elm_visualization$Visualization_Shape$PieConfig = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {startAngle: a, endAngle: b, padAngle: c, sortingFn: d, valueFn: e, innerRadius: f, outerRadius: g, cornerRadius: h, padRadius: i};
	});
var _gampleman$elm_visualization$Visualization_Shape$Area = function (a) {
	return {ctor: 'Area', _0: a};
};
var _gampleman$elm_visualization$Visualization_Shape$area = F2(
	function (curve, data) {
		var makeCurves = F2(
			function (datum, _p28) {
				var _p29 = _p28;
				var _p30 = {ctor: '_Tuple3', _0: _p29._0, _1: datum, _2: _p29._1};
				if (_p30._1.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _p30._2};
				} else {
					if (_p30._0.ctor === 'Nothing') {
						var _p31 = _p30._1._0;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Maybe$Just(_p31),
							_1: {
								ctor: '::',
								_0: _gampleman$elm_visualization$Visualization_Shape$Area(
									{
										ctor: '::',
										_0: _p31,
										_1: {ctor: '[]'}
									}),
								_1: _p30._2
							}
						};
					} else {
						if ((_p30._2.ctor === '::') && (_p30._2._0.ctor === 'Area')) {
							var _p32 = _p30._1._0;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(_p32),
								_1: {
									ctor: '::',
									_0: _gampleman$elm_visualization$Visualization_Shape$Area(
										{ctor: '::', _0: _p32, _1: _p30._2._0._0}),
									_1: _p30._2._1
								}
							};
						} else {
							var _p33 = _p30._1._0;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(_p33),
								_1: {
									ctor: '::',
									_0: _gampleman$elm_visualization$Visualization_Shape$Area(
										{
											ctor: '::',
											_0: _p33,
											_1: {ctor: '[]'}
										}),
									_1: _p30._2
								}
							};
						}
					}
				}
			});
		return _gampleman$elm_visualization$Visualization_Path$toAttrString(
			A2(
				_elm_lang$core$List$concatMap,
				curve,
				_elm_lang$core$Tuple$second(
					A3(
						_elm_lang$core$List$foldr,
						makeCurves,
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Maybe$Nothing,
							_1: {ctor: '[]'}
						},
						data))));
	});
var _gampleman$elm_visualization$Visualization_Shape$Line = function (a) {
	return {ctor: 'Line', _0: a};
};
var _gampleman$elm_visualization$Visualization_Shape$applyRecursivelyForArea = F2(
	function (fn, points) {
		var points1 = _elm_lang$core$List$reverse(
			A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, points));
		var points0 = A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, points);
		var _p34 = {
			ctor: '_Tuple2',
			_0: fn(
				_gampleman$elm_visualization$Visualization_Shape$Line(points1)),
			_1: points1
		};
		if ((((_p34.ctor === '_Tuple2') && (_p34._0.ctor === '::')) && (_p34._1.ctor === '::')) && (_p34._1._0.ctor === '_Tuple2')) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				A3(
					_gampleman$elm_visualization$Visualization_Path$lineTo,
					_p34._1._0._0,
					_p34._1._0._1,
					fn(
						_gampleman$elm_visualization$Visualization_Shape$Line(points0))),
				_gampleman$elm_visualization$Visualization_Path$close(_p34._0._1));
		} else {
			return {ctor: '[]'};
		}
	});
var _gampleman$elm_visualization$Visualization_Shape$linearCurve = function (part) {
	var _p35 = part;
	if (_p35.ctor === 'Line') {
		if (_p35._0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _gampleman$elm_visualization$Visualization_Path$Move(_p35._0._0),
				_1: A2(_elm_lang$core$List$map, _gampleman$elm_visualization$Visualization_Path$Line, _p35._0._1)
			};
		}
	} else {
		return A2(_gampleman$elm_visualization$Visualization_Shape$applyRecursivelyForArea, _gampleman$elm_visualization$Visualization_Shape$linearCurve, _p35._0);
	}
};
var _gampleman$elm_visualization$Visualization_Shape$monotoneInXCurve = function (part) {
	var point = F5(
		function (_p37, _p36, t0, t1, path) {
			var _p38 = _p37;
			var _p42 = _p38._0;
			var _p39 = _p36;
			var _p41 = _p39._1;
			var _p40 = _p39._0;
			var dx = (_p40 - _p42) / 3;
			return A7(_gampleman$elm_visualization$Visualization_Path$bezierCurveTo, _p42 + dx, _p38._1 + (dx * t0), _p40 - dx, _p41 - (dx * t1), _p40, _p41, path);
		});
	var finalize = function (_p43) {
		var _p44 = _p43;
		var _p51 = _p44._1._1;
		var _p50 = _p44._0._1;
		var _p49 = _p44._1._0;
		var _p48 = _p44._0._0;
		var _p47 = _p44._3;
		var _p45 = _p44._2;
		if (_p45.ctor === 'Nothing') {
			return A3(_gampleman$elm_visualization$Visualization_Path$lineTo, _p49, _p51, _p47);
		} else {
			var _p46 = _p45._0;
			return A5(
				point,
				{ctor: '_Tuple2', _0: _p48, _1: _p50},
				{ctor: '_Tuple2', _0: _p49, _1: _p51},
				_p46,
				A3(
					_gampleman$elm_visualization$Visualization_Shape$slope2,
					{ctor: '_Tuple2', _0: _p48, _1: _p50},
					{ctor: '_Tuple2', _0: _p49, _1: _p51},
					_p46),
				_p47);
		}
	};
	var helper = F2(
		function (_p53, _p52) {
			var _p54 = _p53;
			var _p62 = _p54._1;
			var _p61 = _p54._0;
			var _p55 = _p52;
			var _p60 = _p55._1._1;
			var _p59 = _p55._0._1;
			var _p58 = _p55._1._0;
			var _p57 = _p55._0._0;
			var t1 = A3(
				_gampleman$elm_visualization$Visualization_Shape$slope3,
				{ctor: '_Tuple2', _0: _p57, _1: _p59},
				{ctor: '_Tuple2', _0: _p58, _1: _p60},
				{ctor: '_Tuple2', _0: _p61, _1: _p62});
			var t0 = function () {
				var _p56 = _p55._2;
				if (_p56.ctor === 'Nothing') {
					return A3(
						_gampleman$elm_visualization$Visualization_Shape$slope2,
						{ctor: '_Tuple2', _0: _p57, _1: _p59},
						{ctor: '_Tuple2', _0: _p58, _1: _p60},
						t1);
				} else {
					return _p56._0;
				}
			}();
			return {
				ctor: '_Tuple4',
				_0: {ctor: '_Tuple2', _0: _p58, _1: _p60},
				_1: {ctor: '_Tuple2', _0: _p61, _1: _p62},
				_2: _elm_lang$core$Maybe$Just(t1),
				_3: A5(
					point,
					{ctor: '_Tuple2', _0: _p57, _1: _p59},
					{ctor: '_Tuple2', _0: _p58, _1: _p60},
					t0,
					t1,
					_p55._3)
			};
		});
	var _p63 = part;
	if (_p63.ctor === 'Line') {
		if (_p63._0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p63._0._1.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p64 = _p63._0._0;
				return finalize(
					A3(
						_elm_lang$core$List$foldl,
						helper,
						{
							ctor: '_Tuple4',
							_0: _p64,
							_1: _p63._0._1._0,
							_2: _elm_lang$core$Maybe$Nothing,
							_3: {
								ctor: '::',
								_0: _gampleman$elm_visualization$Visualization_Path$Move(_p64),
								_1: {ctor: '[]'}
							}
						},
						_p63._0._1._1));
			}
		}
	} else {
		return A2(_gampleman$elm_visualization$Visualization_Shape$applyRecursivelyForArea, _gampleman$elm_visualization$Visualization_Shape$monotoneInXCurve, _p63._0);
	}
};
var _gampleman$elm_visualization$Visualization_Shape$line = F2(
	function (curve, data) {
		var makeCurves = F2(
			function (datum, _p65) {
				var _p66 = _p65;
				var _p67 = {ctor: '_Tuple3', _0: _p66._0, _1: datum, _2: _p66._1};
				if (_p67._1.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _p67._2};
				} else {
					if (_p67._0.ctor === 'Nothing') {
						var _p68 = _p67._1._0;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Maybe$Just(_p68),
							_1: {
								ctor: '::',
								_0: _gampleman$elm_visualization$Visualization_Shape$Line(
									{
										ctor: '::',
										_0: _p68,
										_1: {ctor: '[]'}
									}),
								_1: _p67._2
							}
						};
					} else {
						if ((_p67._2.ctor === '::') && (_p67._2._0.ctor === 'Line')) {
							var _p69 = _p67._1._0;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(_p69),
								_1: {
									ctor: '::',
									_0: _gampleman$elm_visualization$Visualization_Shape$Line(
										{ctor: '::', _0: _p69, _1: _p67._2._0._0}),
									_1: _p67._2._1
								}
							};
						} else {
							var _p70 = _p67._1._0;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(_p70),
								_1: {
									ctor: '::',
									_0: _gampleman$elm_visualization$Visualization_Shape$Line(
										{
											ctor: '::',
											_0: _p70,
											_1: {ctor: '[]'}
										}),
									_1: _p67._2
								}
							};
						}
					}
				}
			});
		return _gampleman$elm_visualization$Visualization_Path$toAttrString(
			A2(
				_elm_lang$core$List$concatMap,
				curve,
				_elm_lang$core$Tuple$second(
					A3(
						_elm_lang$core$List$foldr,
						makeCurves,
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Maybe$Nothing,
							_1: {ctor: '[]'}
						},
						data))));
	});
