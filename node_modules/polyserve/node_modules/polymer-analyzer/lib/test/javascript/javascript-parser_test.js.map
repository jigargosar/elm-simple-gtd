{"version":3,"sources":["test/javascript/javascript-parser_test.ts"],"names":[],"mappings":"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","file":"javascript-parser_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport stripIndent = require('strip-indent');\n\nimport * as esutil from '../../javascript/esutil';\nimport {JavaScriptDocument} from '../../javascript/javascript-document';\nimport {JavaScriptParser} from '../../javascript/javascript-parser';\n\nsuite('JavaScriptParser', () => {\n  let parser: JavaScriptParser;\n\n  setup(() => {\n    parser = new JavaScriptParser();\n  });\n\n\n  suite('parse()', () => {\n\n    test('parses classes', () => {\n      const contents = `\n        class Foo extends HTMLElement {\n          constructor() {\n            super();\n            this.bar = () => {};\n            const let = 'let const';\n          }\n        }\n      `;\n      const document = parser.parse(contents, '/static/es6-support.js');\n      assert.instanceOf(document, JavaScriptDocument);\n      assert.equal(document.url, '/static/es6-support.js');\n      assert.equal(document.ast.type, 'Program');\n      assert.equal(document.parsedAsSourceType, 'script');\n      // First statement is a class declaration\n      assert.equal(document.ast.body[0].type, 'ClassDeclaration');\n    });\n\n    test('parses async await', () => {\n      const contents = `\n        async function foo() {\n          await Promise.resolve();\n        }\n      `;\n      const document = parser.parse(contents, '/static/es6-support.js');\n      assert.instanceOf(document, JavaScriptDocument);\n      assert.equal(document.url, '/static/es6-support.js');\n      assert.equal(document.ast.type, 'Program');\n      assert.equal(document.parsedAsSourceType, 'script');\n      // First statement is an async function declaration\n      const functionDecl = document.ast.body[0];\n      if (functionDecl.type !== 'FunctionDeclaration') {\n        throw new Error('Expected a function declaration.');\n      }\n      assert.equal(functionDecl.async, true);\n    });\n\n    test('throws syntax errors', () => {\n      const file = fs.readFileSync(\n          path.resolve(__dirname, '../static/js-parse-error.js'), 'utf8');\n      assert.throws(() => parser.parse(file, '/static/js-parse-error.js'));\n    });\n\n    test('attaches comments', () => {\n      const file = fs.readFileSync(\n          path.resolve(__dirname, '../static/js-elements.js'), 'utf8');\n      const document = parser.parse(file, '/static/js-elements.js');\n      const ast = document.ast;\n      const element1 = ast.body[0];\n      const comment = esutil.getAttachedComment(element1)!;\n      assert.isTrue(comment.indexOf('test-element') !== -1);\n    });\n\n    test('parses an ES module', () => {\n      const contents = `\n        import foo from 'foo';\n      `;\n      const document = parser.parse(contents, '/static/es6-support.js');\n      assert.instanceOf(document, JavaScriptDocument);\n      assert.equal(document.url, '/static/es6-support.js');\n      assert.equal(document.ast.type, 'Program');\n      assert.equal(document.parsedAsSourceType, 'module');\n    });\n  });\n\n  suite(`stringify()`, () => {\n    test('pretty prints output', () => {\n      const contents = stripIndent(`\n        class Foo extends HTMLElement {\n          constructor() {\n            super();\n            this.bar = () => {\n            };\n            const let = 'let const';\n          }\n        }`).trim() +\n          '\\n';\n      const document = parser.parse(contents, 'test-file.js');\n      assert.deepEqual(document.stringify({}), contents);\n    });\n  });\n});\n"]}