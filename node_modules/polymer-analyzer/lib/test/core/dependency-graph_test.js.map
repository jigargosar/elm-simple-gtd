{"version":3,"sources":["test/core/dependency-graph_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,sEAAsE;AAEtE,+BAAiC;AACjC,6BAA6B;AAE7B,kDAA6C;AAC7C,kEAA4D;AAC5D,kEAA2D;AAE3D,mDAAoD;AACpD,UAAG,CAAC,cAAc,CAAC,CAAC;AAEpB,KAAK,CAAC,iBAAiB,EAAE;IAEvB,+BACI,MAAmB,EAAE,QAA0B,EAAE,OAAgB;QACnE,aAAM,CAAC,SAAS,CACZ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IACvE,CAAC;IAED,IAAI,CAAC,0BAA0B,EAAE;QAC/B,4DAA4D;QAC5D,qCAAqC;QACrC,qCAAqC;QACrC,IAAI,KAAK,GAAG,IAAI,kCAAe,EAAE,CAAC;QAClC,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;QACnE,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;QAC7C,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3E,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;QAC7C,qBAAqB,CACjB,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QACnE,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QACrD,qBAAqB,CACjB,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EACvC,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;QACvC,KAAK,GAAG,KAAK,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1C,qBAAqB,CACjB,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;QACtE,KAAK,GAAG,KAAK,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1C,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;QACnE,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH;;;;OAIG;IACH,KAAK,CAAC,yBAAyB,EAAE;QAC/B,IAAI,QAAkB,CAAC;QACvB,KAAK,CAAC;YACJ,QAAQ,GAAG,IAAI,mBAAQ,CACnB,EAAC,SAAS,EAAE,IAAI,2BAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,2BACI,IAAY,EAAE,kBAA4B;;gBAC5C,MAAM,KAAK,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;gBACvD,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,kBAAkB,CAAC,CAAC;YAC5E,CAAC;SAAA;QAAA,CAAC;QAEF,IAAI,CAAC,kDAAkD,EAAE;YACvD,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;YACnD,MAAM,iBAAiB,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;YACtD,MAAM,KAAK,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YACvD,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE;YAC/C,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;YACnD,MAAM,iBAAiB,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;YAEtD,MAAM,iBAAiB,CACnB,wBAAwB,EAAE,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC1D,MAAM,iBAAiB,CAAC,+CAA+C,EAAE;gBACvE,uCAAuC;gBACvC,sCAAsC;gBACtC,wBAAwB;aACzB,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YACvD,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAA,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,WAAW,EAAE;QAEjB,IAAI,CAAC,sCAAsC,EAAE;YAC3C,MAAM,KAAK,GAAG,IAAI,kCAAe,EAAE,CAAC;YACpC,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YACzC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC3B,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE;YAC9C,MAAM,KAAK,GAAG,IAAI,kCAAe,EAAE,CAAC;YACpC,MAAM,IAAI,GAAG,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YACtD,KAAK,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YAChD,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE;YACvD,MAAM,KAAK,GAAG,IAAI,kCAAe,EAAE,CAAC;YACpC,MAAM,IAAI,GAAG,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YACtD,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC3B,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE;YACzD,MAAM,KAAK,GAAG,IAAI,kCAAe,EAAE,CAAC;YACpC,MAAM,IAAI,GAAG,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YACtD,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,KAAK,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YAChD,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE;YAClC,MAAM,KAAK,GAAG,IAAI,kCAAe,EAAE,CAAC;YACpC,MAAM,QAAQ,GAAG;gBACf,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACxC,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACzC,CAAC;YACF,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC5B,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE;YACpD,MAAM,KAAK,GAAG,IAAI,kCAAe,EAAE,CAAC;YACpC,IAAI,SAAS,GAAG,KAAK,CAAC;YACtB,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACvC,aAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACvC,aAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACnC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;YACxB,SAAS,GAAG,IAAI,CAAC;YACjB,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC3B,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;YACpC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAA,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,8BAA8B,KAAsB;IAClD,GAAG,CAAC,CAAC,MAAM,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,QAAQ;YACpC,MAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5C,aAAM,CAAC,IAAI,CACP,KAAK,EACL,IAAI,EACJ,mCACmC,MAAM,CAAC,GACT,mCAAmC,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;AACH,CAAC;AAED;;;;;;;GAOG;AACH,4BAA4B,KAAsB;IAChD,GAAG,CAAC,CAAC,MAAM,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAClD,GAAG,CAAC,CAAC,MAAM,UAAU,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YAC7C,MAAM,gBAAgB,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC7D,aAAM,CAAC,MAAM,CACT,gBAAgB,KAAK,SAAS,EAC9B,yBAAyB,UAAU,gBAAgB;gBAC/C,2BAA2B,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;YAClD,aAAM,CAAC,MAAM,CACT,gBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAC5C,GAAG,UAAU,oCAAoC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QACrE,CAAC;QACD,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YAC1C,MAAM,eAAe,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC3D,aAAM,CAAC,MAAM,CACT,eAAe,KAAK,SAAS,EAC7B,wBAAwB,SAAS,gBAAgB;gBAC7C,2BAA2B,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;YAClD,aAAM,CAAC,MAAM,CACT,eAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAC7C,GAAG,SAAS,qCAAqC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;AACH,CAAC;AAED,kCAAwC,QAAkB;;QACxD,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACpD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC;IAC3C,CAAC;CAAA","file":"dependency-graph_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/// <reference path=\"../../../node_modules/@types/mocha/index.d.ts\" />\n\nimport {assert, use} from 'chai';\nimport * as path from 'path';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {DependencyGraph} from '../../core/dependency-graph';\nimport {FSUrlLoader} from '../../url-loader/fs-url-loader';\n\nimport chaiAsPromised = require('chai-as-promised');\nuse(chaiAsPromised);\n\nsuite('DependencyGraph', () => {\n\n  function assertStringSetsEqual(\n      actual: Set<string>, expected: Iterable<string>, message?: string) {\n    assert.deepEqual(\n        Array.from(actual).sort(), Array.from(expected).sort(), message);\n  }\n\n  test('can calculate dependants', () => {\n    // Testing building up and then tearing back down the graph:\n    // base.html -> a.html -> common.html\n    // base.html -> b.html -> common.html\n    let graph = new DependencyGraph();\n    assertStringSetsEqual(graph.getAllDependantsOf('common.html'), []);\n    graph.addDocument('a.html', ['common.html']);\n    assertStringSetsEqual(graph.getAllDependantsOf('common.html'), ['a.html']);\n    graph.addDocument('b.html', ['common.html']);\n    assertStringSetsEqual(\n        graph.getAllDependantsOf('common.html'), ['a.html', 'b.html']);\n    graph.addDocument('base.html', ['a.html', 'b.html']);\n    assertStringSetsEqual(\n        graph.getAllDependantsOf('common.html'),\n        ['a.html', 'b.html', 'base.html']);\n    graph = graph.invalidatePaths(['a.html']);\n    assertStringSetsEqual(\n        graph.getAllDependantsOf('common.html'), ['b.html', 'base.html']);\n    graph = graph.invalidatePaths(['b.html']);\n    assertStringSetsEqual(graph.getAllDependantsOf('common.html'), []);\n    assertIsValidGraph(graph);\n  });\n\n  /**\n   * Like many integration tests this is a bit dirty, but it catches many\n   * interesting bugs in the way that we construct the dependency graph in\n   * practice.\n   */\n  suite('as used in the Analyzer', () => {\n    let analyzer: Analyzer;\n    setup(() => {\n      analyzer = new Analyzer(\n          {urlLoader: new FSUrlLoader(path.join(__dirname, '..', 'static'))});\n    });\n\n    async function assertImportersOf(\n        path: string, expectedDependants: string[]) {\n      const graph = await getLatestDependencyGraph(analyzer);\n      assertStringSetsEqual(graph.getAllDependantsOf(path), expectedDependants);\n    };\n\n    test('works with a basic document with no dependencies', async() => {\n      await analyzer.analyze(['dependencies/leaf.html']);\n      await assertImportersOf('dependencies/leaf.html', []);\n      const graph = await getLatestDependencyGraph(analyzer);\n      assertGraphIsSettled(graph);\n      assertIsValidGraph(graph);\n    });\n\n    test('works with a simple tree of dependencies', async() => {\n      await analyzer.analyze(['dependencies/root.html']);\n      await assertImportersOf('dependencies/root.html', []);\n\n      await assertImportersOf(\n          'dependencies/leaf.html', ['dependencies/root.html']);\n      await assertImportersOf('dependencies/subfolder/subfolder-sibling.html', [\n        'dependencies/subfolder/in-folder.html',\n        'dependencies/inline-and-imports.html',\n        'dependencies/root.html'\n      ]);\n      const graph = await getLatestDependencyGraph(analyzer);\n      assertGraphIsSettled(graph);\n      assertIsValidGraph(graph);\n    });\n\n  });\n\n  suite('whenReady', () => {\n\n    test('resolves for a single added document', () => {\n      const graph = new DependencyGraph();\n      assert.isFulfilled(graph.whenReady('a'));\n      graph.addDocument('a', []);\n      assertGraphIsSettled(graph);\n      assertIsValidGraph(graph);\n    });\n\n    test('resolves for a single rejected document', () => {\n      const graph = new DependencyGraph();\n      const done = assert.isFulfilled(graph.whenReady('a'));\n      graph.rejectDocument('a', new Error('because'));\n      assertGraphIsSettled(graph);\n      assertIsValidGraph(graph);\n      return done;\n    });\n\n    test('resolves for a document with an added dependency', () => {\n      const graph = new DependencyGraph();\n      const done = assert.isFulfilled(graph.whenReady('a'));\n      graph.addDocument('a', ['b']);\n      graph.addDocument('b', []);\n      assertGraphIsSettled(graph);\n      assertIsValidGraph(graph);\n      return done;\n    });\n\n    test('resolves for a document with a rejected dependency', () => {\n      const graph = new DependencyGraph();\n      const done = assert.isFulfilled(graph.whenReady('a'));\n      graph.addDocument('a', ['b']);\n      graph.rejectDocument('b', new Error('because'));\n      assertGraphIsSettled(graph);\n      assertIsValidGraph(graph);\n      return done;\n    });\n\n    test('resolves for a simple cycle', async() => {\n      const graph = new DependencyGraph();\n      const promises = [\n        assert.isFulfilled(graph.whenReady('a')),\n        assert.isFulfilled(graph.whenReady('b'))\n      ];\n      graph.addDocument('a', ['b']);\n      graph.addDocument('b', ['a']);\n      await Promise.all(promises);\n      assertGraphIsSettled(graph);\n      assertIsValidGraph(graph);\n    });\n\n    test('does not resolve early for a cycle with a leg', async() => {\n      const graph = new DependencyGraph();\n      let cResolved = false;\n      const aReady = graph.whenReady('a').then(() => {\n        assert.isTrue(cResolved);\n      });\n      const bReady = graph.whenReady('b').then(() => {\n        assert.isTrue(cResolved);\n      });\n      graph.addDocument('a', ['b', 'c']);\n      graph.addDocument('b', ['a']);\n      await Promise.resolve();\n      cResolved = true;\n      graph.addDocument('c', []);\n      await Promise.all([aReady, bReady]);\n      assertGraphIsSettled(graph);\n      assertIsValidGraph(graph);\n    });\n\n  });\n\n});\n\n/**\n * Asserts that all records in the graph have had all of their dependencies\n * resolved or rejected.\n */\nfunction assertGraphIsSettled(graph: DependencyGraph) {\n  for (const record of graph['_documents'].values()) {\n    if (!(record.dependenciesDeferred.resolved ||\n          record.dependenciesDeferred.rejected)) {\n      assert.fail(\n          false,\n          true,\n          `found unsettled record for url '${\n                                             record.url\n                                           }' in graph that should be settled`);\n    }\n  }\n}\n\n/**\n * Asserts that for every record in the graph, each outgoing link is matched\n * by an incoming link on the other side, and vice versa.\n *\n * Since DependencyGraph tracks both incoming and outgoing links (dependencies\n * and dependants), when there is a dependency A -> B, both A and B should be\n * aware of that dependency link.\n */\nfunction assertIsValidGraph(graph: DependencyGraph) {\n  for (const record of graph['_documents'].values()) {\n    for (const dependency of record.dependencies) {\n      const dependencyRecord = graph['_documents'].get(dependency);\n      assert.isTrue(\n          dependencyRecord !== undefined,\n          `dependency record for ${dependency} should exist,` +\n              ` as it is referenced by ${record.url}.`);\n      assert.isTrue(\n          dependencyRecord!.dependants.has(record.url),\n          `${dependency} should know about its dependant ${record.url}`);\n    }\n    for (const dependant of record.dependants) {\n      const dependantRecord = graph['_documents'].get(dependant);\n      assert.isTrue(\n          dependantRecord !== undefined,\n          `dependant record for ${dependant} should exist,` +\n              ` as it is referenced by ${record.url}.`);\n      assert.isTrue(\n          dependantRecord!.dependencies.has(record.url),\n          `${dependant} should know about its dependency ${record.url}`);\n    }\n  }\n}\n\nasync function getLatestDependencyGraph(analyzer: Analyzer) {\n  const context = await analyzer['_analysisComplete'];\n  return context['_cache'].dependencyGraph;\n}\n"]}