{"version":3,"sources":["test/scanning/scan_test.ts"],"names":[],"mappings":"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","file":"scan_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {ScannedFeature, Warning} from '../../model/model';\nimport {ParsedDocument} from '../../parser/document';\nimport {scan} from '../../scanning/scan';\nimport {Scanner} from '../../scanning/scanner';\nimport {invertPromise} from '../test-utils';\n\nsuite('scan()', () => {\n\n  test('calls Scanner.scan', async() => {\n    const feature = Symbol('feature') as any;\n    const scanner = new ScannerStub(<any>[feature]);\n    const document = makeTestDocument({});\n\n    const {features} = await scan(document, [scanner]);\n    assert.deepEqual(features, [feature]);\n    assert.deepEqual(scanner.calls, [{document}]);\n    assert.deepEqual(features, [feature]);\n  });\n\n  test('supports multiple and async calls to visit()', async() => {\n    const visitor1 = Symbol('visitor1');\n    const visitor2 = Symbol('visitor2');\n    const visitor3 = Symbol('visitor3');\n    const scanner: Scanner<any, any, any> = {\n      async scan(\n          _: ParsedDocument<any, any>, visit: (visitor: any) => Promise<void>) {\n        // two visitors in one batch\n        await Promise.all([visit(visitor1), visit(visitor2)]);\n\n        // one visitor in a subsequent batch, delayed a turn to make sure\n        // we can call visit() truly async\n        await new Promise<void>((resolve, _reject) => {\n          setTimeout(() => {\n            visit(visitor3).then(resolve);\n          }, 0);\n        });\n\n        return {features: [`a feature` as any], warnings: []};\n      },\n    };\n    const visitedVisitors: any[] = [];\n    const document = makeTestDocument({\n      async visit(visitors: any) {\n        visitedVisitors.push.apply(visitedVisitors, visitors);\n      }\n    });\n\n    const {features} = await scan(document, [scanner]);\n    assert.deepEqual([`a feature` as any], features);\n    assert.deepEqual(visitedVisitors, [visitor1, visitor2, visitor3]);\n  });\n\n  test('propagates exceptions in scanners', () => {\n    const scanner = {\n      scan(_doc: any, _visit: any) {\n        throw new Error('expected');\n      },\n    };\n    return invertPromise(scan(makeTestDocument({}), <any>[scanner]));\n  });\n\n  test('propagates exceptions in visitors', () => {\n    const document: any = makeTestDocument({\n      visit: (): void => {\n        throw new Error('expected');\n      },\n    });\n    return invertPromise(scan(document, [makeTestScanner({})]));\n  });\n\n});\n\ninterface TestDocumentMakerOptions {\n  forEachNode?: (callback: (node: any) => void) => void;\n  visit?: (visitors: any[]) => void;\n  type?: string;\n  contents?: string;\n  ast?: string;\n  url?: string;\n}\nfunction makeTestDocument(options: TestDocumentMakerOptions):\n    ParsedDocument<string, any> {\n  return {\n    type: options.type || 'test-type',\n    contents: options.contents || 'test-contents',\n    ast: options.ast || 'test-ast',\n    url: options.url || 'test-url',\n    visit: options.visit || (() => null),\n    forEachNode: options.forEachNode || (() => null),\n    sourceRangeForNode: () => {\n      throw new Error('not implemented in test doc');\n    },\n    stringify() {\n      return 'test stringify output';\n    }\n  } as any;\n}\n\ninterface TestScannerMakerOptions {\n  scan?:\n      (document: ParsedDocument<string, any>,\n       visit: (visitor: any) => Promise<void>) =>\n          Promise<{features: any[], warnings: Warning[]}>;\n}\nfunction makeTestScanner(options: TestScannerMakerOptions):\n    Scanner<ParsedDocument<string, any>, any, any> {\n  const simpleScan = (async(_doc: any, visit: () => Promise<any>) => {\n    await visit();\n    return {features: ['test-feature'], warnings: []};\n  });\n  return {scan: options.scan || simpleScan};\n}\n\n/**\n * Scanner that always returns the given features and tracks when\n * scan is called.\n */\nclass ScannerStub implements Scanner<any, any, any> {\n  calls: {document: ParsedDocument<any, any>}[];\n  features: ScannedFeature[];\n  constructor(features: ScannedFeature[]) {\n    this.features = features;\n    this.calls = [];\n  }\n\n  async scan(document: ParsedDocument<any, any>, _visit: any) {\n    this.calls.push({document});\n    return {features: this.features, warnings: []};\n  }\n}\n"]}