{"version":3,"sources":["test/html/html-import-scanner_test.ts"],"names":[],"mappings":"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","file":"html-import-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {HtmlVisitor} from '../../html/html-document';\nimport {HtmlImportScanner} from '../../html/html-import-scanner';\nimport {HtmlParser} from '../../html/html-parser';\n\nsuite('HtmlImportScanner', () => {\n\n  suite('scan()', () => {\n    let scanner: HtmlImportScanner;\n\n    setup(() => {\n      scanner = new HtmlImportScanner();\n    });\n\n    test('finds HTML Imports', async() => {\n      const contents = `<html><head>\n          <link rel=\"import\" href=\"polymer.html\">\n          <link rel=\"import\" type=\"css\" href=\"polymer.css\">\n          <script src=\"foo.js\"></script>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 1);\n      assert.equal(features[0].type, 'html-import');\n      assert.equal(features[0].url, 'polymer.html');\n    });\n\n    test('resolves HTML Import URLs relative to baseUrl', async() => {\n      const contents = `<html><head><base href=\"/aybabtu/\">\n          <link rel=\"import\" href=\"polymer.html\">\n          <link rel=\"import\" type=\"css\" href=\"polymer.css\">\n          <script src=\"foo.js\"></script>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 1);\n      assert.equal(features[0].type, 'html-import');\n      assert.equal(features[0].url, '/aybabtu/polymer.html');\n    });\n\n    test('finds lazy HTML Imports', async() => {\n      const contents = `<html><head>\n          <link rel=\"import\" href=\"polymer.html\">\n          <dom-module>\n          <link rel=\"lazy-import\"  href=\"lazy-polymer.html\">\n          </dom-module>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 2);\n      assert.equal(features[1].type, 'html-import');\n      assert.equal(features[1].url, 'lazy-polymer.html');\n      assert.equal(features[1].lazy, true);\n    });\n  });\n\n  suite('scan() with lazy import map', () => {\n    let scanner: HtmlImportScanner;\n\n    setup(() => {\n      const lazyEdges = new Map<string, string[]>();\n      lazyEdges.set('test.html', ['lazy1.html', 'lazy2.html', 'lazy3.html']);\n      scanner = new HtmlImportScanner(lazyEdges);\n    });\n\n    test('injects synthetic lazy html imports', async() => {\n      const contents = `<html><head>\n          <link rel=\"import\" href=\"polymer.html\">\n          <link rel=\"import\" type=\"css\" href=\"polymer.css\">\n          <script src=\"foo.js\"></script>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.deepEqual(\n          features.map((f) => f.type),\n          ['html-import', 'html-import', 'html-import', 'html-import']);\n      assert.deepEqual(features.map((i) => i.lazy), [false, true, true, true]);\n      assert.deepEqual(\n          features.map((f) => f.url),\n          ['polymer.html', 'lazy1.html', 'lazy2.html', 'lazy3.html']);\n    });\n\n  });\n\n});\n"]}