{"version":3,"sources":["test/html/html-script-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAG5B,wDAAkD;AAClD,wEAAiE;AACjE,6CAAuE;AAEvE,KAAK,CAAC,mBAAmB,EAAE;IAEzB,KAAK,CAAC,QAAQ,EAAE;QACd,IAAI,OAA0B,CAAC;QAE/B,KAAK,CAAC;YACJ,OAAO,GAAG,IAAI,uCAAiB,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE;YACxC,MAAM,QAAQ,GAAG;;;uBAGA,CAAC;YAClB,MAAM,QAAQ,GAAG,IAAI,wBAAU,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;YACxE,MAAM,KAAK,GAAG,CAAM,OAAoB,oDAAK,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YAEvE,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACvD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACjC,aAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,qBAAa,CAAC,CAAC;YAC9C,MAAM,QAAQ,GAAkB,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5C,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC3C,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YACrC,aAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,6BAAqB,CAAC,CAAC;YACtD,MAAM,QAAQ,GAA0B,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAClC,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;YACrD,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAC,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAC,CAAC,CAAC;QAChE,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE;YACjD,MAAM,QAAQ,GAAG;;uBAEA,CAAC;YAClB,MAAM,QAAQ,GAAG,IAAI,wBAAU,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;YACxE,MAAM,KAAK,GAAG,CAAM,OAAoB,oDAAK,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YAEvE,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACvD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACjC,aAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,qBAAa,CAAC,CAAC;YAC9C,MAAM,QAAQ,GAAkB,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5C,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC3C,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAChD,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"html-script-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {HtmlVisitor} from '../../html/html-document';\nimport {HtmlParser} from '../../html/html-parser';\nimport {HtmlScriptScanner} from '../../html/html-script-scanner';\nimport {ScannedImport, ScannedInlineDocument} from '../../model/model';\n\nsuite('HtmlScriptScanner', () => {\n\n  suite('scan()', () => {\n    let scanner: HtmlScriptScanner;\n\n    setup(() => {\n      scanner = new HtmlScriptScanner();\n    });\n\n    test('finds external and inline scripts', async() => {\n      const contents = `<html><head>\n          <script src=\"foo.js\"></script>\n          <script>console.log('hi')</script>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test-document.html');\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 2);\n      assert.instanceOf(features[0], ScannedImport);\n      const feature0 = <ScannedImport>features[0];\n      assert.equal(feature0.type, 'html-script');\n      assert.equal(feature0.url, 'foo.js');\n      assert.instanceOf(features[1], ScannedInlineDocument);\n      const feature1 = <ScannedInlineDocument>features[1];\n      assert.equal(feature1.type, 'js');\n      assert.equal(feature1.contents, `console.log('hi')`);\n      assert.deepEqual(feature1.locationOffset, {line: 2, col: 18});\n    });\n\n    test('finds external scripts relative to baseUrl', async() => {\n      const contents = `<html><head><base href=\"/aybabtu/\">\n          <script src=\"foo.js\"></script>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test-document.html');\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 1);\n      assert.instanceOf(features[0], ScannedImport);\n      const feature0 = <ScannedImport>features[0];\n      assert.equal(feature0.type, 'html-script');\n      assert.equal(feature0.url, '/aybabtu/foo.js');\n    });\n  });\n});\n"]}