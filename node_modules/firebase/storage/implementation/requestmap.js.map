{"version":3,"sources":["src/storage/implementation/requestmap.ts"],"names":["object","constants","RequestMap","map_","id_","minSafeInteger","r","id","self","unmap","getPromise","then","forEach","key","val","cancel"],"mappings":";;;;;;;qjBAAA;;;;;;;;;;;;;;;;;AAeA;;IAAYA,M;;AAGZ;;IAAYC,S;;;;;;AAEZ;;;IAGMC,U,WAAAA,U;AAIJ,0BAAA;AAAA;;AAHQ,aAAAC,IAAA,GAAsC,EAAtC;AAIN,aAAKC,GAAL,GAAWH,UAAUI,cAArB;AACD;AAED;;;;;;;;;mCAKWC,C,EAAe;AACxB,gBAAIC,KAAK,KAAKH,GAAd;AACA,iBAAKA,GAAL;AACA,iBAAKD,IAAL,CAAUI,EAAV,IAAgBD,CAAhB;AACA,gBAAIE,OAAO,IAAX;AAEA,qBAAAC,KAAA,GAAA;AACE,uBAAOD,KAAKL,IAAL,CAAUI,EAAV,CAAP;AACD;AACDD,cAAEI,UAAF,GAAeC,IAAf,CAAoBF,KAApB,EAA2BA,KAA3B;AACD;AAED;;;;;;gCAGK;AACHT,mBAAOY,OAAP,CAAe,KAAKT,IAApB,EAA0B,UAACU,GAAD,EAAcC,GAAd,EAA+B;AACvD,oBAAIA,GAAJ,EAAS;AACPA,wBAAIC,MAAJ,CAAW,IAAX;AACD;AACF,aAJD;AAKA,iBAAKZ,IAAL,GAAY,EAAZ;AACD","file":"requestmap.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as object from './object';\nimport * as RequestExports from './request';\nimport {Request} from './request';\nimport * as constants from './constants';\n\n/**\n * @struct\n */\nexport class RequestMap {\n  private map_: {[key: number]: Request<any>} = {};\n  private id_: number;\n\n  constructor() {\n    this.id_ = constants.minSafeInteger;\n  }\n\n  /**\n   * Registers the given request with this map.\n   * The request is unregistered when it completes.\n   * @param r The request to register.\n   */\n  addRequest(r: Request<any>) {\n    let id = this.id_;\n    this.id_++;\n    this.map_[id] = r;\n    let self = this;\n\n    function unmap() {\n      delete self.map_[id];\n    }\n    r.getPromise().then(unmap, unmap);\n  }\n\n  /**\n   * Cancels all registered requests.\n   */\n  clear() {\n    object.forEach(this.map_, (key: string, val: Request<any>) => {\n      if (val) {\n        val.cancel(true);\n      }\n    });\n    this.map_ = {};\n  }\n}\n"]}