{"version":3,"sources":["src/storage/implementation/string.ts"],"names":["formatValidator","dataFromString","utf8Bytes_","percentEncodedBytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","errorsExports","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","stringFormat","StringData","data","opt_contentType","contentType","format","string","unknown","b","i","length","c","charCodeAt","push","valid","hi","lo","Uint8Array","decoded","decodeURIComponent","e","invalidFormat","hasMinus","indexOf","hasUnder","invalidChar","hasPlus","hasSlash","replace","bytes","atob","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","parts","s","end","longEnough"],"mappings":"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","file":"string.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport {errors} from './error';\n\n/**\n * @enum {string}\n */\nexport type StringFormat = string;\nexport const StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nexport function formatValidator(stringFormat: string) {\n  switch (stringFormat) {\n    case StringFormat.RAW:\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n    case StringFormat.DATA_URL:\n      return;\n    default:\n      throw 'Expected one of the event types: [' + StringFormat.RAW + ', ' +\n          StringFormat.BASE64 + ', ' + StringFormat.BASE64URL + ', ' +\n          StringFormat.DATA_URL + '].';\n  }\n}\n\n/**\n * @struct\n */\nexport class StringData {\n  contentType: string|null;\n\n  constructor(public data: Uint8Array, opt_contentType?: string|null) {\n    this.contentType = opt_contentType || null;\n  }\n}\n\nexport function dataFromString(\n    format: StringFormat, string: string): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(string));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, string));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(string), dataURLContentType_(string));\n  }\n\n  // assert(false);\n  throw errorsExports.unknown();\n}\n\nexport function utf8Bytes_(string: string): Uint8Array {\n  let b = [];\n  for (let i = 0; i < string.length; i++) {\n    let c = string.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) == 55296) {\n          // The start of a surrogate pair.\n          let valid = i < string.length - 1 &&\n              (string.charCodeAt(i + 1) & 64512) == 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            let hi = c;\n            let lo = string.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(\n                240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63,\n                128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) == 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(string: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(string);\n  } catch (e) {\n    throw errorsExports.invalidFormat(\n        StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, string: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      let hasMinus = string.indexOf('-') !== -1;\n      let hasUnder = string.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        let invalidChar = hasMinus ? '-' : '_';\n        throw errorsExports.invalidFormat(\n            format,\n            'Invalid character \\'' + invalidChar +\n                '\\' found: is it base64url encoded?');\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      let hasPlus = string.indexOf('+') !== -1;\n      let hasSlash = string.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        let invalidChar = hasPlus ? '+' : '/';\n        throw errorsExports.invalidFormat(\n            format,\n            'Invalid character \\'' + invalidChar +\n                '\\' found: is it base64 encoded?');\n      }\n      string = string.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n  }\n  let bytes;\n  try {\n    bytes = atob(string);\n  } catch (e) {\n    throw errorsExports.invalidFormat(format, 'Invalid character found');\n  }\n  let array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\n/**\n * @struct\n */\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string|null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    let matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw errorsExports.invalidFormat(\n          StringFormat.DATA_URL,\n          'Must be formatted \\'data:[<mediatype>][;base64],<data>');\n    }\n    let middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ?\n          middle.substring(0, middle.length - ';base64'.length) :\n          middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(string: string): Uint8Array {\n  let parts = new DataURLParts(string);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(string: string): string|null {\n  let parts = new DataURLParts(string);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n"]}