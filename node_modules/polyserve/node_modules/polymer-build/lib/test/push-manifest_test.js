"use strict";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../node_modules/@types/mocha/index.d.ts" />
const chai_1 = require("chai");
const path = require("path");
const stream_1 = require("stream");
const vfs = require("vinyl-fs");
const polymer_project_1 = require("../polymer-project");
/**
 * A utility stream to check all files that pass through it for a file that
 * matches the given push manifest file path. For that file, the stream asserts
 * that it matches the expected push manifest contents. It will emit
 * "match-success" & "match-failure" events for each test to listen to.
 */
class CheckPushManifest extends stream_1.Transform {
    constructor(filePath, expectedManfiest) {
        super({ objectMode: true });
        this.didAssert = false;
        this.filePath = filePath;
        this.expectedManfiest = expectedManfiest;
    }
    _transform(file, _encoding, callback) {
        if (this.filePath !== file.path) {
            callback(null, file);
            return;
        }
        try {
            const pushManifestContents = file.contents.toString();
            const pushManifestJson = JSON.parse(pushManifestContents);
            chai_1.assert.deepEqual(pushManifestJson, this.expectedManfiest);
            this.emit('match-success');
        }
        catch (err) {
            this.emit('match-failure', err);
        }
        this.didAssert = true;
        callback(null, file);
    }
    _flush(done) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.didAssert) {
                done();
            }
            else {
                done(new Error(`never saw file ${this.filePath}`));
            }
        });
    }
}
/**
 * Utility function to set up the boilerplate for testing the
 * project.addPushManifest() transform stream.
 */
function testPushManifest(project, manifestRelativePath, expectedManfiest, done) {
    const expectedManifestAbsolutePath = path.join(project.config.root, manifestRelativePath || 'push-manifest.json');
    const pushManifestChecker = new CheckPushManifest(expectedManifestAbsolutePath, expectedManfiest);
    vfs.src(path.join(project.config.root, '**'))
        .on('error', done)
        .pipe(project.addPushManifest(manifestRelativePath))
        .on('error', done)
        .pipe(pushManifestChecker)
        .on('data', () => { })
        .on('match-success', done)
        .on('match-failure', done)
        .on('error', done);
}
suite('AddPushManifest', () => {
    const testProjectRoot = path.resolve('test-fixtures/push-manifest-data');
    test('with entrypoint-only config options', (done) => {
        const project = new polymer_project_1.PolymerProject({
            root: testProjectRoot,
            entrypoint: 'entrypoint-only.html',
        });
        const expectedPushManifest = {
            'entrypoint-only.html': {
                'framework.html': {
                    type: 'document',
                    weight: 1,
                },
            },
        };
        testPushManifest(project, null, expectedPushManifest, done);
    });
    test('with entrypoint and fragments config options', (done) => {
        const project = new polymer_project_1.PolymerProject({
            root: testProjectRoot,
            entrypoint: 'entrypoint-only.html',
            fragments: ['entrypoint-b.html', 'entrypoint-c.html'],
            sources: [
                'framework.html',
                'shell.html',
                'entrypoint-a.html',
                'entrypoint-b.html',
                'entrypoint-c.html',
                'common-dependency.html',
            ],
        });
        const expectedPushManifest = {
            'entrypoint-only.html': {
                'framework.html': {
                    type: 'document',
                    weight: 1,
                },
            },
            'entrypoint-b.html': {
                'common-dependency.html': {
                    type: 'document',
                    weight: 1,
                },
                'example-script.js': {
                    type: 'script',
                    weight: 1,
                },
                'example-style.css': {
                    type: 'style',
                    weight: 1,
                },
            },
            'entrypoint-c.html': {
                'common-dependency.html': {
                    type: 'document',
                    weight: 1,
                },
                'example-script.js': {
                    type: 'script',
                    weight: 1,
                },
                'example-style.css': {
                    type: 'style',
                    weight: 1,
                },
            }
        };
        testPushManifest(project, null, expectedPushManifest, done);
    });
    test('with full app-shell config options', (done) => {
        const project = new polymer_project_1.PolymerProject({
            root: testProjectRoot,
            entrypoint: 'entrypoint-a.html',
            shell: 'shell.html',
            fragments: ['entrypoint-b.html', 'entrypoint-c.html'],
            sources: [
                'framework.html',
                'shell.html',
                'entrypoint-a.html',
                'entrypoint-b.html',
                'entrypoint-c.html',
                'common-dependency.html',
            ],
        });
        const expectedPushManifest = {
            'shell.html': {
                'framework.html': {
                    type: 'document',
                    weight: 1,
                }
            },
            'entrypoint-b.html': {
                'common-dependency.html': {
                    type: 'document',
                    weight: 1,
                },
                'example-script.js': {
                    type: 'script',
                    weight: 1,
                },
                'example-style.css': {
                    type: 'style',
                    weight: 1,
                },
            },
            'entrypoint-c.html': {
                'common-dependency.html': {
                    type: 'document',
                    weight: 1,
                },
                'example-script.js': {
                    type: 'script',
                    weight: 1,
                },
                'example-style.css': {
                    type: 'style',
                    weight: 1,
                },
            }
        };
        testPushManifest(project, null, expectedPushManifest, done);
    });
    test('with custom file path', (done) => {
        const project = new polymer_project_1.PolymerProject({
            root: testProjectRoot,
            entrypoint: 'entrypoint-a.html',
            shell: 'shell.html',
            fragments: ['entrypoint-b.html', 'entrypoint-c.html'],
            sources: [
                'framework.html',
                'shell.html',
                'entrypoint-a.html',
                'entrypoint-b.html',
                'entrypoint-c.html',
                'common-dependency.html',
            ],
        });
        const pushManifestRelativePath = 'custom/push-manifest/path.json';
        const expectedPushManifest = {
            'shell.html': {
                'framework.html': {
                    type: 'document',
                    weight: 1,
                }
            },
            'entrypoint-b.html': {
                'common-dependency.html': {
                    type: 'document',
                    weight: 1,
                },
                'example-script.js': {
                    type: 'script',
                    weight: 1,
                },
                'example-style.css': {
                    type: 'style',
                    weight: 1,
                },
            },
            'entrypoint-c.html': {
                'common-dependency.html': {
                    type: 'document',
                    weight: 1,
                },
                'example-script.js': {
                    type: 'script',
                    weight: 1,
                },
                'example-style.css': {
                    type: 'style',
                    weight: 1,
                },
            }
        };
        testPushManifest(project, pushManifestRelativePath, expectedPushManifest, done);
    });
});
