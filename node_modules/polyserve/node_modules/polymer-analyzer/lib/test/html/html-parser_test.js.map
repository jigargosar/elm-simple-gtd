{"version":3,"sources":["test/html/html-parser_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAA4B;AAC5B,yBAAyB;AACzB,6BAA6B;AAE7B,wDAAkD;AAElD,KAAK,CAAC,YAAY,EAAE;IAElB,KAAK,CAAC,SAAS,EAAE;QAEf,IAAI,MAAkB,CAAC;QAEvB,KAAK,CAAC;YACJ,MAAM,GAAG,IAAI,wBAAU,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,2BAA2B,EAAE;YACjC,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CACxB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,kCAAkC,CAAC,EAAE,MAAM,CAAC,CAAC;YAEzE,IAAI,CAAC,+BAA+B,EAAE;gBACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,gCAAgC,CAAC,CAAC;gBACtE,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,gCAAgC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,2CAA2C,EAAE;gBAChD,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,gCAAgC,CAAC,CAAC;gBACtE,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE;YACxD,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CACxB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,wCAAwC,CAAC,EACjE,MAAM,CAAC,CAAC;YACZ,MAAM,QAAQ,GACV,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,sCAAsC,CAAC,CAAC;YAC/D,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,sCAAsC,CAAC,CAAC;YACnE,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"html-parser_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {HtmlParser} from '../../html/html-parser';\n\nsuite('HtmlParser', () => {\n\n  suite('parse()', () => {\n\n    let parser: HtmlParser;\n\n    setup(() => {\n      parser = new HtmlParser();\n    });\n\n    suite('on a well-formed document', () => {\n      const file = fs.readFileSync(\n          path.resolve(__dirname, '../static/html-parse-target.html'), 'utf8');\n\n      test('parses a well-formed document', () => {\n        const document = parser.parse(file, '/static/html-parse-target.html');\n        assert.equal(document.url, '/static/html-parse-target.html');\n      });\n\n      test('can stringify back a well-formed document', () => {\n        const document = parser.parse(file, '/static/html-parse-target.html');\n        assert.deepEqual(document.stringify(), file);\n      });\n    });\n\n    test('can properly determine the base url of a document', () => {\n      const file = fs.readFileSync(\n          path.resolve(__dirname, '../static/base-href/doc-with-base.html'),\n          'utf8');\n      const document =\n          parser.parse(file, '/static/base-href/doc-with-base.html');\n      assert.equal(document.url, '/static/base-href/doc-with-base.html');\n      assert.equal(document.baseUrl, '/static/');\n    });\n  });\n});\n"]}