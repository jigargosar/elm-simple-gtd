var _gdotdesign$elm_ui$Ui_NotificationCenter$remove = F2(
	function (id, model) {
		var updatedNotifications = A2(
			_elm_lang$core$List$filter,
			function (item) {
				return !_elm_lang$core$Native_Utils.eq(item.id, id);
			},
			model.notifications);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{notifications: updatedNotifications}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$initNotification = F2(
	function (model, contents) {
		var id = A2(
			_elm_lang$core$Maybe$withDefault,
			-1,
			_elm_lang$core$List$maximum(
				A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.id;
					},
					model.notifications)));
		return {attribute: 'ui-notification-show', duration: model.duration, contents: contents, id: id + 1};
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$performTask = F2(
	function (msg, task) {
		return A2(
			_elm_lang$core$Task$perform,
			function (_p0) {
				return msg;
			},
			task);
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$duration = F2(
	function (value, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{duration: value});
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$timeout = F2(
	function (value, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{timeout: value});
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$init = function (_p1) {
	return {
		notifications: {ctor: '[]'},
		duration: 500,
		timeout: 5000
	};
};
var _gdotdesign$elm_ui$Ui_NotificationCenter$Model = F3(
	function (a, b, c) {
		return {notifications: a, duration: b, timeout: c};
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$Notification = F4(
	function (a, b, c, d) {
		return {contents: a, attribute: b, duration: c, id: d};
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$Hide = function (a) {
	return {ctor: 'Hide', _0: a};
};
var _gdotdesign$elm_ui$Ui_NotificationCenter$renderNotification = F2(
	function (address, model) {
		var prefix = function () {
			var _p2 = _coreytrampe$elm_vendor$Vendor$prefix;
			switch (_p2.ctor) {
				case 'Webkit':
					return '-webkit-';
				case 'Moz':
					return '-moz-';
				case 'MS':
					return '-ms-';
				case 'O':
					return '-o-';
				default:
					return '';
			}
		}();
		var duration = A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(model.duration),
			'ms');
		var html = A3(
			_elm_lang$html$Html$node,
			'ui-notification',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					address(
						_gdotdesign$elm_ui$Ui_NotificationCenter$Hide(model.id))),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, model.attribute, ''),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'animation-duration', _1: duration},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: A2(_elm_lang$core$Basics_ops['++'], prefix, 'animation-duration'),
										_1: duration
									},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A3(
					_elm_lang$html$Html$node,
					'ui-notification-body',
					{ctor: '[]'},
					{
						ctor: '::',
						_0: model.contents,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(model.id),
			_1: html
		};
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$render = F2(
	function (address, model) {
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'ui-notification-center',
			_gdotdesign$elm_ui$Ui_Styles$apply(_gdotdesign$elm_ui$Ui_Styles_NotificationCenter$defaultStyle),
			A2(
				_elm_lang$core$List$map,
				_gdotdesign$elm_ui$Ui_NotificationCenter$renderNotification(address),
				model.notifications));
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$view = F2(
	function (address, model) {
		return A3(_elm_lang$html$Html_Lazy$lazy2, _gdotdesign$elm_ui$Ui_NotificationCenter$render, address, model);
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$Remove = function (a) {
	return {ctor: 'Remove', _0: a};
};
var _gdotdesign$elm_ui$Ui_NotificationCenter$hide = F2(
	function (id, model) {
		var updatedNotification = function (item) {
			return _elm_lang$core$Native_Utils.eq(item.id, id) ? _elm_lang$core$Native_Utils.update(
				item,
				{attribute: 'ui-notification-hide'}) : item;
		};
		var updatedNotifications = A2(_elm_lang$core$List$map, updatedNotification, model.notifications);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{notifications: updatedNotifications}),
			_1: A2(
				_gdotdesign$elm_ui$Ui_NotificationCenter$performTask,
				_gdotdesign$elm_ui$Ui_NotificationCenter$Remove(id),
				_elm_lang$core$Process$sleep(model.duration + 250))
		};
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$AutoHide = function (a) {
	return {ctor: 'AutoHide', _0: a};
};
var _gdotdesign$elm_ui$Ui_NotificationCenter$notify = F2(
	function (contents, model) {
		var notification = A2(_gdotdesign$elm_ui$Ui_NotificationCenter$initNotification, model, contents);
		var updatedModel = _elm_lang$core$Native_Utils.update(
			model,
			{
				notifications: A2(
					_elm_lang$core$Basics_ops['++'],
					model.notifications,
					{
						ctor: '::',
						_0: notification,
						_1: {ctor: '[]'}
					})
			});
		return {
			ctor: '_Tuple2',
			_0: updatedModel,
			_1: A2(
				_gdotdesign$elm_ui$Ui_NotificationCenter$performTask,
				_gdotdesign$elm_ui$Ui_NotificationCenter$AutoHide(notification.id),
				_elm_lang$core$Process$sleep(model.timeout))
		};
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$autoHide = F2(
	function (id, model) {
		var updatedNotification = function (item) {
			var index = A2(
				_elm_lang$core$Maybe$withDefault,
				-1,
				A2(_elm_community$list_extra$List_Extra$elemIndex, item, model.notifications));
			return (_elm_lang$core$Native_Utils.eq(item.id, id) && _elm_lang$core$Native_Utils.eq(index, 0)) ? _elm_lang$core$Native_Utils.update(
				item,
				{attribute: 'ui-notification-hide'}) : item;
		};
		var isMember = A2(
			_elm_lang$core$List$member,
			id,
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.id;
				},
				model.notifications));
		var updatedNotifications = A2(_elm_lang$core$List$map, updatedNotification, model.notifications);
		var hideCmd = (!_elm_lang$core$Native_Utils.eq(updatedNotifications, model.notifications)) ? A2(
			_gdotdesign$elm_ui$Ui_NotificationCenter$performTask,
			_gdotdesign$elm_ui$Ui_NotificationCenter$Remove(id),
			_elm_lang$core$Process$sleep(model.duration + 250)) : A2(
			_gdotdesign$elm_ui$Ui_NotificationCenter$performTask,
			_gdotdesign$elm_ui$Ui_NotificationCenter$AutoHide(id),
			_elm_lang$core$Process$sleep(100));
		var cmd = isMember ? hideCmd : _elm_lang$core$Platform_Cmd$none;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{notifications: updatedNotifications}),
			_1: cmd
		};
	});
var _gdotdesign$elm_ui$Ui_NotificationCenter$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'AutoHide':
				return A2(_gdotdesign$elm_ui$Ui_NotificationCenter$autoHide, _p3._0, model);
			case 'Remove':
				return A2(_gdotdesign$elm_ui$Ui_NotificationCenter$remove, _p3._0, model);
			default:
				return A2(_gdotdesign$elm_ui$Ui_NotificationCenter$hide, _p3._0, model);
		}
	});
