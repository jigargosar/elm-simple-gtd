{"version":3,"sources":["polymer/polymer-core-feature-scanner.ts"],"names":[],"mappings":"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","file":"polymer-core-feature-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport {Visitor} from '../javascript/estree-visitor';\nimport * as esutil from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {JavaScriptScanner} from '../javascript/javascript-scanner';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {Severity} from '../model/model';\n\nimport {toScannedMethod, toScannedPolymerProperty} from './js-utils';\nimport {ScannedPolymerCoreFeature} from './polymer-core-feature';\n\n/**\n * Scans for Polymer 1.x core \"features\".\n *\n * In the Polymer 1.x core library, the `Polymer.Base` prototype is dynamically\n * augmented with properties via calls to `Polymer.Base._addFeature`. These\n * calls are spread across multiple files and split between the micro, mini,\n * and standard \"feature layers\". Polymer 2.x does not use this pattern.\n *\n * Example: https://github.com/Polymer/polymer/blob/1.x/src/mini/debouncer.html\n */\nexport class PolymerCoreFeatureScanner implements JavaScriptScanner {\n  async scan(\n      document: JavaScriptDocument,\n      visit: (visitor: Visitor) => Promise<void>) {\n    const visitor = new PolymerCoreFeatureVisitor(document);\n    await visit(visitor);\n    return {features: visitor.features};\n  }\n}\n\nclass PolymerCoreFeatureVisitor implements Visitor {\n  features: ScannedPolymerCoreFeature[] = [];\n\n  constructor(private document: JavaScriptDocument) {\n  }\n\n  /**\n   * Scan for `Polymer.Base = {...}`.\n   */\n  enterAssignmentExpression(\n      assignment: estree.AssignmentExpression, parent: estree.Node) {\n    if (assignment.left.type !== 'MemberExpression' ||\n        !esutil.matchesCallExpression(assignment.left, ['Polymer', 'Base'])) {\n      return;\n    }\n\n    const parsedJsdoc =\n        jsdoc.parseJsdoc(esutil.getAttachedComment(parent) || '');\n    const feature = new ScannedPolymerCoreFeature(\n        this.document.sourceRangeForNode(assignment),\n        assignment,\n        parsedJsdoc.description.trim(),\n        parsedJsdoc);\n    this.features.push(feature);\n\n    const rhs = assignment.right;\n    if (rhs.type !== 'ObjectExpression') {\n      feature.warnings.push({\n        message: `Expected assignment to \\`Polymer.Base\\` to be an object.` +\n            `Got \\`${rhs.type}\\` instead.`,\n        severity: Severity.ERROR,\n        code: 'invalid-polymer-base-assignment',\n        sourceRange: this.document.sourceRangeForNode(assignment)!,\n      });\n      return;\n    }\n\n    this._scanObjectProperties(rhs, feature);\n  }\n\n  /**\n   * Scan for `addFeature({...})`.\n   */\n  enterCallExpression(call: estree.CallExpression, parent: estree.Node) {\n    if (call.callee.type !== 'MemberExpression' ||\n        !esutil.matchesCallExpression(\n            call.callee, ['Polymer', 'Base', '_addFeature'])) {\n      return;\n    }\n\n    const parsedJsdoc =\n        jsdoc.parseJsdoc(esutil.getAttachedComment(parent) || '');\n    const feature = new ScannedPolymerCoreFeature(\n        this.document.sourceRangeForNode(call),\n        call,\n        parsedJsdoc.description.trim(),\n        parsedJsdoc);\n    this.features.push(feature);\n\n    if (call.arguments.length !== 1) {\n      feature.warnings.push({\n        message:\n            `Expected only one argument to \\`Polymer.Base._addFeature\\`. ` +\n            `Got ${call.arguments.length}.`,\n        severity: Severity.ERROR,\n        code: 'invalid-polymer-core-feature-call',\n        sourceRange: this.document.sourceRangeForNode(call)!,\n      });\n      return;\n    }\n\n    const arg = call.arguments[0];\n    if (arg.type !== 'ObjectExpression') {\n      feature.warnings.push({\n        message: `Expected argument to \\`Polymer.Base._addFeature\\` to be an ` +\n            `object. Got \\`${arg.type}\\` instead.`,\n        severity: Severity.ERROR,\n        code: 'invalid-polymer-core-feature-call',\n        sourceRange: this.document.sourceRangeForNode(call)!,\n      });\n      return;\n    }\n\n    this._scanObjectProperties(arg, feature);\n  }\n\n  /**\n   * Scan all properties of the given object expression and add them to the\n   * given feature.\n   */\n  private _scanObjectProperties(\n      obj: estree.ObjectExpression, feature: ScannedPolymerCoreFeature) {\n    for (const prop of obj.properties) {\n      const sourceRange = this.document.sourceRangeForNode(prop);\n      if (!sourceRange) {\n        continue;\n      }\n      if (esutil.isFunctionType(prop.value)) {\n        feature.methods.push(toScannedMethod(prop, sourceRange));\n      } else {\n        feature.properties.push(toScannedPolymerProperty(prop, sourceRange));\n      }\n      // TODO(aomarks) Are there any getters/setters on Polymer.Base?\n      // TODO(aomarks) Merge with similar code in polymer-element-scanner.\n    }\n  }\n}\n"]}