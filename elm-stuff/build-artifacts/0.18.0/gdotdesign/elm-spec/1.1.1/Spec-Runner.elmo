var _gdotdesign$elm_spec$Spec_Runner$perform = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		function (_p0) {
			return msg;
		},
		_elm_lang$core$Task$succeed(''));
};
var _gdotdesign$elm_spec$Spec_Runner$State = F7(
	function (a, b, c, d, e, f, g) {
		return {update: a, view: b, finishedTests: c, appInit: d, tests: e, counter: f, app: g};
	});
var _gdotdesign$elm_spec$Spec_Runner$Prog = F4(
	function (a, b, c, d) {
		return {update: a, subscriptions: b, view: c, init: d};
	});
var _gdotdesign$elm_spec$Spec_Runner$App = function (a) {
	return {ctor: 'App', _0: a};
};
var _gdotdesign$elm_spec$Spec_Runner$view = function (model) {
	var app = {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Basics$toString(model.counter),
		_1: A2(
			_elm_lang$html$Html$map,
			_gdotdesign$elm_spec$Spec_Runner$App,
			model.view(model.app))
	};
	var nodes = _elm_lang$core$List$isEmpty(model.tests) ? {
		ctor: '::',
		_0: app,
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'report',
				_1: _gdotdesign$elm_spec$Spec_Reporter$render(model.finishedTests)
			},
			_1: {ctor: '[]'}
		}
	} : {
		ctor: '::',
		_0: app,
		_1: {ctor: '[]'}
	};
	return A3(
		_elm_lang$html$Html_Keyed$node,
		'testing-node-123456',
		{ctor: '[]'},
		nodes);
};
var _gdotdesign$elm_spec$Spec_Runner$NoOp = function (a) {
	return {ctor: 'NoOp', _0: a};
};
var _gdotdesign$elm_spec$Spec_Runner$report = function (tests) {
	var encodeResult = function (result) {
		var _p1 = result;
		switch (_p1.ctor) {
			case 'Pass':
				return _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'outcome',
							_1: _elm_lang$core$Json_Encode$string('pass')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'message',
								_1: _elm_lang$core$Json_Encode$string(_p1._0)
							},
							_1: {ctor: '[]'}
						}
					});
			case 'Fail':
				return _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'outcome',
							_1: _elm_lang$core$Json_Encode$string('fail')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'message',
								_1: _elm_lang$core$Json_Encode$string(_p1._0)
							},
							_1: {ctor: '[]'}
						}
					});
			default:
				return _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'outcome',
							_1: _elm_lang$core$Json_Encode$string('error')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'message',
								_1: _elm_lang$core$Json_Encode$string(_p1._0)
							},
							_1: {ctor: '[]'}
						}
					});
		}
	};
	var encodeMock = function (mock) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'method',
					_1: _elm_lang$core$Json_Encode$string(mock.method)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'url',
						_1: _elm_lang$core$Json_Encode$string(mock.url)
					},
					_1: {ctor: '[]'}
				}
			});
	};
	var mockedRequests = function (test) {
		return _gdotdesign$elm_spec$Native_Spec.getMockResults(test);
	};
	var notMockedRequests = function (test) {
		return A2(
			_elm_lang$core$List$filter,
			function (item) {
				return !A2(
					_elm_lang$core$List$member,
					item,
					function (_) {
						return _.called;
					}(
						mockedRequests(test)));
			},
			test.requests);
	};
	var encodeTest = function (test) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'name',
					_1: _elm_lang$core$Json_Encode$string(test.name)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'id',
						_1: _elm_lang$core$Json_Encode$int(test.id)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'path',
							_1: _elm_lang$core$Json_Encode$list(
								A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, test.path))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'results',
								_1: _elm_lang$core$Json_Encode$list(
									A2(_elm_lang$core$List$map, encodeResult, test.results))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'unhandledRequests',
									_1: _elm_lang$core$Json_Encode$list(
										A2(
											_elm_lang$core$List$map,
											encodeMock,
											function (_) {
												return _.unhandled;
											}(
												mockedRequests(test))))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'mockedRequests',
										_1: _elm_lang$core$Json_Encode$list(
											A2(
												_elm_lang$core$List$map,
												encodeMock,
												function (_) {
													return _.called;
												}(
													mockedRequests(test))))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'notMockedRequests',
											_1: _elm_lang$core$Json_Encode$list(
												A2(
													_elm_lang$core$List$map,
													encodeMock,
													notMockedRequests(test)))
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	};
	var data = _elm_lang$core$Json_Encode$list(
		A2(_elm_lang$core$List$map, encodeTest, tests));
	return A2(
		_elm_lang$core$Task$perform,
		_gdotdesign$elm_spec$Spec_Runner$NoOp,
		_gdotdesign$elm_spec$Native_Spec.report(data));
};
var _gdotdesign$elm_spec$Spec_Runner$Next = function (a) {
	return {ctor: 'Next', _0: a};
};
var _gdotdesign$elm_spec$Spec_Runner$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'App':
				var _p3 = A2(model.update, _p2._0, model.app);
				var app = _p3._0;
				var cmd = _p3._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{app: app}),
					{
						ctor: '::',
						_0: A2(_elm_lang$core$Platform_Cmd$map, _gdotdesign$elm_spec$Spec_Runner$App, cmd),
						_1: {ctor: '[]'}
					});
			default:
				var _p4 = model.tests;
				if (_p4.ctor === '::') {
					var _p12 = _p4._0;
					var _p11 = _p4._1;
					var updatedTest = function () {
						var _p5 = _p2._0;
						if (_p5.ctor === 'Just') {
							return _elm_lang$core$Native_Utils.update(
								_p12,
								{
									results: A2(
										_elm_lang$core$Basics_ops['++'],
										_p12.results,
										{
											ctor: '::',
											_0: _p5._0,
											_1: {ctor: '[]'}
										})
								});
						} else {
							return _p12;
						}
					}();
					var _p6 = _p12.steps;
					if (_p6.ctor === '::') {
						var stepTask = A2(
							_elm_lang$core$Task$perform,
							function (_p7) {
								return _gdotdesign$elm_spec$Spec_Runner$Next(
									_elm_lang$core$Maybe$Just(_p7));
							},
							A2(
								_elm_lang$core$Task$andThen,
								function (_p8) {
									return _p6._0;
								},
								_gdotdesign$elm_spec$Native_Spec.raf));
						var testWithoutStep = _elm_lang$core$Native_Utils.update(
							updatedTest,
							{steps: _p6._1});
						var _p9 = _gdotdesign$elm_spec$Native_Spec.setLayout(_p12.layout);
						var _p10 = _gdotdesign$elm_spec$Native_Spec.mockHttpRequests(_p12);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									tests: {ctor: '::', _0: testWithoutStep, _1: _p11}
								}),
							_1: stepTask
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									finishedTests: A2(
										_elm_lang$core$Basics_ops['++'],
										model.finishedTests,
										{
											ctor: '::',
											_0: updatedTest,
											_1: {ctor: '[]'}
										}),
									counter: model.counter + 1,
									app: model.appInit(
										{ctor: '_Tuple0'}),
									tests: _p11
								}),
							_1: _gdotdesign$elm_spec$Spec_Runner$perform(
								_gdotdesign$elm_spec$Spec_Runner$Next(_elm_lang$core$Maybe$Nothing))
						};
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _gdotdesign$elm_spec$Spec_Runner$report(model.finishedTests)
					};
				}
		}
	});
var _gdotdesign$elm_spec$Spec_Runner$runWithProgram = F2(
	function (data, tests) {
		var processedTests = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (index, item) {
					return _elm_lang$core$Native_Utils.update(
						item,
						{id: index});
				}),
			A2(
				_gdotdesign$elm_spec$Spec_Types$flatten,
				{ctor: '[]'},
				tests));
		var testToRun = function () {
			var _p13 = _gdotdesign$elm_spec$Native_Spec.getTestId(
				{ctor: '_Tuple0'});
			if (_p13.ctor === 'Just') {
				return A2(
					_elm_lang$core$List$filter,
					function (_p14) {
						return A2(
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								}),
							_p13._0,
							function (_) {
								return _.id;
							}(_p14));
					},
					processedTests);
			} else {
				return processedTests;
			}
		}();
		return _elm_lang$html$Html$program(
			{
				subscriptions: function (model) {
					return A2(
						_elm_lang$core$Platform_Sub$map,
						_gdotdesign$elm_spec$Spec_Runner$App,
						data.subscriptions(model.app));
				},
				update: _gdotdesign$elm_spec$Spec_Runner$update,
				view: _gdotdesign$elm_spec$Spec_Runner$view,
				init: {
					ctor: '_Tuple2',
					_0: {
						tests: testToRun,
						update: data.update,
						appInit: data.init,
						finishedTests: {ctor: '[]'},
						app: data.init(
							{ctor: '_Tuple0'}),
						view: data.view,
						counter: 0
					},
					_1: _gdotdesign$elm_spec$Spec_Runner$perform(
						_gdotdesign$elm_spec$Spec_Runner$Next(_elm_lang$core$Maybe$Nothing))
				}
			});
	});
var _gdotdesign$elm_spec$Spec_Runner$run = function (tests) {
	return A2(
		_gdotdesign$elm_spec$Spec_Runner$runWithProgram,
		{
			update: F2(
				function (_p16, _p15) {
					return {ctor: '_Tuple2', _0: '', _1: _elm_lang$core$Platform_Cmd$none};
				}),
			subscriptions: function (_p17) {
				return _elm_lang$core$Platform_Sub$none;
			},
			view: function (_p18) {
				return _elm_lang$html$Html$text('');
			},
			init: function (_p19) {
				return '';
			}
		},
		tests);
};
