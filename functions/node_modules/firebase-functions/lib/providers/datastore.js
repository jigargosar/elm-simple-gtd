"use strict";
// The MIT License (MIT)
//
// Copyright (c) 2017 Firebase
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
Object.defineProperty(exports, "__esModule", { value: true });
var cloud_functions_1 = require("../cloud-functions");
/** @internal */
exports.provider = (new Buffer('Y2xvdWQuZmlyZXN0b3Jl', 'base64')).toString();
/** @internal */
exports.defaultDatabase = '(default)';
function database(database) {
    if (database === void 0) { database = exports.defaultDatabase; }
    return new DatabaseBuilder("projects/" + process.env.GCLOUD_PROJECT + "/databases/" + database);
}
exports.database = database;
function namespace(namespace) {
    return database().namespace(namespace);
}
exports.namespace = namespace;
function document(path) {
    return database().document(path);
}
exports.document = document;
var DatabaseBuilder = (function () {
    /** @internal */
    function DatabaseBuilder(resource) {
        this.resource = resource;
    }
    DatabaseBuilder.prototype.namespace = function (namespace) {
        return new NamespaceBuilder(this.resource + "/documents@" + namespace);
    };
    DatabaseBuilder.prototype.document = function (path) {
        return (new NamespaceBuilder(this.resource + "/documents")).document(path);
    };
    return DatabaseBuilder;
}());
exports.DatabaseBuilder = DatabaseBuilder;
var NamespaceBuilder = (function () {
    /** @internal */
    function NamespaceBuilder(resource) {
        this.resource = resource;
    }
    NamespaceBuilder.prototype.document = function (path) {
        return new DocumentBuilder(this.resource + "/" + path);
    };
    return NamespaceBuilder;
}());
exports.NamespaceBuilder = NamespaceBuilder;
var DocumentBuilder = (function () {
    /** @internal */
    function DocumentBuilder(resource) {
        this.resource = resource;
        // TODO what validation do we want to do here?
    }
    DocumentBuilder.prototype.onWrite = function (handler) {
        return cloud_functions_1.makeCloudFunction({
            provider: exports.provider, handler: handler,
            resource: this.resource,
            eventType: 'document.write',
        });
    };
    return DocumentBuilder;
}());
exports.DocumentBuilder = DocumentBuilder;
