var _jigargosar$elm_simple_gtd$Menu$menuItemView = function (itemVM) {
	return {
		ctor: '_Tuple2',
		_0: itemVM.key,
		_1: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(itemVM.onClick),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$tabindex(itemVM.tabIndexValue),
					_1: {
						ctor: '::',
						_0: _jigargosar$elm_simple_gtd$X_Keyboard$onKeyDownStopPropagation(itemVM.onKeyDown),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: A2(_jigargosar$elm_simple_gtd$X_Function_Infix_ops['=>'], 'auto-focus', itemVM.isFocused),
									_1: {
										ctor: '::',
										_0: A2(_jigargosar$elm_simple_gtd$X_Function_Infix_ops['=>'], 'collection-item', true),
										_1: {
											ctor: '::',
											_0: A2(_jigargosar$elm_simple_gtd$X_Function_Infix_ops['=>'], 'active', itemVM.isSelected),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: itemVM.view,
				_1: {ctor: '[]'}
			})
	};
};
var _jigargosar$elm_simple_gtd$Menu$boolToTabIndexValue = function (bool) {
	return bool ? 0 : -1;
};
var _jigargosar$elm_simple_gtd$Menu$createItemViewModel = F3(
	function (menuVM, index, item) {
		return {
			key: menuVM.itemKey(item),
			isSelected: menuVM.isSelectedAt(index),
			isFocused: menuVM.isFocusedAt(index),
			tabIndexValue: menuVM.tabIndexValueAt(index),
			onClick: menuVM.onSelect(item),
			view: menuVM.itemView(item),
			onKeyDown: menuVM.onKeyDownAt(index)
		};
	});
var _jigargosar$elm_simple_gtd$Menu$splitSwapListAt = function (index) {
	return function (_p0) {
		return A2(
			_elm_lang$core$Basics$uncurry,
			_elm_lang$core$List$append,
			_Fresheyeball$elm_tuple_extra$Tuple2$swap(
				A2(_elm_community$list_extra$List_Extra$splitAt, index, _p0)));
	};
};
var _jigargosar$elm_simple_gtd$Menu$setFocusKey = F2(
	function (focusKey, state) {
		return _elm_lang$core$Native_Utils.update(
			state,
			{
				maybeFocusKey: _elm_lang$core$Maybe$Just(focusKey)
			});
	});
var _jigargosar$elm_simple_gtd$Menu$setFocusKeyIn = _elm_lang$core$Basics$flip(_jigargosar$elm_simple_gtd$Menu$setFocusKey);
var _jigargosar$elm_simple_gtd$Menu$createViewModel = F3(
	function (items, state, config) {
		var stateChangedMsgFromMaybeFocusedItem = function (maybeItem) {
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(
					_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
					maybeItem,
					function (_p1) {
						return config.onStateChanged(
							A2(
								_jigargosar$elm_simple_gtd$Menu$setFocusKeyIn,
								state,
								config.itemKey(_p1)));
					}),
				config.noOp);
		};
		var maybeFocusedIndex = function () {
			var findIndexOfItemWithKey = function (key) {
				return A2(
					_elm_community$list_extra$List_Extra$findIndex,
					function (_p2) {
						return A2(
							_jigargosar$elm_simple_gtd$X_Function$equals,
							key,
							config.itemKey(_p2));
					},
					items);
			};
			return A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?+>'],
				state.maybeFocusKey,
				A2(
					_jigargosar$elm_simple_gtd$X_Function_Infix_ops['>>?'],
					findIndexOfItemWithKey,
					_jigargosar$elm_simple_gtd$X_List$clampIndexIn(items)));
		}();
		var clampIndex = _jigargosar$elm_simple_gtd$X_List$clampIndexIn(items);
		var maybeSelectedIndex = A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
			A2(_elm_community$list_extra$List_Extra$findIndex, config.isSelected, items),
			clampIndex);
		var focusedIndex = A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(_elm_community$maybe_extra$Maybe_Extra$orElse, maybeSelectedIndex, maybeFocusedIndex),
			0);
		var onFocusItemStartingWithMsg = function (singleChar) {
			var findPred = function () {
				var charString = _elm_lang$core$String$fromChar(singleChar);
				var boil = _elm_lang$core$String$toLower;
				return function (_p3) {
					return A2(
						_elm_lang$core$String$startsWith,
						boil(charString),
						boil(
							config.itemSearchText(_p3)));
				};
			}();
			return stateChangedMsgFromMaybeFocusedItem(
				A2(
					_elm_community$list_extra$List_Extra$find,
					findPred,
					A2(_jigargosar$elm_simple_gtd$Menu$splitSwapListAt, focusedIndex + 1, items)));
		};
		var isFocusedAt = _jigargosar$elm_simple_gtd$X_Function$equals(focusedIndex);
		var onFocusedItemKeyDown = function (_p4) {
			var _p5 = _p4;
			var onFocusIndexChangeByMsg = function (offset) {
				return stateChangedMsgFromMaybeFocusedItem(
					A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['#'], _elm_community$list_extra$List_Extra$getAt, items)(
						clampIndex(focusedIndex + offset)));
			};
			var _p6 = _p5.key;
			switch (_p6.ctor) {
				case 'Enter':
					return A2(
						_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
						A2(
							_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
							A2(_elm_community$list_extra$List_Extra$getAt, focusedIndex, items),
							config.onSelect),
						config.noOp);
				case 'ArrowUp':
					return onFocusIndexChangeByMsg(-1);
				case 'ArrowDown':
					return onFocusIndexChangeByMsg(1);
				default:
					var _p7 = _elm_lang$core$String$toList(_p5.keyString);
					if ((_p7.ctor === '::') && (_p7._1.ctor === '[]')) {
						return onFocusItemStartingWithMsg(_p7._0);
					} else {
						return config.noOp;
					}
			}
		};
		var onKeyDownAt = function (index) {
			return isFocusedAt(index) ? onFocusedItemKeyDown : function (_p8) {
				return config.noOp;
			};
		};
		return {
			isFocusedAt: isFocusedAt,
			isSelectedAt: A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
				A2(_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'], maybeSelectedIndex, _jigargosar$elm_simple_gtd$X_Function$equals),
				function (_p9) {
					return false;
				}),
			tabIndexValueAt: function (_p10) {
				return _jigargosar$elm_simple_gtd$Menu$boolToTabIndexValue(
					isFocusedAt(_p10));
			},
			onKeyDownAt: onKeyDownAt,
			onSelect: config.onSelect,
			itemView: config.itemView,
			itemKey: config.itemKey
		};
	});
var _jigargosar$elm_simple_gtd$Menu$view = F3(
	function (items, state, config) {
		var menuVM = A3(_jigargosar$elm_simple_gtd$Menu$createViewModel, items, state, config);
		var itemViewList = A2(
			_jigargosar$elm_simple_gtd$X_Function_Infix_ops['.#|>'],
			items,
			A2(
				_jigargosar$elm_simple_gtd$X_Function_Infix_ops['>>>'],
				_jigargosar$elm_simple_gtd$Menu$createItemViewModel(menuVM),
				_jigargosar$elm_simple_gtd$Menu$menuItemView));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('overlay'),
				_1: {
					ctor: '::',
					_0: _jigargosar$elm_simple_gtd$X_Html$onClickStopPropagation(config.onOutsideMouseDown),
					_1: {
						ctor: '::',
						_0: _jigargosar$elm_simple_gtd$X_Keyboard$onKeyDownStopPropagation(
							function (_p11) {
								return config.noOp;
							}),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A3(
					_elm_lang$html$Html_Keyed$node,
					'ul',
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('popup-menu'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('collection z-depth-4'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-prevent-default-keys', 'Tab'),
								_1: {ctor: '[]'}
							}
						}
					},
					itemViewList),
				_1: {ctor: '[]'}
			});
	});
var _jigargosar$elm_simple_gtd$Menu$initState = {maybeFocusKey: _elm_lang$core$Maybe$Nothing};
var _jigargosar$elm_simple_gtd$Menu$Config = F8(
	function (a, b, c, d, e, f, g, h) {
		return {onSelect: a, itemKey: b, itemSearchText: c, itemView: d, isSelected: e, onStateChanged: f, noOp: g, onOutsideMouseDown: h};
	});
var _jigargosar$elm_simple_gtd$Menu$ViewModel = F7(
	function (a, b, c, d, e, f, g) {
		return {isFocusedAt: a, isSelectedAt: b, tabIndexValueAt: c, onKeyDownAt: d, onSelect: e, itemView: f, itemKey: g};
	});
var _jigargosar$elm_simple_gtd$Menu$ItemViewModel = F7(
	function (a, b, c, d, e, f, g) {
		return {key: a, isFocused: b, tabIndexValue: c, isSelected: d, onClick: e, onKeyDown: f, view: g};
	});
