var _user$project$Context$setName = F2(
	function (name, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{name: name});
	});
var _user$project$Context$getName = function (_) {
	return _.name;
};
var _user$project$Context$findNameById = function (id) {
	return A2(
		_user$project$Ext_Function_Infix_ops['>>?'],
		_user$project$Store$findById(id),
		_user$project$Context$getName);
};
var _user$project$Context$findByName = function (name) {
	return _user$project$Store$findBy(
		function (_p0) {
			return A2(
				_user$project$Ext_Function$equals,
				_elm_lang$core$String$trim(name),
				_user$project$Context$getName(_p0));
		});
};
var _user$project$Context$compareNotNulls = function (tuple) {
	var compareName = function (_p1) {
		return A2(
			_elm_lang$core$Basics$uncurry,
			_elm_lang$core$Basics$compare,
			A2(_Fresheyeball$elm_tuple_extra$Tuple2$mapBoth, _user$project$Context$getName, _p1));
	};
	return function (deletedTuple) {
		var _p2 = deletedTuple;
		if (_p2._0 === true) {
			if (_p2._1 === false) {
				return _elm_lang$core$Basics$GT;
			} else {
				return compareName(tuple);
			}
		} else {
			if (_p2._1 === true) {
				return _elm_lang$core$Basics$LT;
			} else {
				return compareName(tuple);
			}
		}
	}(
		A2(_Fresheyeball$elm_tuple_extra$Tuple2$mapBoth, _user$project$Document$isDeleted, tuple));
};
var _user$project$Context$nullId = '';
var _user$project$Context$isNullId = _user$project$Ext_Function$equals(_user$project$Context$nullId);
var _user$project$Context$otherFieldsEncoder = function (project) {
	return {
		ctor: '::',
		_0: A2(
			_user$project$Ext_Function_Infix_ops['=>'],
			'name',
			_elm_lang$core$Json_Encode$string(
				_user$project$Context$getName(project))),
		_1: {ctor: '[]'}
	};
};
var _user$project$Context$constructor = F7(
	function (id, rev, createdAt, modifiedAt, deleted, deviceId, name) {
		return {id: id, rev: rev, createdAt: createdAt, modifiedAt: modifiedAt, deleted: deleted, deviceId: deviceId, name: name};
	});
var _user$project$Context$init = F4(
	function (name, now, deviceId, id) {
		return A7(_user$project$Context$constructor, id, '', now, now, false, deviceId, name);
	});
var _user$project$Context$decoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'name',
	_elm_lang$core$Json_Decode$string,
	_user$project$Document$documentFieldsDecoder(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Context$constructor)));
var _user$project$Context$storeGenerator = A3(_user$project$Store$generator, 'context-db', _user$project$Context$otherFieldsEncoder, _user$project$Context$decoder);
var _user$project$Context$null = A7(_user$project$Context$constructor, _user$project$Context$nullId, '', 0, 0, false, '', 'Inbox');
var _user$project$Context$filterNull = function (pred) {
	return A2(
		_elm_lang$core$List$filter,
		pred,
		{
			ctor: '::',
			_0: _user$project$Context$null,
			_1: {ctor: '[]'}
		});
};
var _user$project$Context$isNull = _user$project$Ext_Function$equals(_user$project$Context$null);
var _user$project$Context$sort = _elm_lang$core$List$sortWith(
	F2(
		function (v1, v2) {
			var _p3 = {
				ctor: '_Tuple2',
				_0: _user$project$Context$isNull(v1),
				_1: _user$project$Context$isNull(v2)
			};
			if (_p3._0 === true) {
				if (_p3._1 === false) {
					return _elm_lang$core$Basics$LT;
				} else {
					return _elm_lang$core$Basics$EQ;
				}
			} else {
				if (_p3._1 === true) {
					return _elm_lang$core$Basics$GT;
				} else {
					return _user$project$Context$compareNotNulls(
						{ctor: '_Tuple2', _0: v1, _1: v2});
				}
			}
		}));
var _user$project$Context$Record = function (a) {
	return {name: a};
};
