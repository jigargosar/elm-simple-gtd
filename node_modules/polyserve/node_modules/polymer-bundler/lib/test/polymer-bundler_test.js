"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/// <reference path="../../node_modules/@types/chai/index.d.ts" />
/// <reference path="../../node_modules/@types/node/index.d.ts" />
/// <reference path="../../node_modules/@types/mocha/index.d.ts" />
const chai = require("chai");
const child_process_1 = require("child_process");
const path = require("path");
chai.config.showDiff = true;
const assert = chai.assert;
suite('polymer-bundler CLI', () => {
    test('uses the current working folder as loader root', () => __awaiter(this, void 0, void 0, function* () {
        const projectRoot = path.resolve(__dirname, '../../test/html');
        const cli = path.resolve(__dirname, '../bin/polymer-bundler.js');
        const stdout = child_process_1.execSync([
            `cd ${projectRoot}`,
            `node ${cli} absolute-paths.html --inline-scripts --inline-css`,
        ].join(' && '))
            .toString();
        assert.include(stdout, '.absolute-paths-style');
        assert.include(stdout, 'hello from /absolute-paths/script.js');
    }));
});
//# sourceMappingURL=polymer-bundler_test.js.map