var _user$project$Firebase_SignIn$shouldSkipSignIn = function (model) {
	var _p0 = model.state;
	if (_p0.ctor === 'SignInSuccess') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Firebase_SignIn$encode = function (model) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: A2(
				_user$project$X_Function_Infix_ops['=>'],
				'skipSignIn',
				_elm_lang$core$Json_Encode$bool(model.skipSignIn)),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$X_Function_Infix_ops['=>'],
					'state',
					_elm_lang$core$Json_Encode$string(
						_elm_lang$core$Basics$toString(model.state))),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Firebase_SignIn$skipSignIn = A2(
	_user$project$X_Record$field,
	function (_) {
		return _.skipSignIn;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{skipSignIn: s});
		}));
var _user$project$Firebase_SignIn$setSkipSignIn = A2(_user$project$X_Record$set, _user$project$Firebase_SignIn$skipSignIn, true);
var _user$project$Firebase_SignIn$state = A2(
	_user$project$X_Record$field,
	function (_) {
		return _.state;
	},
	F2(
		function (s, b) {
			return _elm_lang$core$Native_Utils.update(
				b,
				{state: s});
		}));
var _user$project$Firebase_SignIn$Model = F2(
	function (a, b) {
		return {skipSignIn: a, state: b};
	});
var _user$project$Firebase_SignIn$SignInSuccess = {ctor: 'SignInSuccess'};
var _user$project$Firebase_SignIn$setStateToSignInSuccess = function (_p1) {
	return A3(
		_user$project$X_Record$set,
		_user$project$Firebase_SignIn$skipSignIn,
		false,
		A3(_user$project$X_Record$set, _user$project$Firebase_SignIn$state, _user$project$Firebase_SignIn$SignInSuccess, _p1));
};
var _user$project$Firebase_SignIn$updateStateAfterUserChanged = F2(
	function (user, state) {
		var _p2 = user;
		if (_p2.ctor === 'SignedIn') {
			return _user$project$Firebase_SignIn$SignInSuccess;
		} else {
			return state;
		}
	});
var _user$project$Firebase_SignIn$updateAfterUserChanged = function (user) {
	return A2(
		_user$project$X_Record$over,
		_user$project$Firebase_SignIn$state,
		_user$project$Firebase_SignIn$updateStateAfterUserChanged(user));
};
var _user$project$Firebase_SignIn$TriedSignOut = {ctor: 'TriedSignOut'};
var _user$project$Firebase_SignIn$stringToMaybeState = function (string) {
	var _p3 = string;
	switch (_p3) {
		case 'TriedSignOut':
			return _elm_lang$core$Maybe$Just(_user$project$Firebase_SignIn$TriedSignOut);
		case 'SignInSuccess':
			return _elm_lang$core$Maybe$Just(_user$project$Firebase_SignIn$SignInSuccess);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Firebase_SignIn$stateDecoder = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (string) {
		return A2(
			_danielnarey$elm_toolkit$Toolkit_Operators_ops['?='],
			A2(
				_danielnarey$elm_toolkit$Toolkit_Operators_ops['?|>'],
				_user$project$Firebase_SignIn$stringToMaybeState(string),
				_elm_lang$core$Json_Decode$succeed),
			_elm_lang$core$Json_Decode$fail(
				A2(_elm_lang$core$Basics_ops['++'], 'Unknown State: ', string)));
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$Firebase_SignIn$decoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'state',
	_user$project$Firebase_SignIn$stateDecoder,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'skipSignIn',
		_elm_lang$core$Json_Decode$bool,
		_elm_lang$core$Json_Decode$succeed(_user$project$Firebase_SignIn$Model)));
var _user$project$Firebase_SignIn$default = {skipSignIn: false, state: _user$project$Firebase_SignIn$TriedSignOut};
var _user$project$Firebase_SignIn$setStateToTriedSignOut = A2(_user$project$X_Record$set, _user$project$Firebase_SignIn$state, _user$project$Firebase_SignIn$TriedSignOut);
