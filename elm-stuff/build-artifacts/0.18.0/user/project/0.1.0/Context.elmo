var _user$project$Context$storeGenerator = _user$project$GroupDoc$storeGenerator('context-db');
var _user$project$Context$setName = F2(
	function (name, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{name: name});
	});
var _user$project$Context$getName = function (_) {
	return _.name;
};
var _user$project$Context$findNameById = function (id) {
	return A2(
		_user$project$Ext_Function_Infix_ops['>>?'],
		_user$project$Store$findById(id),
		_user$project$Context$getName);
};
var _user$project$Context$findByName = function (name) {
	return _user$project$Store$findBy(
		function (_p0) {
			return A2(
				_user$project$Ext_Function$equals,
				_elm_lang$core$String$trim(name),
				_user$project$Context$getName(_p0));
		});
};
var _user$project$Context$nullId = '';
var _user$project$Context$isNullId = _user$project$Ext_Function$equals(_user$project$Context$nullId);
var _user$project$Context$constructor = _user$project$GroupDoc$constructor;
var _user$project$Context$init = F4(
	function (name, now, deviceId, id) {
		return A8(_user$project$Context$constructor, id, '', now, now, false, deviceId, name, false);
	});
var _user$project$Context$null = A8(_user$project$Context$constructor, _user$project$Context$nullId, '', 0, 0, false, '', 'Inbox', false);
var _user$project$Context$filterNull = function (pred) {
	return A2(
		_elm_lang$core$List$filter,
		pred,
		{
			ctor: '::',
			_0: _user$project$Context$null,
			_1: {ctor: '[]'}
		});
};
var _user$project$Context$isNull = _user$project$Ext_Function$equals(_user$project$Context$null);
var _user$project$Context$sort = _user$project$GroupDoc$sort(_user$project$Context$isNull);
var _user$project$Context$Record = F2(
	function (a, b) {
		return {name: a, archived: b};
	});
